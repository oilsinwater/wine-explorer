Directory structure:
└── strudel-science-strudel-kit/
    ├── README.md
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── COPYRIGHT.md
    ├── cypress.config.ts
    ├── index.html
    ├── LICENSE
    ├── package.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── tsr.config.json
    ├── vite.config.ts
    ├── .eslintrc.json
    ├── .lintstagedrc.json
    ├── .prettierrc.json
    ├── cypress/
    │   ├── e2e/
    │   │   └── home.cy.ts
    │   ├── fixtures/
    │   │   └── example.json
    │   └── support/
    │       ├── commands.ts
    │       └── e2e.ts
    ├── docs/
    │   ├── README.md
    │   ├── babel.config.js
    │   ├── components.json
    │   ├── docusaurus.config.ts
    │   ├── package.json
    │   ├── sidebars.ts
    │   ├── tsconfig.json
    │   ├── blog/
    │   │   ├── 2019-05-28-first-blog-post.md
    │   │   ├── 2019-05-29-long-blog-post.md
    │   │   ├── 2021-08-01-mdx-blog-post.mdx
    │   │   ├── authors.yml
    │   │   └── 2021-08-26-welcome/
    │   │       └── index.md
    │   ├── docs/
    │   │   ├── external-resources.md
    │   │   ├── introduction.mdx
    │   │   ├── cli/
    │   │   │   ├── overview.md
    │   │   │   └── reference.md
    │   │   ├── components/
    │   │   │   ├── LabelValueTable.mdx
    │   │   │   ├── LinearMeter.mdx
    │   │   │   └── overview.mdx
    │   │   ├── customization/
    │   │   │   ├── columns.md
    │   │   │   ├── combine-sections.md
    │   │   │   ├── connect-task-flows-together.md
    │   │   │   └── connecting-data.md
    │   │   ├── examples/
    │   │   │   ├── basic-sandbox.mdx
    │   │   │   └── climate-data-analysis-platform.mdx
    │   │   ├── getting-started/
    │   │   │   ├── installation.md
    │   │   │   ├── project-structure.mdx
    │   │   │   └── quickstart.mdx
    │   │   ├── task-flows/
    │   │   │   ├── compare-data.mdx
    │   │   │   ├── contribute-data.mdx
    │   │   │   ├── explore-data.mdx
    │   │   │   ├── monitor-activities.mdx
    │   │   │   ├── overview.mdx
    │   │   │   ├── run-computation.mdx
    │   │   │   └── search-data-repositories.mdx
    │   │   └── tutorials/
    │   │       ├── usrse.mdx
    │   │       └── basic-app-with-strudel/
    │   │           ├── 0-introduction.md
    │   │           ├── 1-setup.md
    │   │           ├── 2-configure-taskflow.md
    │   │           ├── 3-customize-taskflow.md
    │   │           ├── 4-customize-app.md
    │   │           ├── 5-customize-home-page.md
    │   │           └── 6-continue-learning.md
    │   ├── src/
    │   │   ├── components/
    │   │   │   ├── CodeAndPreviewButtons.tsx
    │   │   │   ├── LinkCard.tsx
    │   │   │   └── PropsTable.tsx
    │   │   ├── css/
    │   │   │   └── custom.css
    │   │   ├── pages/
    │   │   │   ├── index.module.css
    │   │   │   └── markdown-page.md
    │   │   └── theme/
    │   │       ├── Root.tsx
    │   │       ├── ColorModeToggle/
    │   │       │   └── index.tsx
    │   │       └── ReactLiveScope/
    │   │           └── index.tsx
    │   └── static/
    │       └── .nojekyll
    ├── public/
    │   ├── robots.txt
    │   ├── data/
    │   │   └── .gitkeep
    │   └── dummy-data/
    │       ├── contributor_datasets.json
    │       ├── datasets.json
    │       ├── experiment_detail.json
    │       ├── experiments.json
    │       ├── inputs.json
    │       ├── list.json
    │       ├── results_bar_chart.json
    │       ├── results_line_chart.json
    │       ├── results_table.json
    │       └── scenarios.json
    ├── src/
    │   ├── App.tsx
    │   ├── declarations.d.ts
    │   ├── index.css
    │   ├── main.tsx
    │   ├── routeTree.gen.ts
    │   ├── theme.tsx
    │   ├── vite-env.d.ts
    │   ├── components/
    │   │   ├── ApiModal.tsx
    │   │   ├── AppLink.tsx
    │   │   ├── ArrayWithPopover.tsx
    │   │   ├── CellWithPopover.tsx
    │   │   ├── CheckboxList.tsx
    │   │   ├── Collapsible.tsx
    │   │   ├── FilterContext.tsx
    │   │   ├── FilterField.tsx
    │   │   ├── FilterGroup.tsx
    │   │   ├── Filters.tsx
    │   │   ├── FiltersPanel.tsx
    │   │   ├── Footer.tsx
    │   │   ├── Formula.tsx
    │   │   ├── ImageWrapper.css
    │   │   ├── ImageWrapper.tsx
    │   │   ├── LabelValueTable.tsx
    │   │   ├── Layout.tsx
    │   │   ├── LinearMeter.tsx
    │   │   ├── PageHeader.tsx
    │   │   ├── RangeSlider.tsx
    │   │   ├── SciDataGrid.tsx
    │   │   ├── StrudelSlider.tsx
    │   │   └── TopBar.tsx
    │   ├── context/
    │   │   ├── actions.ts
    │   │   └── ContextProvider.tsx
    │   ├── hooks/
    │   │   ├── useDataFromSource.tsx
    │   │   ├── useDetailQuery.ts
    │   │   ├── useInterval.tsx
    │   │   └── useListQuery.ts
    │   ├── pages/
    │   │   ├── __root.tsx
    │   │   ├── index.tsx
    │   │   ├── compare-data/
    │   │   │   ├── _layout.tsx
    │   │   │   ├── -context/
    │   │   │   │   ├── actions.ts
    │   │   │   │   └── ContextProvider.tsx
    │   │   │   ├── -tests/
    │   │   │   │   └── compare-data.cy.ts
    │   │   │   └── _layout/
    │   │   │       ├── compare.tsx
    │   │   │       ├── index.tsx
    │   │   │       └── new.tsx
    │   │   ├── contribute-data/
    │   │   │   ├── _layout.tsx
    │   │   │   ├── -components/
    │   │   │   │   ├── DataFilesPanel.tsx
    │   │   │   │   ├── DatasetView.tsx
    │   │   │   │   ├── MetadataPanel.tsx
    │   │   │   │   └── ValidationChecks.tsx
    │   │   │   ├── -context/
    │   │   │   │   ├── actions.ts
    │   │   │   │   └── ContextProvider.tsx
    │   │   │   ├── -tests/
    │   │   │   │   └── contribute-data.cy.ts
    │   │   │   └── _layout/
    │   │   │       ├── index.tsx
    │   │   │       ├── new.tsx
    │   │   │       ├── portal.tsx
    │   │   │       └── review.tsx
    │   │   ├── explore-data/
    │   │   │   ├── $id.tsx
    │   │   │   ├── index.tsx
    │   │   │   ├── -components/
    │   │   │   │   ├── DataView.tsx
    │   │   │   │   ├── DataViewHeader.tsx
    │   │   │   │   ├── FiltersPanel.tsx
    │   │   │   │   └── PreviewPanel.tsx
    │   │   │   └── -tests/
    │   │   │       └── explore-data.cy.ts
    │   │   ├── monitor-activities/
    │   │   │   ├── calendar.tsx
    │   │   │   ├── detail.tsx
    │   │   │   ├── index.tsx
    │   │   │   └── -tests/
    │   │   │       └── monitor-activities.cy.ts
    │   │   ├── playground/
    │   │   │   └── index.tsx
    │   │   ├── run-computation/
    │   │   │   ├── _layout.tsx
    │   │   │   ├── -components/
    │   │   │   │   └── NewScenarioModal.tsx
    │   │   │   ├── -context/
    │   │   │   │   ├── actions.ts
    │   │   │   │   └── ContextProvider.tsx
    │   │   │   ├── -tests/
    │   │   │   │   └── run-computation.cy.ts
    │   │   │   └── _layout/
    │   │   │       ├── index.tsx
    │   │   │       └── $id/
    │   │   │           ├── _layout.tsx
    │   │   │           └── _layout/
    │   │   │               ├── data-inputs.tsx
    │   │   │               ├── results.tsx
    │   │   │               ├── running.tsx
    │   │   │               └── settings.tsx
    │   │   └── search-data-repositories/
    │   │       ├── $id.tsx
    │   │       ├── index.tsx
    │   │       ├── -components/
    │   │       │   ├── DataListCard.tsx
    │   │       │   ├── DataListPanel.tsx
    │   │       │   ├── FiltersPanel.tsx
    │   │       │   └── PreviewPanel.tsx
    │   │       └── -tests/
    │   │           └── search-data-repositories.cy.ts
    │   ├── types/
    │   │   └── filters.types.tsx
    │   └── utils/
    │       ├── filters.utils.ts
    │       ├── queryParams.utils.ts
    │       └── string.utils.ts
    ├── .github/
    │   ├── dependabot.yml
    │   ├── ISSUE_TEMPLATE/
    │   │   ├── bug_report.md
    │   │   ├── feature_request.md
    │   │   └── live_example.md
    │   └── workflows/
    │       ├── deploy.yml
    │       └── main.yml
    └── .husky/
        └── pre-commit

================================================
FILE: README.md
================================================
# STRUDEL Kit

STRUDEL Kit is a React and TypeScript-based starter kit for building scientific UIs based on the STRUDEL Design System and Task Flows. Visit [strudel.science](https://strudel.science) for more information about the STRUDEL project.

This library provides a suite of templates to implement UIs for various different task flows common to the scientific domain. The app is intended to be used as a starting point for building out a modern single-page web app for scientific-type UIs.

[Browse the full docs](https://strudel.science/strudel-kit/docs/)

## What's included?
- [**React**](https://react.dev/): A component-based JavaScript library for building UIs.
- [**TypeScript**](https://www.typescriptlang.org/): A typed superset of JavaScript that compiles to plain JavaScript.
- [**Vite**](https://vite.dev/): A fast, opinionated frontend build tool.
- [**Material UI**](https://mui.com/material-ui/getting-started/): Open-source React component library based on Google's Material Design.
- [**TanStack Router**](https://tanstack.com/router/latest): A fully type-safe router with built-in data fetching, first-class search-param APIs, and more.
- [**ESLint**](https://eslint.org/): The pluggable linting utility for JavaScript and JSX.
- [**Prettier**](https://prettier.io/): An opinionated code formatter.
- [**Husky**](https://typicode.github.io/husky/): Runs a pre-commit hook to lint and style staged code.
- [**Cypress**](https://www.cypress.io/): End-to-end tests for built-in templates.
- [**Task Flow Templates**](https://strudel.science/design-system/task-flows/overview/): Six template flows based on common patterns. 

![Home page](images/home.png)

![Run Computation results page](images/run-computation-results.png)

## Getting Started

### Option 1: Use this template

Click the green "Use this template" button on the [strudel-kit GitHub page](https://github.com/strudel-science/strudel-kit). Create your own repository from the strudel-kit code and give it a name.

Clone the strudel-kit repository from your new repo.

### Option 2: degit

Generate a new project from strudel-kit using [degit](https://github.com/Rich-Harris/degit):
```
npx degit strudel-science/strudel-kit my-app
```

### Option 3: Fork this repo

Especially if you want to contribute back, you can click the Fork button to create a fork of this repo from the [strudel-kit GitHub page](https://github.com/strudel-science/strudel-kit).

Clone the strudel-kit repository from your new fork.

### Install and Start

Install the dependencies:

```
npm install
```

Start up the app:

```
npm start
```

Open [http://localhost:5175](http://localhost:5175) to view the app in the browser.

Begin modifying the templates in `src/pages`.

## Contributions

STRUDEL Kit welcomes contributions of all kinds! Learn how to submit suggestions and changes in [CONTRIBUTING.md](https://github.com/strudel-science/strudel-kit/blob/main/CONTRIBUTING.md).

## License 

This software is licensed through the [Lawrence Berkeley National Lab](https://www.lbl.gov/) and can be used, modified, and shared at absolutely no cost. [Read the full license](https://github.com/strudel-science/strudel-kit/blob/main/LICENSE).

## Attribution

We kindly ask that you take two steps to attribute this repo if you find it useful to your work:

1. Give us a star on our GitHub Page
2. Credit the STRUDEL project and strudel-kit repo in your README.

> This project utilized the [strudel-kit](https://github.com/strudel-science/strudel-kit/tree/main) repository. Read more about [STRUDEL](https://strudel.science).



================================================
FILE: CODE_OF_CONDUCT.md
================================================
We are currently developing our own code of conduct however in the interim, we will be following the [Contributor Covenant](https://www.contributor-covenant.org/version/2/1/code_of_conduct/) to ensure our community is respectful, welcoming, and effective.

# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual
identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the overall
  community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or advances of
  any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email address,
  without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official email address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
strudel@lbl.gov.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series of
actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or permanent
ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior, harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within the
community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.1, available at
[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

Community Impact Guidelines were inspired by
[Mozilla's code of conduct enforcement ladder][Mozilla CoC].

For answers to common questions about this code of conduct, see the FAQ at
[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at
[https://www.contributor-covenant.org/translations][translations].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html
[Mozilla CoC]: https://github.com/mozilla/diversity
[FAQ]: https://www.contributor-covenant.org/faq
[translations]: https://www.contributor-covenant.org/translations



================================================
FILE: CONTRIBUTING.md
================================================
# **STRUDEL Contribution Guide**

**\! Tip:** [Jump straight to a list](#engaging-and-contributing) of ways you can contribute to STRUDEL.

Hi and thank you for being part of the STRUDEL community\! This guide will describe several ways you can contribute to STRUDEL. Here we discuss changes to the STRUDEL Kit, but advice is relevant to sharing designs or making changes to our website. We welcome contributions of all kinds, including those we haven’t thought of yet. 

This guide is a work in progress; feel free to propose revisions by [opening an issue in Github](#opening-an-issue). This version focuses on the STRUDEL Task Flows app, templates, and accompanying documentation; information on contributing to the CLI will be forthcoming. Reach out via a [discussion thread](#opening-a-discussion) if you want to know more.

**Table of contents:**

[Contributors](#contributors)

&nbsp;&nbsp;&nbsp;&nbsp;[Maintainers](#maintainers)

[Code of Conduct](#code-of-conduct)

[Engaging and Contributing](#engaging-and-contributing)

[Getting Help](#getting-help)

[General Procedures for Version Controlled Changes](#general-procedures-for-version-controlled-changes)

&nbsp;&nbsp;&nbsp;&nbsp;[Start with a GitHub Issue](#start-with-a-github-issue)

&nbsp;&nbsp;&nbsp;&nbsp;[Fork and Setup your Dev Environment](#fork-and-setup-your-dev-environment)

&nbsp;&nbsp;&nbsp;&nbsp;[Code your Changes](#code-your-changes)

&nbsp;&nbsp;&nbsp;&nbsp;[Make a Pull Request to the Main Branch](#make-a-pull-request-to-the-main-branch)

[About the Repository](#about-the-repository)

&nbsp;&nbsp;&nbsp;&nbsp;[Framework and Languages](#framework-and-languages)

&nbsp;&nbsp;&nbsp;&nbsp;[Page Routing](#page-routing)

&nbsp;&nbsp;&nbsp;&nbsp;[Testing](#testing)

&nbsp;&nbsp;&nbsp;&nbsp;[Linting and Code Styling](#linting-and-code-styling)

&nbsp;&nbsp;&nbsp;&nbsp;[License](#license)

[Setting up a Local Development Environment](#setting-up-a-local-development-environment)

&nbsp;&nbsp;&nbsp;&nbsp;[Prerequisites](#prerequisites)

&nbsp;&nbsp;&nbsp;&nbsp;[Instructions](#instructions)

[Issues and Discussions](#issues-and-discussions)

&nbsp;&nbsp;&nbsp;&nbsp;[What is an Issue?](#what-is-an-issue)

&nbsp;&nbsp;&nbsp;&nbsp;[Opening an Issue](#opening-an-issue)

&nbsp;&nbsp;&nbsp;&nbsp;[Commenting on an Issue](#commenting-on-an-issue)

[What is a Discussion?](#what-is-a-discussion)

&nbsp;&nbsp;&nbsp;&nbsp;[Opening a Discussion](#opening-a-discussion)

&nbsp;&nbsp;&nbsp;&nbsp;[Contributing to a Discussion](#contributing-to-a-discussion)

&nbsp;&nbsp;&nbsp;&nbsp;[Turning a Discussion into an Issue](#turning-a-discussion-into-an-issue)

[Filing or Fixing a Bug](#filing-or-fixing-a-bug)

[Improving the Code](#improving-the-code)

[Proposing or Adding a Feature](#proposing-or-adding-a-feature)

[Proposing or Adding a New Task Flow](#proposing-or-adding-a-new-task-flow)

&nbsp;&nbsp;&nbsp;&nbsp;[Proposing a Task Flow](#proposing-a-task-flow)

&nbsp;&nbsp;&nbsp;&nbsp;[Designing a Task Flow](#designing-a-task-flow)

&nbsp;&nbsp;&nbsp;&nbsp;[Design Review](#design-review)

&nbsp;&nbsp;&nbsp;&nbsp;[Coding a Task Flow](#coding-a-task-flow)

[Revising the Docs](#revising-the-docs)

&nbsp;&nbsp;&nbsp;&nbsp;[Improving Guides](#improving-guides)

[Adding an Example](#adding-an-example)

[Sharing UX Resources or Principles](#sharing-ux-resources-or-principles)

## Contributors

STRUDEL is an open source project that is developed and supported by a community of contributors. These contributors have served STRUDEL in a variety of ways: as funders, code contributors, workshop instructors, infrastructure partners, feedback providers, and more. We hope you will join us.

Our thanks to the following contributors:  
Erin Becker  
Georgia Bullen  
Hannah Cohoon  
Jim Colliander  
Eriol Fox  
Dan Gunter  
Toby Hodges  
Maarten Lopes  
Jarrod Millman  
Ingrid Ockert  
Drew Paine  
Sarah Poon  
Lavanya Ramakrishnan  
Maryam Vareth  
Tiffany Win

Thanks also go to the following organizations:  
[2i2c](https://2i2c.org/)  
[BIDS](https://bids.berkeley.edu/)  
[Superbloom](https://superbloom.design/)

STRUDEL has been generously funded by the Alfred P. Sloan Foundation, Liz Vu & Josh Greenberg Program Officers, grants \#10074, \#10572, and \#22557

We also wish to acknowledge attendees at the STRUDEL inaugural hackathon in 2024 and at the US-RSE’24 workshop. Thanks to all for your participation, questions, and feedback\!



### Maintainers

*Maintainers* fill an important role within the STRUDEL community. Maintainers are contributors that have a formal responsibility to STRUDEL—these people are employed or have otherwise agreed to add to, revise, and update the various repositories. If you reach out to the STRUDEL team via Github or email, it is likely you will get a response from one of our maintainers.

Our maintainers currently include:  
Cody O’Donnell, @codytodonnell  
Rajshree Deshmukh, @Rjdesh

As STRUDEL matures, we will be developing and refining governance procedures, including defining how people and organizations formally join or underwrite STRUDEL. If you have thoughts on this, you can share them by [opening a discussion thread](#opening-a-discussion). For now, anyone can be a contributor by engaging in [one of the ways we’ve identified in this guide](#engaging-and-contributing).


## Code of Conduct

We want everyone to have a positive experience both using and contributing to this library. In choosing to participate and contribute to STRUDEL, you are agreeing to abide by our [Code of Conduct](https://github.com/strudel-science/strudel-kit/blob/main/CODE_OF_CONDUCT.md) which follows the [Contributor Covenant](https://www.contributor-covenant.org/version/2/1/code_of_conduct/).


## Engaging and Contributing
STRUDEL is a way to plan, design, and build usable scientific software. STRUDEL will be a better tool if it is anchored in community needs and insights, so your engagement and contributions are very valuable. We recommend you get involved with STRUDEL through one of the activities listed below and elaborated on elsewhere in this guide. If you have another idea of how you can support that mission, we encourage you to pursue it. Contributions come in all shapes and sizes and we value them all. Let us know if you [need help](#getting-help).

Some ways to get involved:

* [**Enhancing features**](#proposing-or-adding-a-feature) **or [fixing a bug](#filing-or-fixing-a-bug):** Make revisions to existing STRUDEL Kit code   
* [**Adding a Task Flow**](#proposing-or-adding-a-new-task-flow)**:** Contribute an entirely new stepwise flow to be included in the STRUDEL Kit  
* [**Revising documentation**](#revising-the-docs)**:** Correct or elaborate on any information about STRUDEL  
* [**Improving tutorial content**](#improving-guides)**:** Enhance existing tutorials or add your own  
* [**Sharing UX resources or principles**](#sharing-ux-resources-or-principles)**:** Provide reliable UX insights or resources that can help  guide STRUDEL use or development  
* [**Sharing or discussing an idea**](#contributing-to-a-discussion)**:** Add to or begin a conversation about STRUDEL or scientific user experiences 
* [**Share how you’re using STRUDEL**](#adding-an-example)**:** Share your use case with the community   
* [**Give us a star on Github**](https://github.com/strudel-science/strudel-kit)**:** Signal your support for the project by [starring](https://docs.github.com/en/get-started/exploring-projects-on-github/saving-repositories-with-stars) the STRUDEL Kit repository  
* [**Get to know the UX in science community**](https://us-rse.org/wg/ux/)**:** Join a working group for people interested in learning about and improving scientific user experiences, organized by the US Research Software Engineers (US-RSE) Association. US-RSE is not STRUDEL affiliated, but you will find us and like minded people in the UX working group there.


## Getting Help

We recommend that if you have a question you first read through this contribution guide and any other relevant STRUDEL documentation. If you are unable to answer your question that way, we encourage you to [ask your question publicly using a discussion thread.](#what-is-a-discussion) That will allow other people to take part in the conversation and benefit from any answers you receive. If you need to discuss something privately or don’t have a Github account, you can reach out to the STRUDEL maintainers via email at [strudel@lbl.gov](mailto:strudel@lbl.gov). 


## General Procedures for Version Controlled Changes
STRUDEL uses [version control](https://github.com/resources/articles/software-development/what-is-version-control) and collaborative development tools offered by Github. These resources help us keep track of changes to the code and who made them, discuss ideas, and engage with new contributors more easily. 

If you are making a contribution to STRUDEL, it is likely that you will need to do so via Github. To keep code quality high and consistent, we share important information here about the general procedures for making changes to STRUDEL. This is relevant to making contributions like [proposing or adding a feature](#proposing-or-adding-a-feature), [fixing or filing a bug](#filing-or-fixing-a-bug), [adding a Task Flow](#proposing-or-adding-a-new-task-flow), [revising documentation](#revising-the-docs), or [improving tutorial content](#improving-guides). However, for contributions like [sharing](#sharing-ux-resources-or-principles) or [discussing ideas](#what-is-a-discussion) or [giving examples of STRUDEL use cases](#adding-an-example), the sections on [issues and discussions](#issues-and-discussions) and those specific contribution mechanisms will be more useful to you. Additional relevant background knowledge for making code contributions can be found in [About the repository](#about-the-repository) and [Setting up a local development environment](#setting-up-a-local-development-environment).

**\! Tip:** We highly recommend that you read through the relevant documentation in this section and others before beginning any coding for STRUDEL. There are tips throughout this guide on how to work on relevant problems, when to expect feedback, styling, and more that are important for ensuring your success. 

### Start with a GitHub Issue

If you would like to make a change to strudel-kit, be it a bug fix or a whole new feature, that change should start with a Github issue. Issues, [detailed elsewhere in this guide](#what-is-an-issue), allow us to develop and document a plan for addressing a needed change. Equally important, they help our maintainers know who is doing what work on STRUDEL—a necessity for coordinated efforts.

You may [open an issue](#opening-an-issue) or begin work on an existing issue.  

**\! Tip:** If you would like to help out with an open, existing issue, look for the “help-wanted” tag in the issues list in the strudel-kit repo. These are specially flagged because our maintainers think they would be approachable issues for new contributors (or because we could really use a helping hand with them\!). 

Once you know which issue you are working on, [leave a comment](#commenting-on-an-issue) to say so. 

### Fork and Setup your Dev Environment

To work on an issue, you will want to fork the strudel-kit repository and set up your own development environment. Follow the steps in [Setting up a local development environment](#setting-up-a-local-development-environment) to do so.

Inside your fork, [create a new branch](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository) for your change. This is an aspect of version control that allows us to keep track of and provide credit for changes. 

If you are adding a new feature, name your branch feature/description-of-feature. For example, the branch might be called feature/update-metadata-task-flow if you wanted to add a Task Flow for updating metadata. If it is a bug fix, name your branch bugfix/description-of-bugfix. For example, the branch might be called bugfix/tutorial-spelling-fix if you wanted to fix a spelling mistake in some tutorial content.

### Code your Changes

Next, code your changes\! If you have questions about where certain code exists or how it is set up, post in the issue thread you already created or selected and one of the maintainers will try to help you. We recommend you make a change to this CONTRIBUTING.md file as well, adding your name in alphabetical order to the [list of contributors](#contributors).

**\! TIP:** Because the STRUDEL Kit and tutorial content is meant to be used as a template for users, it is encouraged that you be liberal in your usage of comments throughout the code. Help newcomers understand exactly what they are supposed to do with your code by leaving comments for them.

### Make a Pull Request to the Main Branch

Once your code is ready, [open a pull request to the \`main\` branch](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) of strudel-kit and describe your change in detail. Ensure that all [tests](#testing) are passing. One of the core team members will engage with you in the pull request thread and approve the changes or request some additional edits. Once ready, one of the core team members will merge your code into the kit\!

Remember to [read our license](https://github.com/strudel-science/strudel-kit/blob/main/LICENSE) so you understand how code in the kit can be shared and used. This is a public, free, and open source project so any code you contribute will be too.


## About the Repository

### Framework and Languages

The strudel-kit app templates are written in TypeScript using the React web development framework. Below are all of the relevant technologies used in the app:

* [TypeScript](https://www.typescriptlang.org/)  
* [React](https://react.dev/)  
* [Vite](https://vite.dev/)  
* [Material UI](https://mui.com/)  
* [Generouted](https://github.com/oedotme/generouted)  
* [PlotlyJS](https://plotly.com/javascript/)

### Page Routing

This app used Generouted to automatically create routes based on the folders and files in `src/pages`. Read more about how this works in the [Generouted docs](https://github.com/oedotme/generouted?tab=readme-ov-file#conventions).

### Testing

This app uses [Cypress](https://www.cypress.io/) for testing the different Task Flows. Each Task Flow directory contains a `_tests` directory which has at least one test for that Task Flow. Each test is intended to test the general UI flow and functionality of that part of the template.

### Linting and Code Styling

This repository uses [ESLint](https://eslint.org/) and [Prettier](https://prettier.io/) to lint and format code in the repository. Any changes you make will run through the linter before being committed and you may have errors and warnings to fix before you can successfully commit code. This ensures that all the code follows similar guidelines. We generally follow the [AirBnB React Style Guide](https://github.com/airbnb/javascript/tree/master/react), but the ESLint warnings on the command line should guide you to how to fix the problem. 

We request that you include lots of comments so that our maintainers, other contributors, and STRUDEL Kit users can work with your code easily too. 

### License

The code in this repository is free and open source under an agreement with the Lawrence Berkeley National Lab. [Read the full license](https://github.com/strudel-science/strudel-kit/blob/main/LICENSE).


## Setting up a Local Development Environment

If you are trying to develop a new UI feature or fix a bug in the code, you will need to set up a local development environment that runs the strudel-taskflows template app.

### Prerequisites

* [Git](https://git-scm.com/downloads)  
* [NodeJS and NPM](https://nodejs.org/en/download/package-manager)  
* Code editor such as [VSCode](https://code.visualstudio.com/download)

### Instructions

Fork the [strudel-kit](https://github.com/strudel-science/strudel-kit) repository from GitHub.

Open up a terminal on your computer and clone your forked repo.

```
git clone git@github.com:your-gh-username/strudel-kit.git
```

Navigate to the newly created `strudel-kit` directory, then go `cd` into the `strudel-taskflows` directory and install the dependencies.

```
npm install
```

Once the install completes successfully, start the application.

```
npm start
```
   
Now you should be able to access the web app at [https://localhost:5175](https://localhost:5175)


## Issues and Discussions

STRUDEL has two means of communication for the community to propose improvements and discuss STRUDEL: issues and discussions. The line between these is blurry but here we will provide some guidelines for you to use if you are uncertain which is right for you. 

If you have something to say or ask but are not confident about where it belongs, just take a guess. It is more important that we hear from you than it is that you reach out through a specific channel. Let us know you were confused so that we can improve things for the community.

This section has general information on opening and commenting on issues and discussions of all types. No matter how you’re communicating within the STRUDEL community, be respectful with your language. We expect all contributors to follow the [Code of Conduct](https://github.com/strudel-science/strudel-kit/blob/5545943ad9d5a1e6cf5d719ee1ad3e7be6fd43cc/CODE_OF_CONDUCT.md). 

### What is an Issue?

An issue is a way to describe a concrete problem or needed improvement to a codebase. Issues are associated with a repository. Once submitted, STRUDEL team members and other contributors can comment on the issue to ask questions, track progress, or otherwise provide updates. 

An issue should be opened when new or revised code or content is needed to align the repository with current expectations for STRUDEL. For example: 

- Something that was working is suddenly broken  
- A new feature is planned and must be implemented  
- Norms or facts suggest that something should be one way but you are experiencing something different (e.g., issues with spelling, functionality, documentation, style, testing, etc.)

If you have an idea that needs refinement before code changes should begin, consider a [discussion thread instead](#what-is-a-discussion).

Because issues are associated with a repository, for them to get attention from the right people most quickly, they should be opened within the correct repository. In this guide, we largely discuss how you might make contributions to the STRUDEL Kit in the strudel-kit repository; if you want to contribute to our website, see the [strudel-web repository](https://github.com/strudel-science/strudel-web). 

**\! Tip:** Resolving issues is a good way to get involved with STRUDEL development and maintenance. You may find some good issues to work on by searching for issues labeled with “help-wanted.” More information on this process is available in the [Adding a feature or fixing a bug](#proposing-or-adding-a-feature) section.

#### Opening an Issue

When opening an issue you should:

1. Log into Github. If you do not have a Github account, you cannot log an issue but you can view existing ones. If you do not wish to create a Github account, please follow the relevant advice below and simply email your issue to [strudel@lbl.gov](mailto:strudel@lbl.gov).   
2. Look to see if your issue has already been logged. You can scroll through open issues or you can search the repository.   
   1. If you find an existing issue that represents your concern, you can leave a [comment on that one](#commenting-on-an-issue) rather than opening a new one.   
   2. If you don’t see a relevant issue, proceed to the next step.   
3. [Open the issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/creating-an-issue#creating-an-issue-from-a-repository). Give your issue a descriptive title. A good, descriptive title might be, “Broken link on About page,” whereas a vague title would be, “Page not working.” If this is an issue you would like to work on resolving yourself, say so in the message  body.  

#### Commenting on an Issue

You may have an opinion or information relevant to an existing issue. To share that, you can comment on an issue. To comment:

1. Log into Github. If you do not have a Github account, you cannot comment on an issue but you can view existing ones. If you do not wish to create a Github account, please follow the relevant advice below and simply email your issue to [strudel@lbl.gov](mailto:strudel@lbl.gov).  
2. Navigate to the relevant issue and read through the comments that have already been left.  
3. At the bottom of the page, in the “Add a comment” field, leave whatever comment you wish. This may be saying that you have the same problem or idea, that you have a suggestion, that you have a question, or something else.   
4. Click the green “Comment” button to submit your comment.

### What is a Discussion?

Like issues, discussions are a way that you can share your thoughts and feedback on any component of STRUDEL. These are [a feature of Github](https://docs.github.com/en/discussions/collaborating-with-your-community-using-discussions/about-discussions). However, whereas an issue should be specific and actionable, a discussion can be more general or thought provoking. Discussion threads may also be opened to make an announcement or just to foster community. If a discussion generates an actionable consensus on some topic, that discussion may be [turned into an issue](#turning-a-discussion-into-an-issue).

Our Github organization is set up so that discussions are not specific to repositories, meaning that to find or open a discussion thread you do not need to be in a particular repository, just within the [strudel-science organization](https://github.com/strudel-science). 

#### Opening a Discussion

When opening a discussion thread, you should:

1. Log into Github. If you do not have a Github account, you cannot create a discussion but you can view existing ones. If you do not wish to create a Github account, please follow the relevant advice below and simply email your comment to [strudel@lbl.gov](mailto:strudel@lbl.gov).  
2. Search through the [existing discussions](https://github.com/orgs/strudel-science/discussions) to see if there is already a thread opened on your topic.   
   1. If there is, you can [contribute to that discussion](#contributing-to-a-discussion) instead of opening your own.   
   2. If there is not a relevant discussion thread already, then proceed to the next step.
3. Follow Github’s instructions on [opening a discussion](https://docs.github.com/en/discussions/collaborating-with-your-community-using-discussions/participating-in-a-discussion#creating-a-discussion). Give the discussion a descriptive title so that others can easily understand the specific topic. Try to limit the scope so that all things STRUDEL don’t get discussed in a single thread. For example, a good title and topic might be “Feedback on in person workshops,” whereas a vague title and topic might simply be “Feedback.”   

#### Contributing to a Discussion

You can add to an ongoing discussion by leaving a comment on an open Discussion thread. To do so:

1. Log into Github. If you do not have a Github account, you cannot comment on a discussion but you can view existing ones. If you do not wish to create a Github account, please follow the relevant advice below and simply email your comment to [strudel@lbl.gov](mailto:strudel@lbl.gov).  
2. Go to [the Discussions page](https://github.com/orgs/strudel-science/discussions).  To navigate there from the STRUDEL [organization homepage on Github](https://github.com/strudel-science), click on “Discussions” near the top of your screen—this is an option to the right of “Overview” and “Repositories.” This button is also visible from within some, but not all, of the STRUDEL repositories. It does not matter how you navigate to Discussions, you will find the same content regardless.   
3. Search through the list of existing discussion threads and click on the one you’re interested in.   
4. You may leave whatever comment you wish, so long as it abides by our [Code of Conduct](https://github.com/strudel-science/strudel-kit/blob/5545943ad9d5a1e6cf5d719ee1ad3e7be6fd43cc/CODE_OF_CONDUCT.md). Sometimes, the first post on a discussion thread might include suggestions for how to respond. For example, [this thread](https://github.com/orgs/strudel-science/discussions/42) about proposing new Task Flows encourages respondents to answer a set of questions when responding. 

Discussions allow you to leave top level comments by scrolling to the bottom of the page and writing something in the “Add a comment” field. This will allow you to respond directly to the first post in the discussion. 

Alternatively, you can reply to someone else’s response by visiting their comment within a discussion and commenting in the field that has the “Write a reply” prompt. 

Github allows you to get others’ attention by tagging them. You might pull someone into a discussion by typing “@” in the text field and then typing their name or username. For example, you can tag Cody O'Donnell by typing @codytodonnell.

If you want to show support for an idea or draw attention to a topic, you can upvote [comments](https://docs.github.com/en/discussions/collaborating-with-your-community-using-discussions/participating-in-a-discussion#upvoting-a-comment) and [discussions](https://docs.github.com/en/discussions/collaborating-with-your-community-using-discussions/participating-in-a-discussion#upvoting-a-discussion).

#### Turning a Discussion into an Issue

Github allows users to create an issue from a discussion thread. Doing so would signal that a discussion has led to an actionable decision that will affect a STRUDEL repository. At present, we recommend that only STRUDEL maintainers take this step. As criteria for when turning a discussion into an issue become more clear over time, we will share these criteria so that others can do the same. If you have suggestions for these criteria or other commentary on who should be able to take what actions, you may want to [open a discussion thread](#opening-a-discussion) or to [revise the docs](#revising-the-docs) yourself. 


## Filing or Fixing a Bug

If there is a problem with the STRUDEL Kit, you can [file a bug](#opening-an-issue) to say so. If you want to fix a bug yourself, [say so in the relevant issue](#commenting-on-an-issue) and follow the same steps as those described in the [General Procedures](#general-procedures-for-version-controlled-changes) section. 


## Improving the Code

Improving, tidying, or refactoring code is another good way to contribute to the project. More info coming soon\!


## Proposing or Adding a Feature

Depending on the type of idea you have and interest in coding the changes yourself, you’ll follow different routes for proposing or adding a feature:

* If you don’t want to implement any changes yourself but want to propose a new feature, we suggest [opening a discussion](#opening-a-discussion).    
* If you want to add a new Task Flow, different to those included in the STRUDEL Kit, [see that section](#proposing-or-adding-a-new-task-flow).   
* If the change you have in mind is any other kind of new capability and you have a clear proposal, you should follow the steps described in the [General Procedures](#general-procedures-for-version-controlled-changes) section. If you open an issue yourself when following those steps, use the [Feature Request issue template](https://github.com/strudel-science/strudel-kit/issues/new?template=feature_request.md).


## Proposing or Adding a New Task Flow

You may be interested in contributing an idea, a design, code, or feedback on a new Task Flow. Here, we talk you through each step. 

### Proposing a Task Flow

If you have an idea for a new Task Flow, the first thing you should do is make a post about it in the [Propose a Task Flow discussion thread](https://github.com/orgs/strudel-science/discussions/42). This helps socialize your ideas immediately and prevent duplicate efforts. The top post in that thread indicates what goes into proposing a Task Flow: the name of the flow, the scientific motivation, and any examples that exist in current software. Examples could be something you have built or not, as long as they help communicate the common pattern you want to encapsulate into a Task Flow template.

Once you have made a post in the thread, other members of the community can [upvote or comment on](#contributing-to-a-discussion) your proposed Task Flow. This helps us vet and iterate on Task Flows while they are in the ideation phase. If there is consensus in the thread that this Task Flow is worth building out, one of the [maintainers](#maintainers) will indicate so in the thread and create an issue for the Task Flow using the New Task Flow issue template. If you want to lead the creation of this Task Flow, you can say so in the body of the issue. This doesn’t necessarily mean that you have to do all the work on the Task Flow, but it means that you are making sure the necessary steps are taken to take the Task Flow from idea to design to code.

### Designing a Task Flow

The next step to creating a new Task Flow is typically going to be designing how that Task Flow should look and function. There are multiple ways you can go about designing a Task Flow and you should choose whichever option that you prefer. No matter how you do it, your design must include visual representations of each of the screens that make up the Task Flow. 

Remember that you are making a generalizable template. This means that the design should not be too domain specific and should be easy to expand upon. For example, a Task Flow that is too specific might be a series of steps that allow users to add metadata according to a domain standard metadata scheme. A more generalizable Task Flow would be something that allowed app developers to enable use of any metadata scheme—not just that domain specific standard.

Whichever approach you use, once finished, you should attach screenshots of your designs to the issue thread in a new comment. If there is a link to a digital version of your designs (such as a Figma file), you should include that too.

Approaches you may use to designing a Task Flow include:

*Creating a Figma File*

[Figma](https://www.figma.com/) is the tool our team has used to design all of the existing Task Flows and is a great option for building your own Task Flow design. We use the MUI for Figma plugin for all the low-level components.

*Creating Sketches*

Pen and paper sketches are another effective way to share your designs. Feel free to use this method and attach photos to the issue.

*Using a Different Program*

There are many other programs you can use to make designs such as [Adobe Illustrator](https://www.adobe.com/products/illustrator.html), [Sketch](https://www.sketch.com/), [Inkscape (free)](https://inkscape.org/), or even PowerPoint or Keynote. Feel free to use any tool that you are comfortable with and share either exported images or screenshots in the associated issue.

### Design Review

After sharing your design for a Task Flow, reach out via email ([strudel@lbl.gov](mailto:strudel@lbl.gov)) so we can set up a design review meeting with you to talk about the designs, scope the Task Flow, and discuss next steps. These will take place over Zoom. 

### Coding a Task Flow

Task Flows are implemented as code in our TypeScript React template app, [strudel-kit](https://github.com/strudel-science/strudel-kit). The templates are intended to implement the basic flow, UI, and certain key generalizable features of the Task Flow. 

**\! Tip:** You will need a working knowledge of JavaScript/TypeScript and React to develop a new Task Flow template. Check out [some of the resources linked on our website](https://strudel.science/design-system/code-library/) if you are just getting started with these tools.

Assuming [you already have an open issue](#start-with-a-github-issue) to work on, the first thing you will need to do to code a new Task Flow is follow the steps in [Setting up a local development environment](#heading=h.6qppe621p4yz) above. After this you will have a local copy of the template app that you can begin developing inside of. (You might notice that you are following the [General Procedures for making changes](#general-procedures-for-version-controlled-changes), described elsewhere in this guide).

Each Task Flow template resides in the `src/pages` directory and has its own directory named after the Task flow in kebab-case. A Task Flow template will consist of page components, inner page components, layout components, and a config. Read more about [the anatomy of a Task Flow](https://strudel.science/strudel-kit/docs/task-flows/overview) in our docs. Your new Task Flow should follow the same general structure as the other Task Flow pages.

For example, if the Task Flow is called Update Metadata, you will create a new directory in `src/pages` called `update-metadata`. Inside `update-metadata` you will make: 

* An `index.tsx` file (this is the first page of your Task Flow)  
* A directory called `_components` for any inner page components that are specific to this Task Flow  
* A directory called `_config` which inside you will add a `taskflow.config.ts` file and a `taskflow.types.ts` file.  
* Files for other pages in the Task Flow. For example, if there are two other pages besides the first page (index.tsx), then you will create two other page component files such as `analyze.tsx` and `visualize.tsx`. This will create the routes /update-metadata/analyze and /update-metadata/visualize.

The app uses a library called [Generouted](https://github.com/oedotme/generouted) to automatically generate page routes based on the files in the \`src/pages\` directory. See their [conventions documentation](https://github.com/oedotme/generouted?tab=readme-ov-file#conventions) for how to make more complex routes.


## Revising the Docs

Improving and maintaining the documentation for STRUDEL Kit is a welcome contribution. [New examples](#adding-an-example), [improved guides and tutorials](#improving-guides), typo fixes, better and more complete explanations are all helpful. 

The strudel-kit docs are built using [Docusaurus](https://docusaurus.io/), a Markdown-based documentation builder. You can find the markdown files for the doc pages in the `docs/docs` directory. You will make changes to the documentation by following the [General Procedures for making changes](#general-procedures-for-version-controlled-changes). 

If you would like to make additions or changes to the documentation, please keep the following in mind:

1. Avoid redundancy, keep it brief. This means you should link to other sections that explain concepts or procedures, rather than rewriting information. Link to dependencies’ documentation rather than rewriting what they already have. Assume that less text is better.  
2. Consider the audience. STRUDEL contributors may be professional research software engineers or they may be undergraduate students who attended a tutorial. When writing the documentation, consider what background knowledge and infrastructure they may already have and what you need to provide.  Examples may be helpful to provide.   
3. The general structure of this contribution guide is to move from high level information to specific examples of ways people can contribute. There isn’t necessarily a “right order” to the content, but we try to group information by topic and include information that applies to all contributions earlier in the docs, rather than later.  
4. Use consistent language and formatting. Follow these tips:  
   1. Use [title case](https://en.wikipedia.org/wiki/Title_case) for section titles.  
   2. Capitalize STRUDEL, STRUDEL Kit, and Task Flows.  
   3. Capitalize General Procedures when referring to [the usual steps](#general-procedures-for-version-controlled-changes) you would follow to make a change to the STRUDEL Kit  
   4. Do not capitalize repositories (e.g. strudel-kit).  
   5. Avoid acronyms and abbreviations. Say “pull request” not “PR.” Say “repository,” not “repo.”  
   6. When describing a step by step process, make each step a paragraph.  

### Improving Guides

There are several guides for working with the STRUDEL Kit in our documentation. If you would like to improve them, follow the [General Procedures for making a change](#general-procedures-for-version-controlled-changes). If you choose to address the issue yourself, you can edit the appropriate `.mdx` file under `docs/docs/guides`. 

If you have feedback about any of the tutorials but don’t have a specific change to the content in mind, we’d still love to hear from you. Make a post in our Discussions page under [Tutorials](https://github.com/orgs/strudel-science/discussions/categories/q-a).


## Adding an Example

A big to-do item for STRUDEL is to compile and share example implementations. We plan to add information to this guide on how you might share images, code, or interactive examples of the STRUDEL Kit put to use. For now, please share your example [in a discussion thread](#opening-a-discussion) under the [Show and Tell category](https://github.com/orgs/strudel-science/discussions/categories/show-and-tell?discussions_q=is%3Aopen+category%3A%22Show+and+tell%22). 


## Sharing UX Resources or Principles

Sharing UX resources is another great way to participate in the community. If you find an article, tool, or other resource that you think is relevant to STRUDEL or the user experience of scientific software, make a post about it in our Discussions page under [Show and Tell](https://github.com/orgs/strudel-science/discussions/categories/show-and-tell). You might also be interested in getting more involved in the broader UX in science community [via US-RSE and its UX working group](https://us-rse.org/wg/ux/).



================================================
FILE: COPYRIGHT.md
================================================
# Copyright Notice

Scientific sofTware Research for User experience, Design, Engagement, and Learning (STRUDEL) Copyright (c) 2024, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Dept. of Energy). All rights reserved.

If you have questions about your rights to use or distribute this software,
please contact Berkeley Lab's Intellectual Property Office at
IPO@lbl.gov.

NOTICE. This Software was developed under funding from the U.S. Department
of Energy and the U.S. Government consequently retains certain rights. As
such, the U.S. Government has been granted for itself and others acting on
its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
Software to reproduce, distribute copies to the public, prepare derivative
works, and perform publicly and display publicly, and to permit others to do so.



================================================
FILE: cypress.config.ts
================================================
import { defineConfig } from 'cypress';

export default defineConfig({
  e2e: {
    baseUrl: 'http://localhost:5175/',
    specPattern: [
      'cypress/e2e/**/*.cy.{js,jsx,ts,tsx}',
      'src/**/*.cy.{js,jsx,ts,tsx}',
    ],
  },
});



================================================
FILE: index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon-32x32.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>STRUDEL + React + MUI</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: LICENSE
================================================
License Agreement
=================

Scientific sofTware Research for User experience, Design, Engagement, and Learning (STRUDEL) Copyright (c) 2024, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Dept. of Energy). All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

(1) Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

(2) Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

(3) Neither the name of the University of California, Lawrence Berkeley
National Laboratory, U.S. Dept. of Energy nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

You are under no obligation whatsoever to provide any bug fixes, patches,
or upgrades to the features, functionality or performance of the source
code ("Enhancements") to anyone; however, if you choose to make your
Enhancements available either publicly, or directly to Lawrence Berkeley
National Laboratory, without imposing a separate written license agreement
for such Enhancements, then you hereby grant the following license: a
non-exclusive, royalty-free perpetual license to install, use, modify,
prepare derivative works, incorporate into other computer software,
distribute, and sublicense such enhancements or derivative works thereof,
in binary and source code form.


================================================
FILE: package.json
================================================
{
  "name": "strudel-taskflows",
  "private": true,
  "version": "0.1.2",
  "type": "module",
  "homepage": "https://codytodonnell.github.io/strudel-kit/demo/",
  "scripts": {
    "start": "vite",
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "deploy": "gh-pages -d dist -e demo",
    "style:all": "tsc && npm run lint && npm run prettier",
    "lint": "eslint . '**/*.{js,jsx,ts,tsx}'",
    "lint:fix": "eslint . --fix '**/*.{js,jsx,ts,tsx}'",
    "prettier": "prettier . --check '**/*.{js,jsx,ts,tsx}'",
    "prettier:fix": "prettier . --write '**/*.{js,jsx,ts,tsx}'",
    "prepare": "husky ./.husky",
    "cy:open": "cypress open",
    "cy:test": "cypress run"
  },
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.15.14",
    "@mui/lab": "^5.0.0-alpha.169",
    "@mui/material": "^5.15.14",
    "@mui/x-data-grid": "^7.0.0",
    "@mui/x-date-pickers": "^7.0.0",
    "@tanstack/react-query": "^5.51.23",
    "@tanstack/react-router": "^1.109.2",
    "d3-fetch": "^3.0.1",
    "dayjs": "^1.11.10",
    "plotly.js": "^2.30.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-plotly.js": "^2.6.0"
  },
  "devDependencies": {
    "@tanstack/router-devtools": "^1.109.2",
    "@tanstack/router-plugin": "^1.109.2",
    "@types/d3-fetch": "^3.0.7",
    "@types/node": "^20.12.12",
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@types/react-plotly.js": "^2.6.3",
    "@typescript-eslint/eslint-plugin": "^7.2.0",
    "@typescript-eslint/parser": "^7.2.0",
    "@vitejs/plugin-react": "^4.2.1",
    "cypress": "^13.15.0",
    "eslint": "^8.57.0",
    "eslint-config-airbnb-typescript": "^18.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.1",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "gh-pages": "^6.1.1",
    "husky": "^9.1.6",
    "lint-staged": "^15.2.10",
    "prettier": "^3.3.3",
    "typescript": "^5.2.2",
    "vite": "^6.2.1"
  },
  "engines": {
    "node": "^18.18.0 || >=20.0.0"
  }
}



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "types": ["node", "cypress"],

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": [
    "src",
    "strudel.config.ts",
    "cypress",
    "cypress.config.ts",
    "vite.config.ts"
  ],
  "references": [{ "path": "./tsconfig.node.json" }]
}



================================================
FILE: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "strict": true
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: tsr.config.json
================================================
{
  "routeFileIgnorePrefix": "-",
  "routesDirectory": "./src/pages",
  "generatedRouteTree": "./src/routeTree.gen.ts"
}



================================================
FILE: vite.config.ts
================================================
import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';
import { TanStackRouterVite } from '@tanstack/router-plugin/vite';

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  // Load env file based on `mode` in the current working directory.
  // Set the third parameter to '' to load all env regardless of the `VITE_` prefix.
  const env = loadEnv(mode, process.cwd());
  return {
    plugins: [TanStackRouterVite({ autoCodeSplitting: true }), react()],
    base: env.VITE_BASE_URL,
    server: {
      port: 5175,
      strictPort: true,
    },
  };
});



================================================
FILE: .eslintrc.json
================================================
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaVersion": 2020, // Allows for the parsing of modern JS
    "ecmaFeatures": {
      "jsx": true // Allows for the parsing of JSX
    }
  },
  "ignorePatterns": [
    "docs",
    "package-lock.json",
    "package.json",
    "!.stylelintrc.json",
    "*.md",
    "*.css",
    "dist"
  ],
  "extends": ["airbnb-typescript", "plugin:prettier/recommended"],
  "plugins": ["@typescript-eslint", "import", "react", "prettier"],
  "rules": {
    "@typescript-eslint/no-explicit-any": "off", // allow any because template often can't predict users' types
    "@typescript-eslint/no-use-before-define": "off",
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "react/no-danger": "off", // it's self explainatory that no-danger should be used sparingly
    "react/prop-types": "off", // as long as TS strict mode is off this is not required
    "react/jsx-props-no-spreading": "off",
    "react/react-in-jsx-scope": "off",
    "no-console": "error", // no console statements allowed,
    "no-plusplus": "off",
    "prettier/prettier": "off" // don't show prettier errors as it will be fixed when saved anyway
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "env": {
    "node": true,
    "browser": true,
    "amd": true
  }
}



================================================
FILE: .lintstagedrc.json
================================================
{
  "*.{js,jsx,ts,tsx,css,md,mdx}": ["eslint --cache --fix", "prettier --write"]
}



================================================
FILE: .prettierrc.json
================================================
{
  "tabWidth": 2,
  "useTabs": false,
  "printWidth": 80,
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "endOfLine": "lf"
}



================================================
FILE: cypress/e2e/home.cy.ts
================================================
describe('The Home Page', () => {
  it('successfully loads', () => {
    cy.visit('/');
    cy.contains('Home');
  });
});



================================================
FILE: cypress/fixtures/example.json
================================================
{
  "name": "Using fixtures to represent data",
  "email": "hello@cypress.io",
  "body": "Fixtures are a great way to mock data for responses to routes"
}



================================================
FILE: cypress/support/commands.ts
================================================
/// <reference types="cypress" />
// ***********************************************
// This example commands.ts shows you how to
// create various custom commands and overwrite
// existing commands.
//
// For more comprehensive examples of custom
// commands please read more here:
// https://on.cypress.io/custom-commands
// ***********************************************
//
//
// -- This is a parent command --
// Cypress.Commands.add('login', (email, password) => { ... })
//
//
// -- This is a child command --
// Cypress.Commands.add('drag', { prevSubject: 'element'}, (subject, options) => { ... })
//
//
// -- This is a dual command --
// Cypress.Commands.add('dismiss', { prevSubject: 'optional'}, (subject, options) => { ... })
//
//
// -- This will overwrite an existing command --
// Cypress.Commands.overwrite('visit', (originalFn, url, options) => { ... })
//
// declare global {
//   namespace Cypress {
//     interface Chainable {
//       login(email: string, password: string): Chainable<void>
//       drag(subject: string, options?: Partial<TypeOptions>): Chainable<Element>
//       dismiss(subject: string, options?: Partial<TypeOptions>): Chainable<Element>
//       visit(originalFn: CommandOriginalFn, url: string, options: Partial<VisitOptions>): Chainable<Element>
//     }
//   }
// }



================================================
FILE: cypress/support/e2e.ts
================================================
// ***********************************************************
// This example support/e2e.ts is processed and
// loaded automatically before your test files.
//
// This is a great place to put global configuration and
// behavior that modifies Cypress.
//
// You can change the location of this file or turn off
// automatically serving support files with the
// 'supportFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/configuration
// ***********************************************************

// Import commands.js using ES2015 syntax:
import './commands';

// Alternatively you can use CommonJS syntax:
// require('./commands')



================================================
FILE: docs/README.md
================================================
# Website

This website is built using [Docusaurus](https://docusaurus.io/), a modern static website generator.

### Installation

```
$ yarn
```

### Local Development

```
$ yarn start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

### Build

```
$ yarn build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.

### Deployment

Using SSH:

```
$ USE_SSH=true yarn deploy
```

Not using SSH:

```
$ GIT_USER=<Your GitHub username> yarn deploy
```

If you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.



================================================
FILE: docs/babel.config.js
================================================
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};



================================================
FILE: docs/components.json
================================================
{
  "./lib/components/AppLink.tsx": [
    {
      "description": "Link component for in-app links.\nWrapper for the MUI Link component with the \nreact-router Link injected as the component so \nthat in-app links work.",
      "methods": [],
      "displayName": "AppLink",
      "props": {
        "to": {
          "required": true,
          "tsType": {
            "name": "To"
          },
          "description": ""
        }
      },
      "composes": [
        "LinkProps"
      ]
    }
  ],
  "./lib/components/Collapsible.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Collapsible",
      "props": {
        "color": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "label": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "isOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      },
      "composes": [
        "StackProps"
      ]
    }
  ],
  "./lib/components/CheckboxList.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "CheckboxList",
      "props": {
        "options": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "CheckboxOption"
              }
            ],
            "raw": "CheckboxOption[]"
          },
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(values: CheckboxOptionValue[] | null) => any",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "CheckboxOptionValue[] | null",
                    "elements": [
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "union",
                            "raw": "string | number",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              }
                            ]
                          }
                        ],
                        "raw": "CheckboxOptionValue[]"
                      },
                      {
                        "name": "null"
                      }
                    ]
                  },
                  "name": "values"
                }
              ],
              "return": {
                "name": "any"
              }
            }
          },
          "description": ""
        }
      },
      "composes": [
        "Omit"
      ]
    }
  ],
  "./lib/components/FilterGroup.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "FilterGroup",
      "props": {
        "color": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "label": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "isOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "isCollapsible": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      },
      "composes": [
        "StackProps"
      ]
    }
  ],
  "./lib/components/FiltersPanel.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Filters",
      "props": {
        "filters": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "Filter"
              }
            ],
            "raw": "Filter[]"
          },
          "description": ""
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => any",
            "signature": {
              "arguments": [],
              "return": {
                "name": "any"
              }
            }
          },
          "description": ""
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => any",
            "signature": {
              "arguments": [],
              "return": {
                "name": "any"
              }
            }
          },
          "description": ""
        }
      },
      "composes": [
        "StackProps"
      ]
    }
  ],
  "./lib/components/Filters.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Filters",
      "props": {
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => any",
            "signature": {
              "arguments": [],
              "return": {
                "name": "any"
              }
            }
          },
          "description": ""
        }
      },
      "composes": [
        "PaperProps"
      ]
    }
  ],
  "./lib/components/LabelValueTable copy.tsx": [
    {
      "description": "Component for displaying a flat list of label-value pairs\nin a two column table.",
      "methods": [],
      "displayName": "LabelValueTable",
      "props": {
        "rows": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "LabelValuePair"
              }
            ],
            "raw": "LabelValuePair[]"
          },
          "description": ""
        },
        "labelWidth": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "150",
            "computed": false
          }
        }
      },
      "composes": [
        "TableProps"
      ]
    }
  ],
  "./lib/components/FilterField.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "FilterField",
      "props": {
        "label": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "filter": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        },
        "isCollapsible": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      },
      "composes": [
        "StackProps"
      ]
    }
  ],
  "./lib/components/ImageWrapper.tsx": [
    {
      "description": "Generic image wrapper component for sizing images relatively\nbased on container sizes. Provide either a height or width and \nthe image will size to that value and maintain its aspect ratio.",
      "methods": [],
      "displayName": "ImageWrapper",
      "props": {
        "height": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": ""
        },
        "width": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": ""
        }
      },
      "composes": [
        "BoxProps"
      ]
    }
  ],
  "./lib/components/LinearMeter.tsx": [
    {
      "description": "Styled version of the LinearProgress mui component that can be \nused to show one-dimensional data in a horizontal meter.",
      "methods": [],
      "displayName": "LinearMeter"
    }
  ],
  "./lib/components/PageHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "PageHeader",
      "props": {
        "pageTitle": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "breadcrumbTitle": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "actions": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        }
      },
      "composes": [
        "PaperProps"
      ]
    }
  ],
  "./lib/components/TopBar.tsx": [
    {
      "description": "Top navigation bar component",
      "methods": [],
      "displayName": "TopBar"
    }
  ],
  "./lib/components/StrudelSlider.tsx": [
    {
      "description": "Custom wrapper for the MUI Slider component.\nEnables advanced features such as value debounce.",
      "methods": [],
      "displayName": "StrudelSlider",
      "props": {
        "min": {
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "required": false
        },
        "max": {
          "defaultValue": {
            "value": "100",
            "computed": false
          },
          "required": false
        }
      },
      "composes": [
        "SliderProps"
      ]
    }
  ],
  "./lib/components/Test.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Test"
    }
  ],
  "./lib/components/LabelValueTable.tsx": [
    {
      "description": "Component for displaying a flat list of label-value pairs\nin a two column table.",
      "methods": [],
      "displayName": "LabelValueTable",
      "props": {
        "rows": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "LabelValuePair"
              }
            ],
            "raw": "LabelValuePair[]"
          },
          "description": ""
        },
        "labelWidth": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "150",
            "computed": false
          }
        }
      },
      "composes": [
        "TableProps"
      ]
    }
  ]
}


================================================
FILE: docs/docusaurus.config.ts
================================================
import { themes as prismThemes } from "prism-react-renderer";
import type { Config } from "@docusaurus/types";
import type * as Preset from "@docusaurus/preset-classic";

const options: any = {
  // pass in a single string or an array of strings
  src: ["../strudel-demo-app/src/components/**/*.tsx"],
  // parserOptions: {
  //   // pass parserOptions to react-docgen-typescript
  //   // here is a good starting point which filters out all
  //   // types from react
  //   propFilter: (prop, component) => {
  //     if (prop.parent) {
  //       return !prop.parent.fileName.includes('@types/react');
  //     }

  //     return true;
  //   },
  // },
};

const config: Config = {
  title: "STRUDEL Kit",
  tagline: "Create user-centered software for scientific communities",
  favicon: "img/favicon.png",
  url: "https://strudel.science",
  baseUrl: "/strudel-kit/docs/",
  onBrokenLinks: "warn",
  onBrokenMarkdownLinks: "warn",
  i18n: {
    defaultLocale: "en",
    locales: ["en"],
  },
  presets: [
    [
      "classic",
      {
        docs: {
          routeBasePath: "/",
          sidebarPath: "./sidebars.ts",
          editUrl:
            "https://github.com/strudel-science/strudel-kit/tree/main/docs",
        },
        blog: false,
        theme: {
          customCss: "./src/css/custom.css",
        },
      } satisfies Preset.Options,
    ],
  ],
  themeConfig: {
    image: "img/strudel-logo-header.png",
    colorMode: {
      defaultMode: "dark",
    },
    docs: {
      sidebar: {
        autoCollapseCategories: true,
      },
    },
    navbar: {
      title: "STRUDEL Kit",
      logo: {
        alt: "My Site Logo",
        src: "img/strudel-logo-icon.png",
      },
      items: [
        {
          type: "docSidebar",
          sidebarId: "mainSidebar",
          position: "left",
          label: "Documentation",
        },
        {
          href: "https://github.com/strudel-science/strudel-kit",
          label: "GitHub",
          position: "right",
        },
      ],
    },
    footer: {
      style: "dark",
      logo: {
        alt: "STRUDEL Logo",
        src: "img/strudel-logo-header.png",
        href: "https://strudel.science",
        height: 75,
      },
      links: [
        {
          title: "Docs",
          items: [
            {
              label: "Getting Started",
              to: "/",
            },
            {
              label: "Guides",
              to: "/guides/combine-sections",
            },
            {
              label: "Task Flows",
              to: "/task-flows/overview",
            },
            {
              label: "Components",
              to: "/components/overview",
            },
            {
              label: "CLI",
              to: "/cli/reference",
            },
          ],
        },
        {
          title: "Community",
          items: [
            {
              label: "GitHub Discussions",
              href: "https://github.com/orgs/strudel-science/discussions/",
            },
            {
              label: "Join our mailing list",
              href: "mailto:strudel-community+subscribe@lbl.gov",
            },
            {
              label: "Email us",
              href: "mailto:strudel@lbl.gov",
            },
          ],
        },
        {
          title: "More",
          items: [
            {
              label: "Events",
              href: "https://strudel.science/engage/events/",
            },
            {
              label: "Task Flow Designs",
              href: "https://strudel.science/design-system/task-flows/overview/",
            },
          ],
        },
      ],
      copyright: `Copyright © ${new Date().getFullYear()} The Regents of the University of California, through Lawrence Berkeley National Laboratory.`,
    },
    prism: {
      theme: prismThemes.dracula,
      darkTheme: prismThemes.dracula,
    },
    liveCodeBlock: {
      /**
       * The position of the live playground, above or under the editor
       * Possible values: "top" | "bottom"
       */
      playgroundPosition: "top",
    },
    algolia: {
      // The application ID provided by Algolia
      appId: "CFT2374PW2",
      // Public API key: it is safe to commit it
      apiKey: "4a6cd559ed850d61bbe5d942926e97f7",
      indexName: "strudel",
      // Optional: path for search page that enabled by default (`false` to disable it)
      searchPagePath: "search",
    },
  } satisfies Preset.ThemeConfig,
  themes: [
    "@saucelabs/theme-github-codeblock",
    "@docusaurus/theme-live-codeblock",
  ],
  plugins: [["docusaurus-plugin-react-docgen-typescript", options]],
};

export default config;



================================================
FILE: docs/package.json
================================================
{
  "name": "strudel-docs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids",
    "typecheck": "tsc",
    "docgen": "react-docgen",
    "gh-pages": "gh-pages -d build -e docs"
  },
  "dependencies": {
    "@docusaurus/core": "3.2.0",
    "@docusaurus/preset-classic": "3.2.0",
    "@docusaurus/theme-live-codeblock": "^3.2.0",
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@mdx-js/react": "^3.0.0",
    "@mui/icons-material": "^5.15.15",
    "@mui/material": "^5.15.15",
    "@react-docgen/cli": "^2.0.3",
    "@saucelabs/theme-github-codeblock": "^0.2.3",
    "clsx": "^2.0.0",
    "prism-react-renderer": "^2.3.0",
    "raw-loader": "^4.0.2",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "3.2.0",
    "@docusaurus/tsconfig": "3.2.0",
    "@docusaurus/types": "3.2.0",
    "docusaurus-plugin-react-docgen-typescript": "^1.1.0",
    "gh-pages": "^6.1.1",
    "react-docgen-typescript": "^2.2.2",
    "typescript": "~5.2.2"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 3 chrome version",
      "last 3 firefox version",
      "last 5 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0"
  }
}



================================================
FILE: docs/sidebars.ts
================================================
import type { SidebarsConfig } from '@docusaurus/plugin-content-docs';

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const sidebars: SidebarsConfig = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  // tutorialSidebar: [
  //   {
  //     type: 'autogenerated',
  //     dirName: '.'
  //   }
  // ],
  mainSidebar: [
    {
      type: 'category',
      label: 'Learn',
      collapsible: false,
      items: [
        'introduction',
        {
          type: 'category',
          label: 'Getting Started',
          items: [
            'getting-started/installation',
            'getting-started/quickstart',
            'getting-started/project-structure',
          ],
        },
        {
          type: 'category',
          label: 'Customization',
          items: [
            {
              type: 'doc',
              label: 'Connecting Data',
              id: 'customization/connecting-data',
            },
            {
              type: 'doc',
              label: 'Combining Sections',
              id: 'customization/combine-sections',
            },
            {
              type: 'doc',
              label: 'Connecting Task Flows',
              id: 'customization/connect-task-flows-together',
            },
            {
              type: 'doc',
              label: 'Columns',
              id: 'customization/columns',
            },
          ],
        },
        {
          type: 'category',
          label: 'Tutorials',
          items: [
            {
              type: 'category',
              label: 'Building with STRUDEL',
              items: [
                'tutorials/basic-app-with-strudel/introduction',
                'tutorials/basic-app-with-strudel/setup',
                'tutorials/basic-app-with-strudel/configure-taskflow',
                'tutorials/basic-app-with-strudel/customize-taskflow',
                'tutorials/basic-app-with-strudel/customize-app',
                'tutorials/basic-app-with-strudel/customize-home-page',
                'tutorials/basic-app-with-strudel/continue-learning',
              ],
            },
          ],
        },
        {
          type: 'doc',
          label: 'External Resources',
          id: 'external-resources',
        },
      ],
    },
    {
      type: 'category',
      label: 'Reference',
      collapsible: false,
      items: [
        {
          type: 'category',
          label: 'Task Flows',
          items: [
            'task-flows/overview',
            'task-flows/compare-data',
            'task-flows/contribute-data',
            'task-flows/explore-data',
            'task-flows/monitor-activities',
            'task-flows/run-computation',
            'task-flows/search-data-repositories',
          ],
        },
        {
          type: 'category',
          label: 'Components',
          items: [
            'components/overview',
            'components/LabelValueTable',
            'components/LinearMeter',
          ],
        },
      ],
    },
    {
      type: 'category',
      label: 'Examples',
      collapsible: false,
      items: [
        'examples/basic-sandbox',
        'examples/climate-data-analysis-platform',
      ],
    },
  ],
};

export default sidebars;



================================================
FILE: docs/tsconfig.json
================================================
{
  // This file is not used in compilation. It is here just for a nice editor experience.
  "extends": "@docusaurus/tsconfig",
  "compilerOptions": {
    "baseUrl": "."
  }
}



================================================
FILE: docs/blog/2019-05-28-first-blog-post.md
================================================
---
slug: first-blog-post
title: First Blog Post
authors:
  name: Gao Wei
  title: Docusaurus Core Team
  url: https://github.com/wgao19
  image_url: https://github.com/wgao19.png
tags: [hola, docusaurus]
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet



================================================
FILE: docs/blog/2019-05-29-long-blog-post.md
================================================
---
slug: long-blog-post
title: Long Blog Post
authors: endi
tags: [hello, docusaurus]
---

This is the summary of a very long blog post,

Use a `<!--` `truncate` `-->` comment to limit blog post size in the list view.

<!--truncate-->

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet



================================================
FILE: docs/blog/2021-08-01-mdx-blog-post.mdx
================================================
---
slug: mdx-blog-post
title: MDX Blog Post
authors: [slorber]
tags: [docusaurus]
---

Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).

:::tip

Use the power of React to create interactive blog posts.

```js
<button onClick={() => alert('button clicked!')}>Click me!</button>
```

<button onClick={() => alert('button clicked!')}>Click me!</button>

:::



================================================
FILE: docs/blog/authors.yml
================================================
endi:
  name: Endilie Yacop Sucipto
  title: Maintainer of Docusaurus
  url: https://github.com/endiliey
  image_url: https://github.com/endiliey.png

yangshun:
  name: Yangshun Tay
  title: Front End Engineer @ Facebook
  url: https://github.com/yangshun
  image_url: https://github.com/yangshun.png

slorber:
  name: Sébastien Lorber
  title: Docusaurus maintainer
  url: https://sebastienlorber.com
  image_url: https://github.com/slorber.png



================================================
FILE: docs/blog/2021-08-26-welcome/index.md
================================================
---
slug: welcome
title: Welcome
authors: [slorber, yangshun]
tags: [facebook, hello, docusaurus]
---

[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).

Simply add Markdown files (or folders) to the `blog` directory.

Regular blog authors can be added to `authors.yml`.

The blog post date can be extracted from filenames, such as:

- `2019-05-30-welcome.md`
- `2019-05-30-welcome/index.md`

A blog post folder can be convenient to co-locate blog post images:

![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)

The blog supports tags as well!

**And if you don't want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config.



================================================
FILE: docs/docs/external-resources.md
================================================
# External Resources

STRUDEL Kit's templates are built using a whole ecosystem of tools for building usable and complex web UIs. Below is a list of external resources to help you leverage and build on top of the templates in STRUDEL Kit.

### React and Web Development

- [Learn React: Describing the UI](https://react.dev/learn/describing-the-ui)
  - Learn the basics of React from the very beginning with their first-party examples.
- [Beginner's Guide to React](https://egghead.io/courses/the-beginner-s-guide-to-react)
  - Go through an end-to-end tutorial to learn the fundamentals of React.
- [Get Started with TypeScript](https://www.typescriptlang.org/docs/)
  - Learn TypeScript using catered tutorials adapted to different programming backgrounds.
- [React Query (TanStack Query)](https://tanstack.com/query/latest/docs/framework/react/overview)
  - Read the documentation for the query library used by STRUDEL Kit and many other React apps.
- [Getting Started with CSS](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Getting_started)
  - Get started with CSS (Cascading Stylesheets), the fundamental way to style web pages.

### Material UI

- [Getting Started with Material UI](https://mui.com/material-ui/getting-started/)
  - Learn how to install and use Material UI from the ground up.
- [MUI Components](https://mui.com/material-ui/all-components/)
  - See the documentation for all the MUI components.
- [Theming in MUI](https://mui.com/material-ui/customization/theming/)
  - Learn how theming works in MUI apps and how to leverage all of the different options.
- [MUI X Data Grid](https://mui.com/x/react-data-grid/)
  - See the documentation for the MUI `DataGrid` component.
- [A Quick Start into Material UI](https://dev.to/janvierjr/a-quick-start-into-material-ui-30ba)
  - Go through a beginner-friendly tutorial on how to use Material UI (MUI).

### Data Visualization

- [Plotly.js Examples](https://www.w3schools.com/js/js_graphics_plotly.asp)
  - See examples for how to generate many different kinds of charts using Plotly.js.
- [Plotly in React](https://plotly.com/javascript/react/)
  - Learn how to use the react-plotly library to incorporate Plotly.js into React.



================================================
FILE: docs/docs/introduction.mdx
================================================
---
title: 'Introduction'
slug: /
---

import { Grid } from '@mui/material';
import { LinkCard } from '@site/src/components/LinkCard';

<head>
  <meta name="algolia-site-verification" content="16A9CD3EED0F32F0" />
</head>

# STRUDEL Kit

Welcome to the STRUDEL Kit Docs! STRUDEL Kit is a web development toolkit for building scientific UIs based on the [STRUDEL Design System and Task Flows](https://strudel.science/design-system/overview/). The toolkit helps users build out scientific Task Flows as usable web applications. It consists of a full React-based starter template with a suite of inner demos for common UI patterns in scientific apps. Apps built with STRUDEL are pre-baked with much of the setup you need to turn complex Task Flows into efficient and highly usable experiences for your users.

Visit [strudel.science](https://strudel.science) for more information about the STRUDEL project.

### Key Features

- Base scaffolding for a modern, modular React web application project
- Fully customizable templates for common Task Flows in scientific software
- Consistent user experience
- Automated file-based routing with TanStack Router

## How does it work?

STRUDEL Kit brings together multiple open source tools as well as its own set of templates and lightweight components to offer a cohesive system in which someone can quickly jump in and start developing a modern, usable scientific web app. There are two main pieces to web applications built with STRUDEL Kit: the base app and the Task Flow templates.

The **base app** provides the basic scaffolding you need to get started building a web app. It consists of a preconfigured architecture of open source tools and custom components. Here's what's included:

<Grid container columnSpacing={2} rowSpacing={2} marginBottom={2}>
  <Grid item sm={4}>
    <LinkCard
      href="https://react.dev/"
      image={<img src="img/react.png" />}
      label="React"
      description="Component-based web UI library"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="https://www.typescriptlang.org/"
      image={<img src="img/typescript.svg" />}
      label="TypeScript"
      description="JavaScript with syntax for types"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="https://vitejs.dev/"
      image={<img src="img/vite.png" />}
      label="Vite"
      description="Modern frontend build tool"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="https://tanstack.com/router/latest"
      image={<img src="img/tanstack.png" />}
      label="TanStack Router"
      description="Automated file-based routing library"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="#"
      image={<img src="img/strudel-logo-icon.png" />}
      label="STRUDEL Components"
      description="Custom first-party components"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="https://mui.com/"
      image={<img src="img/material-ui.png" />}
      label="Material UI"
      description="Low-level component library"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="https://plotly.com/javascript/"
      image={<img src="img/plotly.png" />}
      label="Plotly.js"
      description="Declarative data visualization library"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="https://react.dev/reference/react/useContext"
      label="React Context API"
      description="React's first-party state management"
    />
  </Grid>
</Grid>

The **Task Flow templates** are pre-built flows of React components for common patterns in scientific UIs. The template components are configured to plug right into the base app but you can also plug them into existing React apps with a little bit of restructuring.

Once you have generated your base app and the inner Task Flows, you have full reign to customize the app. STRUDEL Kit is a great way to get your app started but in most cases you will have project-specific customizations and requirements. For this reason, STRUDEL Kit does not lock you into any particular tool and gives you full freedom to edit the templates as you see fit. You can add in new libraries, replace ones that came with the Kit, or just keep building within the system you set up with STRUDEL Kit.

## Motivation

There are many tools out there to help make building web applications easier for developers and better for end users but few tools target the unique needs of scientific software UIs. STRUDEL aims to be a go-to resource for Research Scientists and Research Software Engineers who want to build tools that offer a great user experience that can help advance their research goals.

Instead of reinventing the wheel from the ground up, STRUDEL Kit leverages existing open source tools and tries to fill in the gaps when it comes to building scientific web applications. We think that implementing a good task flow in a UI is vital to a good user experience. STRUDEL focuses on high level flows and components to help make good user experience more accessible to the scientific software community.

## Who should use STRUDEL Kit?

STRUDEL Kit aims to be a useful tool for experts in frontend engineering and an approachable batteries-included tool for engineers and computational scientists who have only some experience with web development. Understanding JavaScript, TypeScript, and React are important for being able to customize the apps you build with STRUDEL Kit. However, STRUDEL Kit also offers tutorials that teach you how to make basic changes to the inner React code and don't assume you are an expert.

Before getting started, we recommend having some familiarity with the command line, JavaScript, and React. Check out our [curated list of resources](#) for getting started with some of STRUDEL Kit's foundational technologies.

## Next Steps

<Grid container columnSpacing={2} rowSpacing={2} marginBottom={2}>
  <Grid item sm={4}>
    <LinkCard
      href="/strudel-kit/docs/getting-started/installation"
      target="_self"
      label="Installation"
      description="Install everything you need to get started"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="/strudel-kit/docs/getting-started/first-steps"
      target="_self"
      label="First Steps"
      description="Learn the basics with some guidance"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/introduction"
      target="_self"
      label="Tutorial"
      description="A full tutorial on building with STRUDEL"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="/strudel-kit/docs/getting-started/quickstart"
      target="_self"
      label="Quickstart"
      description="Jump straight into the code"
    />
  </Grid>
</Grid>



================================================
FILE: docs/docs/cli/overview.md
================================================
# Command-Line Interface - Overview

The strudel-cli is a command-line tool for bootstrapping web applications based on the [STRUDEL Design System](https://strudel.science/). 

:warning: ***This library is in early-stage development. Check back soon for more updates!***

#### How it Works

1. Configure your app with a simple JSON configuration.
2. Generate a base web app built with the STRUDEL stack and STRUDEL design system.
3. Add task flows to your app using the [STRUDEL task flow templates](https://strudel.science/design-system/task-flows/overview/).
4. Dive into the code and start customizing. After generating your app you are in full control.

#### The Stack

The strudel-cli generates your app using a pre-defined stack based on principles from the STRUDEL Design System.

- [TypeScript](https://www.typescriptlang.org/)
- [React](https://react.dev/)
- [Material UI](https://mui.com/material-ui/getting-started/)
- [React Router](https://reactrouter.com/en/main)
- [Create React App](https://create-react-app.dev/)

## User Quickstart

### Prequisites

Node.js and NPM must be installed to run the web applications you generate with strudel-cli. To check if you already have Node.js and NPM installed, open a terminal and run:

```
node --version
npm --version
```

If both commands return a version number, you should be good to go. If not, you can download both tools together here: https://nodejs.org/en/download

### Get Started

Install the STRUDEL CLI tool:

```
pip install strudel-cli
```

Create a config file based on the [create-app config json](https://github.com/strudel-science/strudel-kit/blob/main/strudel-cli/CONFIGS.md#create-app-config-file):

_my-app-config.json_
```js
{
  "name": "my-strudel-app",
  "appTitle": "My Science App"
}
```

Create a base app:

```
strudel create-app --config my-app-config.json
```

Create a config file for a new task flow based on [one of the config examples](https://github.com/strudel-science/strudel-kit/blob/main/strudel-cli/CONFIGS.md#compare-data):

_my-taskflow-config.json_
```js
{
  "name": "my-taskflow",
  "template": "compare-data",
  "compareItem": "scenario",
  "compareItemPlural": "scenarios",
  "mainPageTitle": "Compare Data App",
  "mainPageDescription": "Description of this app section",
  "newItemPageTitle": "Compare Data App",
  "newItemPageDescription": "Description of this app section",
  "comparePageDescription": "Description of this app section"
}
```

Go to the root directory of your new app:

```
cd my-app
```

Add the task flow to your app:

```
strudel add-taskflow --config ../my-taskflow-config.json
```

Install dependencies and start your app.

```
npm install
npm start
```

Open [http://localhost:3000](http://localhost:3000) to view the app in the browser.

Didn't work? Make sure you have [installed NPM and Node.JS](https://nodejs.org/en/download).

## Developer Quickstart

### Install

Clone the strudel-kit repo:

```
git clone git@github.com:strudel-science/strudel-kit.git
```

Navigate to the strudel-cli package of the strudel-kit repo:

```
cd strudel-kit/strudel-cli
```

(Recommended) Create a new conda environment or venv with python 3.9.6+ and activate it:

```
conda create strudel-env python=3.9
conda activate strudel-env
```

Install the package in editable mode:

```
pip install -e .
```

Run the strudel commands:

```
strudel create-app <app-name> [OPTIONS]
```

### Testing

From the strudel-cli directory, run:

```
pytest
```

All the tests live in `strudel-cli/tests`

### Publishing

#### 1. Authenticate with PyPi

In order to publish, you will have to authenticate with pypi and your account must have permission to administer the strudel-cli package on pypi.

#### 2. Build a distrubtable package

```
rm -rf dist/* && python -m build
```

This will generate `.whl` and `.tar.gz` files in the `dist/` folder.

#### 3. Upload to (Test)PyPi

```
python -m twine upload --repository pypi dist/*
```


================================================
FILE: docs/docs/cli/reference.md
================================================
# `strudel`

The strudel-cli allows you to bootstrap apps and Task Flow templates based on the STRUDEL Design System. 

Get started using the base command `strudel`.

**Usage**:

```console
$ strudel [OPTIONS] COMMAND [ARGS]...
```

**Options**:

* `-v, --version`
* `--install-completion`: Install completion for the current shell.
* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.
* `--help`: Show this message and exit.

**Commands**:

* `add-taskflow`: Add a new task flow section to an existing...
* `create-app`: Create a base strudel web application.

## `strudel add-taskflow`

Add a new task flow section to an existing strudel web application.

**Usage**:

```console
$ strudel add-taskflow [OPTIONS] [NAME]
```

**Arguments**:

* `[NAME]`: The name of your task flow module. It's best to use only letters, hyphens, and underscores.

**Options**:

* `-t, --template [compare-data|contribute-data|explore-data|monitor-activities|run-computation|search-data-repositories]`: Name of the strudel task flow template to use as the basis for your task flow.
* `-c, --config TEXT`: JSON file with configuration values to use to build your task flow.
* `-o, --output-dir TEXT`: Directory where the task flow module should be created.  [default: src/app]
* `-b, --branch TEXT`: Branch in strudel-kit repo that should be used for the templates. This option is primarily for use by contributors.  [default: main]
* `--help`: Show this message and exit.

## `strudel create-app`

Create a base strudel web application.

**Usage**:

```console
$ strudel create-app [OPTIONS] [NAME]
```

**Arguments**:

* `[NAME]`: The name of your app. It's best to use only letters, hyphens, and underscores.

**Options**:

* `-c, --config TEXT`: JSON file with configuration values to use to build your app.
* `-o, --output-dir TEXT`: Directory where the app should be created. Defaults to current directory.
* `-b, --branch TEXT`: Branch in strudel-kit repo that should be used for the templates. This option is primarily for use by contributors.  [default: main]
* `-v, --verbose`: [default: 0]
* `--help`: Show this message and exit.



================================================
FILE: docs/docs/components/LabelValueTable.mdx
================================================
import componentsJson from '@site/components.json';
import { PropsTable } from "@site/src/components/PropsTable"
// import { LabelValueTable } from 'strudel-components'

{componentsJson[`./lib/components/${metadata.title}.tsx`][0]['description']}
<br />

## Import

```jsx
import { LabelValueTable } from 'strudel-components'
```

## Basic Usage

Coming soon!

{/* ```jsx live
<LabelValueTable 
  rows={[
    {
      label: 'Test',
      value: 17
    },
    {
      label: 'Test B',
      value: 29
    }
  ]}
/>
``` */}

## Props

<PropsTable 
  propsData={componentsJson[`./lib/components/${metadata.title}.tsx`][0]['props']} 
/>


================================================
FILE: docs/docs/components/LinearMeter.mdx
================================================
import componentsJson from '@site/components.json';
import { PropsTable } from "@site/src/components/PropsTable"
// import { LinearMeter } from 'strudel-components'

{componentsJson[`./lib/components/${metadata.title}.tsx`][0]['description']}
<br />

## Import

```jsx
import { LinearMeter } from 'strudel-components'
```

## Basic Usage

Coming soon!

{/* ```jsx live
<LinearMeter />
``` */}

## Props

<PropsTable 
  propsData={componentsJson[`./lib/components/${metadata.title}.tsx`][0]['props'] || {}} 
/>


================================================
FILE: docs/docs/components/overview.mdx
================================================
---
title: 'Overview'
---

# Components (coming soon!)

Currently all of the custom components in strudel-kit are included in the base template in `src/components`. We are working to release these components as an independent package so they can be implemented into existing React apps. Check back soon for more details and documentation!

If you have ideas for components or are interested in contributing, let us know by posting in the [GitHub Discussions](https://github.com/orgs/strudel-science/discussions/) page.







================================================
FILE: docs/docs/customization/columns.md
================================================
---
title: 'Columns'
---

Columns can be defined in an array that follows the [MUI column definition syntax](https://mui.com/x/react-data-grid/column-definition/).

```ts
const columns: GridColDef[] = [
  {
    field: 'title',
    headerName: 'Dataset Title',
    width: 200,
  },
  {
    field: 'category',
    headerName: 'Category',
    width: 200,
  },
  {
    field: 'summary',
    headerName: 'Summary',
    width: 200,
  },
  {
    field: 'doi',
    headerName: 'DOI',
    width: 200,
  },
];
```

For the Compare Data Task Flow, there is also an additional column, `isComparisonMetric` which is used to denote which columns should be displayed on the comparison page.

```ts
// CUSTOMIZE: the columns for the main data table
const columns = [
  {
    field: 'name',
    headerName: 'Scenario Name',
    width: 200,
  },
  {
    field: 'acetic_acid_concentration',
    headerName: 'Acetic Acid Concentration',
    width: 200,
    isComparisonMetric: true,
  },
];
```



================================================
FILE: docs/docs/customization/combine-sections.md
================================================
---
title: 'Combining Sections'
---

## How to Combine Sections from Different Task Flows

When using STRUDEL Kit it's common to want to take a section from one Task Flow and copy it into a different one. Doing so requires you to copy the desired components and elements from one Task Flow file into another file in the desired destination. The number of steps involved depends on the particular components but this guide will show you a simple use-case to get you started.

In this example, you will copy the charts and table from the Results page in the Run Computation Task Flow into the Comparison page of the Compare Data Task Flow.

### 1. Add both Task Flows to your app

If you haven't already, add both the Run Computation and Compare Data Task Flows into your app:

```
cd src/pages
npx degit strudel-science/strudel-kit/src/pages/run-computation first-taskflow
npx degit strudel-science/strudel-kit/src/pages/compare-data second-taskflow
```

### 2. Locate the file with the desired components

The table and charts live in `_layout/$id/_layout/results.tsx` inside the Task Flow folder that uses the Run Computation template. In this example that directory would be named `first-taskflow`.

### 3. Copy the components

Scan the components and elements in the final `return` statement for the component. There you will find a `<Grid>` component that contains two `<Plot>` components and one `<DataGrid>` component. Copy the whole `<Grid>` component from `<Grid>` to `</Grid>`. Make sure to always include the closing section of components when you copy them. This will look like `</Component>` for component that have inner children and `/>` for components that don't.

```jsx title="results.tsx"
<Grid container spacing={4}>
  <Grid item sm={6}>
    <Paper>
      <Plot data={state.results.lineChart.data} layout={{}} />
    </Paper>
  </Grid>
  <Grid item sm={6}>
    <Paper>
      <Plot data={state.results.barChart.data} layout={{}} />
    </Paper>
  </Grid>
  <Grid item xs={12}>
    <Paper>
      <DataGrid
        rows={state.results.table.data}
        getRowId={(row) => row[state.results.table.dataIdField]}
        columns={state.results.table.columns}
        disableColumnSelector
        disableRowSelectionOnClick
      />
    </Paper>
  </Grid>
</Grid>
```

### 4. Locate the destination file

The comparison page of the Compare Data Task Flow lives in `_layout/compare.tsx`. In this example its parent directory would be named `second-taskflow`. Open this file. This is where we want to paste our new components.

### 5. Paste the components

Let's say you want to put these new components underneath the comparison data table but you want them to fill the same width (i.e. you want them to be in the same container). You will find the `<DataGrid>` component towards the bottom of the file. Paste the new components directly underneath the `<Paper>` component that wraps around the `<DataGrid>` but keep them inside of the `<Container>` component:

```jsx title="compare.tsx"
<Container
  maxWidth="xl"
  sx={{
    marginTop: 3,
    marginBottom: 3,
  }}
>
  <Paper
    sx={{
      '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {
        borderRight: '1px solid',
        borderRightColor: 'neutral.main',
      },
      '& .compare-data--metric': {
        fontWeight: 'bold',
      },
    }}
  >
    {state.comparing && (
      <DataGrid
        rows={state.comparisonData}
        getRowId={(row) => row.metric}
        columns={state.comparisonColumns}
        disableRowSelectionOnClick
        disableDensitySelector
        disableColumnFilter
      />
    )}
  </Paper>
  <Grid container spacing={4}>
    <Grid item sm={6}>
      <Paper>
        <Plot data={state.results.lineChart.data} layout={{}} />
      </Paper>
    </Grid>
    <Grid item sm={6}>
      <Paper>
        <Plot data={state.results.barChart.data} layout={{}} />
      </Paper>
    </Grid>
    <Grid item xs={12}>
      <Paper>
        <DataGrid
          rows={state.results.table.data}
          getRowId={(row) => row[state.results.table.dataIdField]}
          columns={state.results.table.columns}
          disableColumnSelector
          disableRowSelectionOnClick
        />
      </Paper>
    </Grid>
  </Grid>
</Container>
```

Let's also make a small change to the top-most `<Grid>` component by adding some margin to the top:

```jsx title="compare.tsx"
<Grid container spacing={4} marginTop={1}>
```

### 6. Update the imports

Because we added new components to the `compare.tsx` file, we need to import the ones that aren't already imported:

```js title="compare.tsx"
import {
  Box,
  Button,
  Container,
  Grid,
  Link,
  Paper,
  Stack,
} from '@mui/material';
import Plot from 'react-plotly.js';
```

Almost there. Now we just need to add source data to the new table, line chart, and bar chart.

### 7. Connect new data sources

In a real app, the data for these components would likely come from an API or external file but in this example we are going to place the data directly in the component. See the [Connecting Data](https://strudel.science/strudel-kit/docs/guides/connecting-data) guide for more information about connecting data sources.

Here is the line chart component with some example data plugged in:

```js title="compare.tsx"
<Plot
  data={[
    {
      x: [1, 2, 3, 4],
      y: [10, 15, 13, 17],
      type: 'scatter',
    },
    {
      x: [1, 2, 3, 4],
      y: [16, 5, 11, 9],
      type: 'scatter',
    },
    {
      x: [1, 2, 3, 4],
      y: [21, 17, 4, 10],
      type: 'scatter',
    },
  ]}
  layout={{}}
/>
```

And here is bar chart component with some example data plugged in:

```js title="compare.tsx"
<Plot
  data={[
    {
      x: ['Tulip', 'Orchid', 'Sunflower'],
      y: [20, 14, 23],
      type: 'bar',
    },
  ]}
  layout={{}}
/>
```

And finally, populate the `rows` prop and the `columns` prop of the `<DataGrid>` component with some example values like below:

```js title="compare.tsx"
<DataGrid
  rows={[
    {
      sample_id: 0,
      type: 'tulip',
      latitude: 37.8715,
      longitude: -122.2727,
      'elevation (m)': 52,
      notes: 'healthy growth',
    },
    {
      sample_id: 1,
      type: 'tulip',
      latitude: 38.2341,
      longitude: -121.4875,
      'elevation (m)': 52,
      notes: 'healthy growth',
    },
    {
      sample_id: 2,
      type: 'sunflower',
      latitude: 37.2338,
      longitude: -121.4899,
      'elevation (m)': 52,
      notes: 'unhealthy coloration',
    },
    {
      sample_id: 3,
      type: 'orchid',
      latitude: 37.8758,
      longitude: -122.2732,
      'elevation (m)': 52,
      notes: 'healthy growth',
    },
    {
      sample_id: 4,
      type: 'orchid',
      latitude: 37.8715,
      longitude: -122.2727,
      'elevation (m)': 52,
      notes: 'fungal infection',
    },
  ]}
  getRowId={(row) => row['sample_id']}
  columns={[
    {
      field: 'sample_id',
    },
    {
      field: 'type',
    },
    {
      field: 'latitude',
      type: 'number',
    },
    {
      field: 'longitude',
      type: 'number',
    },
    {
      field: 'elevation (m)',
      type: 'number',
    },
    {
      field: 'notes',
    },
  ]}
  disableColumnSelector
  disableRowSelectionOnClick
/>
```



================================================
FILE: docs/docs/customization/connect-task-flows-together.md
================================================
---
title: 'Connecting Task Flows'
---

## How to Connect Task Flows Together

Task Flows don't always exist in isolation inside apps. Instead, Task Flows often fit together in various ways. In this article you will learn how to connect steps from two different task flows into a larger flow.

In this example, you will connect an Explore Data Task Flow with a Run Computation Task Flow. For this new app, you want to have an explorer page like the one in Explore Data but you also want to be able to run different computations based on a selected row from the explorer.

### 1. Add both Task Flows to your app

If you haven't already, add both the Explore Data and Run Computation Task Flows into your app:

```
cd src/pages
npx degit strudel-science/strudel-kit/src/pages/explore-data explore
npx degit strudel-science/strudel-kit/src/pages/run-computation compute
```

### 2. Plan the page flow

First, you need to determine how the user should flow through the pages of the two apps. Where will a user go from one Task Flow to another? Are there any pages you should skip or eliminate? In this example, you want users to be able to click on a row and run a compuation for that row by clicking a new button in the `<PreviewPanel>` of the `<DataExplorer>`. Then you want users to be able to enter in some parameters, initiate the computation, and see some results.

### 3. Add direct links between pages from two Task Flows.

For this flow, you want users to go from the `<PreviewPanel>` in the Explore Data Task Flow to the `<Settings>` page in the Run Computation Task Flow. The first thing you need to do is create a new button link in the `<PreviewPanel>` that links to the `<Settings>` page. Open up `PreviewPanel.tsx` inside the `_components` folder of the explore page and add a new link and button right next to the "View Details" button:

```jsx title="PreviewPanel.tsx"
<AppLink to="/compute/scenario/settings">
  <Button variant="contained">Analyze</Button>
</AppLink>
```

In the `to` prop, you will notice that we are linking to the route of the settings page. Now, clicking this button will take us directly to that step. This is the most straightforward way to connect two Task Flows with STRUDEL Kit.

To add a link back to the explore page from the settings page, open up `compute/_layout/$id/_layout.tsx` in the compute Task Flow folder, delete the whole `<Breadcrumbs>...</Breadcrumbs>` component, and replace it with a link button:

```jsx title="_layout.tsx"
<AppLink to="/explore">
  <Button variant="contained">Back to Explorer</Button>
</AppLink>
```

## Optional Steps

### Remove unused pages and elements

If you do not need to keep the original Run Computation Task Flow intact, then you can safely delete the unused pages/components from the file system.

In this example, you are no longer using the `data-inputs.tsx` page or the `index.tsx` page in the compute Task Flow directory. At this point you can safely delete those two files.

You should also delete the "Data Inputs" step from the `<Stepper>` component in `settings.tsx`, `running.tsx`, and `results.tsx` which all live in `compute/_layout/$id/_layout`:

```jsx
// Remove this code from `settings.tsx`, `running.tsx`, and `results.tsx`
<Step key={taskflow.pages.dataInputs.title}>
  <StepLabel>
    <AppLink
      to="/run-computation/$id/data-inputs"
      params={{ id: 'new' }}
      sx={{ color: 'inherit', textDecoration: 'none' }}
    >
      Data Inputs
    </AppLink>
  </StepLabel>
</Step>
```

## Limitations and Next Steps

These instructions have helped you connect the user interfaces of two different Task Flows but they did not cover how to connect the _data_ between two Task Flows. This is absolutely possible and necessary but requires more knowledge of the React state. If you would like help passing data between app sections and loading data dynamically based on URL parameters, check out the Kent C. Dodds' article on [Application State Management in React](https://kentcdodds.com/blog/application-state-management-with-react).



================================================
FILE: docs/docs/customization/connecting-data.md
================================================
---
title: 'Connecting Data'
---

## Configuring Data Sources

Each Task Flow has at least one set of data that is incorporated into the flow’s UI. These data sources are pulled in through custom React hooks that fetch data from external files. For example, here is how a data source is pulled in for the Monitor Activities Task Flow:

```js title="monitor-activities/index.tsx"
const experiments = useDataFromSource('dummy-data/experiments.json');
```

The `useDataFromSource` hook fetches data from an external JSON, CSV, or TSV file. If supplied a local path (instead of a full URL), this hook will look for data in the `public/` directory. If you want to add your own data file, you can drop it in the `public/data/` folder and change the source in the hook:

```js
const experiments = useDataFromSource('data/my_data.json');
```

If the source value is a URL, that means the dataset is accessed online or through an API.

```js
const experiments = useDataFromSource(
  'https://pokeapi.co/api/v2/pokemon-species/'
);
```

If this is the case, it’s expected that your data are returned in JSON format. Accessing data through an API that requires an API key currently requires editing the `fetchData` utility method to include the key in the fetch options. Better support for authenticated APIs may come at a later date.

## What should my data look like?

The expected shape of your data depends on where it is being used in the Task Flow. For example, if your data is populating a table, it should be a flat list of tabular data in JSON, CSV, or TSV format. If your data is populating a chart, such as in the Run Computation Task Flow, your data will need to be shaped according to the chart type and [PlotlyJS specs](https://plotly.com/javascript/reference/index/). You can see examples for each out-of-the-box data shape inside the `public/dummy-data` folder.

In some cases, such as in the Search Data Repositories Task Flow, it is expected out-of-the-box that your data has certain fields in it to render certain properties and their values in the UI. You can change which properties are rendered in the UI by changing the values in the templates themselves. For example, the detail page of Search Data Repositories (`search-data-repositories/$id.tsx`) expects there to be a property called “citation” to render inside the top panel.

```jsx title="[id].tsx"
<Box flex={1}>
  <Typography variant="h6" component="h2" mb={1}>
    Citation
  </Typography>
  <Typography>{data.citation}</Typography>
</Box>
```

You can change the property being pulled by changing text after “`data.`”. For example, if the property was named “citation_custom” it would look like this:

```jsx title="[id].tsx"
<Box flex={1}>
  <Typography variant="h6" component="h2" mb={1}>
    Citation
  </Typography>
  <Typography>{data.citation_custom}</Typography>
</Box>
```

## Adding an additional data source

Sometimes you may want to add an additional piece of data to your Task Flow that isn’t already part of the configuration. Maybe you are adding another table or chart to the UI, or perhaps you are pulling in a dynamic title value. To do this, you will need to add a new data fetching hook to the part of the template that you want the data. For example, if you want to fetch a new set of data in the PreviewPanel of the Explore Data Task Flow, you can add a new instance of the `useDataFromSource` hook in `-components/PreviewPanel.tsx`.

```ts title="PreviewPanel.tsx"
export const PreviewPanel: React.FC<PreviewPanelProps> = ({
  previewItem,
  onClose,
}) => {
  const newTableData = useDataFromSource('data/my_new_data.csv')
  ...
```

In addition to the data fetching hooks included in the library, you are free to fetch data inside of any component using any method supported by JavaScript. Under the hood, these templates use the [react-query](https://tanstack.com/query/latest/docs/framework/react/overview) library and their [useQuery](https://tanstack.com/query/latest/docs/framework/react/guides/queries) hook. You may find it useful to use this library directly inside a template. Additionally, you could use the native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) to get your data.



================================================
FILE: docs/docs/examples/basic-sandbox.mdx
================================================
# Basic Starter Kit

<iframe
  width="100%"
  height="800"
  src="https://stackblitz.com/github/strudel-science/strudel-kit?embed=1&file=src%2Fpages%2Findex.tsx"
></iframe>



================================================
FILE: docs/docs/examples/climate-data-analysis-platform.mdx
================================================
# Climate Data Analysis Platform

<iframe
  width="100%"
  height="800"
  src="https://stackblitz.com/github/sprblm/strudel-climate-example?embed=1&file=src%2Fpages%2Findex.tsx"
></iframe>



================================================
FILE: docs/docs/getting-started/installation.md
================================================
---
title: 'Installation'
---

## Prerequisites

STRUDEL Kit requires Node.js with npm to run the web applications you build. If you don't already have these tools on your system, use the link below to install them:

- [Node.js 18+ with npm and npx](https://nodejs.org/en/download)

**Mac and Linux Users**: It is recommended to use nvm to install node, npm, and npx.

**Windows Users**: You have two recommended options for installing node and npm. If you use Powershell, the recommended way is to install using fnm. If you do not use Powershell, the recommended way is to download and run the Windows Installer from the nodejs download page. After running the installer, you will need to either completely reboot your terminal application or run `SET PATH=C:\Program Files\nodejs;%PATH%` in order to use the node and npm commands on the command line.

## Option 1 (recommended): Clone strudel-kit with degit

```
npx degit strudel-science/strudel-kit my-app
```

This will clone the whole strudel-kit repository into a directory called `my-app`. By using `degit` instead of `git clone` you get all the files without any of the git history from the main strudel-kit repository. Note that you will have to connect this to your own remote repository.

## Option 2: Use the strudel-kit template on GitHub

Navigate to the [strudel-kit repository GitHub page](https://github.com/strudel-science/strudel-kit/tree/main), click the green "Use this template" button, then click "Create a new repository." Follow the instructions on the screen to create a new repository on GitHub. This will create a brand new repository that contains all of the files in strudel-kit but does not include any of the git history.

## Option 3: Fork strudel-kit on GitHub

This option makes the most sense for people that want to contribute work back into the main strudel-kit repository. Navigate to the [strudel-kit repository GitHub page](https://github.com/strudel-science/strudel-kit/tree/main), then click the grey "Fork" button. Follow the instructions on the screen to create your own fork of strudel-kit.



================================================
FILE: docs/docs/getting-started/project-structure.mdx
================================================
[Binary file]


================================================
FILE: docs/docs/getting-started/quickstart.mdx
================================================
---
title: 'Quickstart'
---

import { Grid } from '@mui/material';
import { LinkCard } from '@site/src/components/LinkCard';

Download the strudel-kit code:

```bash
npx degit strudel-science/strudel-kit my-app
```

This will generate a base web application with all of the Task Flow templates in a new directory called `my-app`. The name `my-app` can be replaced with any name you like. It's typical to use all lowercase kebab-case for project names.

Go into the new directory:

```bash
cd my-app
```

Install the app dependencies:

```bash
npm install
```

Start up your app locally:

```bash
npm start
```

Open your app in the browser at http://localhost:5175

Customize Task Flow templates in `src/pages`.

## Learn more

<Grid container columnSpacing={2} rowSpacing={2} marginBottom={2}>
  <Grid item sm={4}>
    <LinkCard
      href="/strudel-kit/docs/getting-started/first-steps"
      target="_self"
      label="First Steps"
      description="Learn the basics with some guidance"
    />
  </Grid>
  <Grid item sm={4}>
    <LinkCard
      href="/strudel-kit/docs/task-flows/overview"
      target="_self"
      label="Task Flows"
      description="Learn how to customize Task Flows"
    />
  </Grid>
</Grid>



================================================
FILE: docs/docs/task-flows/compare-data.mdx
================================================
---
title: 'Compare Data'
---

import Divider from '@mui/material/Divider';
import { CodeAndPreviewButtons } from '@site/src/components/CodeAndPreviewButtons';

# Compare Data

## Links

- [Description and guidelines](https://strudel.science/design-system/task-flows/compare-data/)
- [Live example](https://strudel.science/strudel-kit/#/compare-data)
- [Source code](https://github.com/strudel-science/strudel-kit/tree/main/strudel-taskflows/src/pages/compare-data)

## Generate this Task Flow

```
cd src/pages
npx degit strudel-science/strudel-kit/src/pages/compare-data my-compare-data
```

## File Structure

```py
compare-data
├── -context
│  ├── ContextProvider.tsx # State management for this Task Flow
│  └── actions.ts # Action functions that control the state
├── -tests
│  └── compare-data.cy.ts # End-to-end test for this Task Flow
├── _layout
│  ├── compare.tsx # Compare data page
│  ├── index.tsx # Initial list view page
│  └── new.tsx # Adding a new item page
└── _layout.tsx # Layout wrapper for the pages
```

## Pages and Layouts

### `_layout.tsx`

Layout wrapper for the three Task Flow pages.

<CodeAndPreviewButtons codeUrl="#" />

#### Customizable items

- Data source for the main data table
- Data ID field for the main data table
- Columns for the main data table

<Divider />

### `_layout/index.tsx`

First page of the Compare Data Task Flow. Displays a list of selectable records for a user to compare.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- List page title
- List page description
- Compare button
- New button

<Divider />

### `_layout/compare.tsx`

Compare page of the Compare Data Task Flow. When a user selects records to compare and initiates a comparison, this page displays a specialized table for comparing the selected records.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Compare page title
- Compare page description
- Back button
- New button

<Divider />

### `_layout/new.tsx`

New record page of the Compare Data Task Flow. Displays a form for generating a new record in the data.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- New page title
- New page description
- Save button
- Form elements



================================================
FILE: docs/docs/task-flows/contribute-data.mdx
================================================
[Binary file]


================================================
FILE: docs/docs/task-flows/explore-data.mdx
================================================
---
title: 'Explore Data'
---

import Divider from '@mui/material/Divider';
import { CodeAndPreviewButtons } from '@site/src/components/CodeAndPreviewButtons';

# Explore Data

## Links

- [Description and guidelines](https://strudel.science/design-system/task-flows/explore-data/)
- [Live example](https://strudel.science/strudel-kit/#/explore-data)
- [Source code](https://github.com/strudel-science/strudel-kit/tree/main/strudel-taskflows/src/pages/explore-data)

## Generate this Task Flow

```
cd src/pages
npx degit strudel-science/strudel-kit/src/pages/explore-data my-explore-data
```

## File Structure

```py
explore-data
├── -components
│  ├── DataView.tsx # Data grid component
│  ├── DataViewHeader.tsx # Header above data table
│  ├── FiltersPanel.tsx # Left side panel of filters
│  └── PreviewPanel.tsx # Panel displayable on row-click
├── -tests
│  └── explore-data.cy.ts # End-to-end test for this Task Flow
├── $id.tsx # Detail page for a single row
└── index.tsx # Data explorer page
```

## Pages and Layouts

### `index.tsx`

First page of the Explore Data Task Flow. Displays a data table, filters panel, and a data preview panel.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Filter definitions
- `DataView.tsx`
  - Data source
  - Data ID field
  - Data table columns
  - Query mode (client or server)
- `PreviewPanel.tsx`
  - Preview content

<Divider />

### `$id.tsx`

Data detail page of the Explore Data Task Flow. When a user drills into a record in the data table, the detail page shows more data about the selected item.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Detail page data source
- Detail page data unique ID field
- Detail page query mode (client or server)
- Page header field
- Breadcrumb title text
- Detail page content



================================================
FILE: docs/docs/task-flows/monitor-activities.mdx
================================================
---
title: 'Monitor Activities'
---

import Divider from '@mui/material/Divider';
import { CodeAndPreviewButtons } from '@site/src/components/CodeAndPreviewButtons';

# Monitor Activities

## Links

- [Description and guidelines](https://strudel.science/design-system/task-flows/monitor-activities/)
- [Live example](https://strudel.science/strudel-kit/#/monitor-activities)
- [Source code](https://github.com/strudel-science/strudel-kit/tree/main/strudel-taskflows/src/pages/monitor-activities)

## Generate this Task Flow

```
cd src/pages
npx degit strudel-science/strudel-kit/src/pages/monitor-activities my-monitor-activities
```

## File Structure

```py
monitor-activities
├── -tests
│  └── monitor-activities.cy.ts # End-to-end test for this Task Flow
├── calendar.tsx # Calendar view of all activities (work in progress)
├── detail.tsx # Detail page for a given activity
└── index.tsx # List view of activities
```

## Pages and Layouts

### `index.tsx`

First page of the Monitor Activities Task Flow. Displays a list of records that a user can drill into.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- List view table columns
- List view data source
- Data source unique ID field
- Initial sort field

<Divider />

### `detail.tsx`

Detail page of the Monitor Activities Task Flow. When a user drills into a record, this page displays a more data about that particular activity.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Detail data source
- Events table columns
- Events data unique ID field
- Title field
- Plot data

<Divider />

### `calendar.tsx`

(Work in progress) Calendar page of the Monitor Activities Task Flow. Displays all activities by date in a calendar visualization.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items



================================================
FILE: docs/docs/task-flows/overview.mdx
================================================
---
title: 'Overview'
---

# Task Flows

Task Flow templates in STRUDEL Kit are UI flows built out as React components that plug directly into your base app. They are based on the [Task Flows in the STRUDEL Design System](https://strudel.science/design-system/task-flows/overview/) which offer user-friendly methods for implementing common patterns seen in scientific and data-intensive UIs.

Task Flow templates can be generated all together by building the whole strudel-kit app (base app + templates):

```
npx degit strudel-science/strudel-kit my-app
```

Or they can be generated individually:

```
npx degit strudel-science/strudel-kit/src/pages/compare-data my-compare-data
```

## Task Flow Pieces

Every Task Flow template consists of four main pieces:

1. Page components
2. Layout components
3. Inner page components
4. Tests

### Page components

A Task Flow template is made up of a series of pages that are built out as React components. Any file that is not prefixed by a dash (`-`) or an underscore (`_`) or nested in a directory that is prefixed with a dash is a page. The name of the file maps directly to the name of the path in the URL to render that page. Note that the URL path includes the full path starting from the `pages` directory. So a the file `/src/pages/my-taskflow/new.tsx` will be accessible at the URL route `/my-taskflow/new`. STRUDEL Kit uses the TanStack Router library to handle routing throughout the app and to autogenerate routes based on the file structure in the `src/pages` directory. Check out the [TanStack Router documentation](https://tanstack.com/router/latest/docs/framework/react/overview) to understand all the conventions around file naming and page routing.

### Layout components

Some Task Flow templates have one or more `_layout.tsx` files. These files are wrapper components that wrap around all of the pages nested inside of their co-located `_layout` directories. These are used for layout elements that are common to multiple pages in a Task Flow like navigation or header elements. To better understand how layout components affect the component nesting/rendering, it can be helpful to look at the [File-Based Routing](https://tanstack.com/router/latest/docs/framework/react/routing/file-based-routing) section of the TanStack router docs.

### Inner page components

Along with their page components, most Task Flows also have inner page components that are separated into their own files. These are housed in the `-components` directory and are used within page components.

## Customizing a Task Flow

One of the first things you will do when using one of the Task Flow templates is customize it for your own needs. For common and simple customizable items, there will be a comment in the template code that says `CUSTOMIZE:`. These comments can be seen throughout the page components, inner components, and layout components of a template. These mark things like titles, links, column configurations, or filter configurations. It can be useful to do a project-wide search in your IDE for the term `CUSTOMIZE:` to get started. On top of customizing the simple stuff, you have full reign to change the template code as is needed for your project.



================================================
FILE: docs/docs/task-flows/run-computation.mdx
================================================
---
title: 'Run Computation'
---

import Divider from '@mui/material/Divider';
import { CodeAndPreviewButtons } from '@site/src/components/CodeAndPreviewButtons';

# Run Computation

## Links

- [Description and guidelines](https://strudel.science/design-system/task-flows/run-computation/)
- [Live example](https://strudel.science/strudel-kit/#/run-computation)
- [Source code](https://github.com/strudel-science/strudel-kit/tree/main/strudel-taskflows/src/pages/run-computation)

## Generate this Task Flow

```
cd src/pages
npx degit strudel-science/strudel-kit/src/pages/run-computation my-run-computation
```

## File Structure

```py
run-computation
├── -components
│  └── NewScenarioModal.tsx # Modal component for adding a new computation scenario
├── -context
│  ├── ContextProvider.tsx # State management for this Task Flow
│  └── actions.ts # Action functions that control the state
├── -tests
│  └── run-computation.cy.ts # End-to-end test for this Task Flow
├── _layout
│  ├── $id
│  │  ├── _layout
│  │  │  ├── data-inputs.tsx # Inputs page
│  │  │  ├── results.tsx # Results page
│  │  │  ├── running.tsx # Running in progress page
│  │  │  └── settings.tsx # Settings page
│  │  └── _layout.tsx # Breadcrumb layout wrapper
│  └── index.tsx
└── _layout.tsx # Top level context wrapper
```

## Pages and Layouts

### `_layout.tsx`

Top level context wrapper for the Run Computation Task Flow.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Index page data source
- Index page data source unique ID field
- Index page columns
- Inputs page data table unique ID field
- Inputs page columns
- Results page data table unique ID field
- Results page columns

<Divider />

### `_layout/index.tsx`

First page of the Run Computation Task Flow. Displays a list of existing runs and a button to create a new run.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- List page title
- List page description
- New scenario button
- `NewScenarioModal.tsx`
  - New item modal title
  - New item form components

<Divider />

### `_layout/$id/_layout.tsx`

Layout wrapper for the inner Run Computation steps. Includes a breadcrumb bar at the top of the page.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Breadcrumb link
- Breadcrumb label

<Divider />

### `_layout/$id/_layout/data-inputs.tsx`

Data inputs page of the Run Computation Task Flow. The first step in a computation which displays a set of input data for the computation.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Inputs table data source

<Divider />

### `_layout/$id/_layout/settings.tsx`

Settings page of the Run Computation Task Flow. Displays a form for editing parameters to pass to the computation when it runs.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Settings page title
- Settings form elements
- Run button

<Divider />

### `_layout/$id/_layout/running.tsx`

Running page of the Run Computation Task Flow. Displays a progress bar and message while the computation is in progress.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- In progress section title
- In progress section description

<Divider />

### `_layout/$id/_layout/results.tsx`

Results page of the Run Computation Task Flow. Displays output data and visualizations from the computation.

<CodeAndPreviewButtons codeUrl="#" previewUrl="#" />

#### Customizable items

- Results table data source
- Results line chart data source
- Results bar chart data source
- Back to settings button



================================================
FILE: docs/docs/task-flows/search-data-repositories.mdx
================================================
[Binary file]


================================================
FILE: docs/docs/tutorials/usrse.mdx
================================================
---
# Display h2 to h5 headings
toc_min_heading_level: 2
toc_max_heading_level: 2
---

# US-RSE Tutorial

October 9, 2024

This is a follow along guide to the US-RSE tutorial conducted over Zoom. Use this guide to follow along with all of the code edits made live during the tutorial demonstration.

## Helpful Links

- [StackBlitz Code Starter](https://stackblitz.com/edit/vitejs-vite-jjdxuj?file=README.md&terminal=dev)
- [StackBlitz Code Live In Progress](https://stackblitz.com/edit/vitejs-vite-eykdvw?file=README.md)
- [Slides](https://docs.google.com/presentation/d/1CmflcN_H_xCFPRV9qp4IjluHUkOvpW7Il5U5naN_emI/edit#slide=id.g25e5f40b217_0_317)
- [GBIF API Documentation](https://techdocs.gbif.org/en/openapi/v1/occurrence)
- [GBIF Occurrence Endpoint Example](https://api.gbif.org/v1/occurrence/search)
- [Material UI Documentation](https://mui.com/material-ui/all-components/)
- [React Cheatsheet](https://zerotomastery.io/cheatsheets/react-cheat-sheet/)

## Configuring a STRUDEL Task Flow

Each Task Flow is configured inside of its own `taskflow.config.ts` file. We will be configuring the Explore Data Task Flow which has already been included in this project.

You can find the configuration file at `src/pages/explore-data/_config/taskflow.config.ts`

### 1. Update the `data.list` object

```js
list: {
  source: "https://api.gbif.org/v1/occurrence/search",
  staticParams: null,
  idField: "key",
  queryMode: "server",
}
```

### 2. Update the `data.detail` object

```js
detail: {
  source: "https://api.gbif.org/v1/occurrence",
  staticParams: null,
  idField: "key",
  queryMode: "server",
}
```

### 3. Update page titles in the `pages.index` object

```
{
  pages: {
    index: {
      title: "Biodiversity Explorer",
      description: "Explore species observations around the world.",
      ...
    }
  }
}
```

### 4. Update the column definitions in `pages.index.tableColumns`

```js
tableColumns: [
  {
    field: "scientificName",
    headerName: "Name",
    width: 200
  },
  {
    field: "year",
    headerName: "Year",
    width: 150
  },
  {
    field: "basisOfRecord",
    headerName: "Basis of Record",
    width: 150
  },
  {
    field: "elevation",
    headerName: "Elevation",
    width: 150,
    type: 'number'
  }
],
```

### 5. Update the filter definitions in `pages.index.tableFilters`

```js
tableFilters: [
  {
    field: 'elevation',
    label: 'Elevation',
    paramType: 'array-string',
    filterComponent: 'RangeSlider',
    filterProps: {
      min: 0,
      max: 100,
    },
  },
  {
    field: 'basisOfRecord',
    label: 'Basis of Record',
    paramType: 'repeated',
    filterComponent: 'CheckboxList',
    filterProps: {
      options: [
        {
          label: 'Preserved Specimen',
          value: 'PRESERVED_SPECIMEN',
        },
        {
          label: 'Fossil Specimen',
          value: 'FOSSIL_SPECIMEN',
        },
        {
          label: 'Living Specimen',
          value: 'LIVING_SPECIMEN',
        },
        {
          label: 'Observation',
          value: 'OBSERVATION',
        },
        {
          label: 'Human Observation',
          value: 'HUMAN_OBSERVATION',
        },
        {
          label: 'Machine Observation',
          value: 'MACHINE_OBSERVATION',
        },
      ],
    },
  },
];
```

## Customizing the Theme

Theming is handled by Material UI's [theme object](https://mui.com/material-ui/customization/theming/).

You can modify global theme variables in `src/theme.tsx`.

### 1. Change `palette.mode` to dark

```js
mode: 'dark',
```

### 2. Change the `palette.background` colors

```js
background: {
  default: '#222',
  paper: '#333',
},
```

### 3. Change the `palette.primary` colors

```js
primary: {
  main: '#5dffe2',
  // Exclude light, dark, or contrastText to have them
  // calculated automatically based on the main color.
  light: '#99ffec',
  dark: '#00e0b7',
  // contrastText: '#fff',
},
```

### 4. Change the `shape.borderRadius`

```js
borderRadius: 0,
```

### 5. Change the primary font in `typography.fontFamily`

```js
fontFamily: `"Avenir", "Verdana", "Arial", sans-serif`,
```

## React Basics

Before we start customizing the Explore Data template, we will cover some basics of React and Material UI components.

You may find it helpful to reference the [React syntax cheatsheet](https://zerotomastery.io/cheatsheets/react-cheat-sheet/) during this section.

### 1. Make a new folder and file

Create a new folder inside of `src/pages` called `hello-world`.

Then, create a file inside `hello-world` called `index.tsx`

```
src
├── pages
│  ├── hello-world
│  │  ├── index.tsx
```

### 2. Create a `HelloWorldPage` component

```jsx title="src/pages/hello-world/index.tsx"
const HelloWorldPage: React.FC = () => {
  return (
    <div>
      Hello World!
    </div>
  );
};

export default HelloWorldPage;
```

### 3. Make a new `_components` folder and component file

Create a new folder inside of `hello-world` called `_components`.

Then, create a file inside `_components` called `TagList.tsx`.

```
src
├── pages
│  ├── hello-world
│  │  ├── _components
│  │  │  ├── TagList.tsx
│  │  ├── index.tsx
```

### 4. Create a `TagList` component

```jsx title="src/pages/hello-world/_components/TagList.tsx"
export const TagList: React.FC = () => {
  return (
    <ul>
      <li>Animalia</li>
      <li>Chordata</li>
      <li>Mammalia</li>
    </ul>
  )
}
```

### 5. Import and use the `TagList` component in `HelloWorldPage`

```jsx title="src/pages/hello-world/index.tsx"
import { TagList } from './_components/TagList';

const HelloWorldPage: React.FC = () => {
  return (
    <div>
      Hello World!
      <TagList />
    </div>
  );
};

export default HelloWorldPage;
```

### 6. Add a `tags` prop to the `TagList` component

```jsx title="src/pages/hello-world/_components/TagList.tsx"
interface TagListProps {
  tags: string[];
}

export const TagList: React.FC<TagListProps> = ({ tags }) => {
  return (
    <ul>
      <li>Animalia</li>
      <li>Chordata</li>
      <li>Mammalia</li>
    </ul>
  )
}
```

### 7. Loop through `tags` to render each item

```jsx title="src/pages/hello-world/_components/TagList.tsx"
export const TagList: React.FC<TagListProps> = ({ tags }) => {
  return (
    <ul>
      {tags.map((tag) => (
        <li key={tag}>{tag}</li>
      ))}
    </ul>
  )
}
```

### 8. Pass values to the `tags` prop on `HelloWorldPage`

```jsx title="src/pages/hello-world/index.tsx"
const HelloWorldPage: React.FC = () => {
  return (
    <div>
      Hello World!
      <TagList tags={['Animalia', 'Chordata', 'Mammalia']} />
    </div>
  );
};
```

## Material UI Basics

Material UI is included in the STRUDEL application by default. It contains many useful components for reusable elements and patterns throughout a web user interface.

See more in the [Materials UI Docs](https://mui.com/material-ui/all-components/).

### 1. Import the `Chip` component to `TagList.tsx`

```jsx title="src/pages/hello-world/_components/TagList.tsx"
import { Chip } from '@mui/material';
```

### 2. Replace the `li` elements with `Chip` components

```jsx title="src/pages/hello-world/_components/TagList.tsx"
export const TagList: React.FC<TagListProps> = ({ tags }) => {
  return (
    <ul>
      {tags.map((tag) => (
        <Chip key={tag} label={tag} />
      ))}
    </ul>
  )
}
```

### 3. Import the `Stack` component to `TagList.tsx`

```jsx title="src/pages/hello-world/_components/TagList.tsx"
import { Chip, Stack } from '@mui/material';
```

### 4. Replace the `ul` element with the `Stack` component

```jsx title="src/pages/hello-world/_components/TagList.tsx"
export const TagList: React.FC<TagListProps> = ({ tags }) => {
  return (
    <Stack direction="row" spacing={1}>
      {tags.map((tag) => (
        <Chip key={tag} label={tag} />
      ))}
    </Stack>
  )
}
```

### 5. Import the `Typography` component to `index.tsx`

```jsx title="src/pages/hello-world/index.tsx"
import { Typography } from '@mui/material';
```

### 6. Wrap the title text with the `Typography` component

```jsx title="src/pages/hello-world/index.tsx"
const HelloWorldPage: React.FC = () => {
  return (
    <div>
      <Typography variant="h3" component="h1">
        Hello World!
      </Typography>
      <TagList tags={['Animalia', 'Chordata', 'Mammalia']} />
    </div>
  );
};
```

### 7. Import the `Container` component to `index.tsx`

```jsx title="src/pages/hello-world/index.tsx"
import { Container, Typography } from '@mui/material';
```

### 6. Replace the `div` element with the `Container` component

```jsx title="src/pages/hello-world/index.tsx"
const HelloWorldPage: React.FC = () => {
  return (
    <Container maxWidth="sm">
      <Typography variant="h3" component="h1">
        Hello World!
      </Typography>
      <TagList tags={['Animalia', 'Chordata', 'Mammalia']} />
    </Container>
  );
};
```

### 7. Use the `sx` prop to style `Typography`

```jsx title="src/pages/hello-world/index.tsx"
<Typography
  variant="h3"
  component="h1"
  sx={{
    borderBottom: '1px solid',
    borderBottomColor: 'primary.main',
    marginBottom: 2,
    paddingBottom: 2,
  }}
>
  Hello World!
</Typography>
```

## Customizing the Task Flow

Now we will utilize the component we made in the preview panel and add some more custom data to the panel.

For this exercise we will be working inside of `src/pages/explore-data/_components_/PreviewPanel.tsx`

### 1. Import the `TagList` component to `PreviewPanel.tsx`

```jsx title="src/pages/explore-data/_components/PreviewPanel.tsx"
import { TagList } from '../../hello-world/_components/TagList';
```

### 2. Replace the row description with a `TagList`

Replace:

```jsx title="src/pages/explore-data/_components/PreviewPanel.tsx"
<Typography variant="body2">
  Row description, subtitle, or helper text.
</Typography>
```

With:

```jsx title="src/pages/explore-data/_components/PreviewPanel.tsx"
<TagList
  tags={[
    previewItem.kingdom,
    previewItem.phylum,
    previewItem.class,
    previewItem.order,
  ]}
/>
```

### 3. Add another `TagList` directly after the first

```jsx title="src/pages/explore-data/_components/PreviewPanel.tsx"
<TagList tags={[previewItem.family, previewItem.genus, previewItem.species]} />
```

### 4. Replace Property Group 1 with Location data

```jsx title="src/pages/explore-data/_components/PreviewPanel.tsx"
<Box>
  <Typography fontWeight="medium" mb={1}>
    Location
  </Typography>
  <LabelValueTable
    rows={[
      { label: 'Continent', value: previewItem.continent },
      { label: 'Country', value: previewItem.country },
      { label: 'Municipality', value: previewItem.municipality },
    ]}
  />
</Box>
```

### 4. Replace Property Group 2 with Record data

```jsx title="src/pages/explore-data/_components/PreviewPanel.tsx"
<Box>
  <Typography fontWeight="medium" mb={1}>
    Record
  </Typography>
  <LabelValueTable
    rows={[
      { label: 'Basis of Record', value: previewItem.basisOfRecord },
      { label: 'Protocol', value: previewItem.protocol },
      { label: 'Status', value: previewItem.occurrenceStatus },
    ]}
  />
</Box>
```



================================================
FILE: docs/docs/tutorials/basic-app-with-strudel/0-introduction.md
================================================
# Tutorial Introduction

In this tutorial you will learn the basics of how to build a web application using the STRUDEL Task Flow templates. By the end you will have your own customized version of the [Explore Data Task Flow](https://strudel.science/design-system/task-flows/explore-data/) running in a web browser on your computer.

### Who is this tutorial for?

This tutorial is for anyone who wants to build a web user interface for their scientific software by starting with a STRUDEL Task Flow. It will deal with tools such as the command line, JavaScript, TypeScript, React, HTML, and CSS. Some experience with these tools will be important to follow along with the tutorial.

### Have feedback?

If you encounter any issues along the way or have feedback about how we can improve this tutorial, we would love to hear from you. Check out the tutorial's [feedback thread](https://github.com/orgs/strudel-science/discussions/50) on our GitHub Discussions page.

### Jump In

1. [Set Up Your Development Environment](/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/setup)

   Install all the prerequisite and core software that powers the STRUDEL Kit.

2. [Create a Base App with STRUDEL](/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/create-app)

   Get familiar with the STRUDEL CLI and generate the base scaffolding for a React app that uses the STRUDEL Design System.

3. [Add a Task Flow to Your App](/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/add-taskflow)

   Learn how to add Task Flows into your app and build your own custom configurations.

4. [Customize Your Task Flow](/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/customize-taskflow)

   Familiarize yourself with the Task Flow code and learn how to make changes that are important to your use case.

5. [Customize Your App](/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/customize-app)

   Make the app your own by changing the theme, adding styles, and adding custom sections.

6. [Customize the Home Page](/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/customize-home-page)

   Build out a home page for your application.

7. [Continue Learning](/strudel-kit/docs/guides/tutorials/basic-app-with-strudel/continue-learning)

   Discover resources to help you continue developing applications with STRUDEL.



================================================
FILE: docs/docs/tutorials/basic-app-with-strudel/1-setup.md
================================================
# Setup Your Project

The first step is to start a terminal program. The rest of this tutorial will assume you are using a standard MacOS, UNIX, or [Windows PowerShell](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4) (not command.exe) terminal. This ensures that all the command line steps follow the same syntax.

Then, make sure you have followed the instructions on the [Installation](/strudel-kit/docs/getting-started/installation) page so that you have node, npm, and npx installed on your system. You can confirm you have these tools using the commands below:

```
node --version
npm --version
npx --version
```

## Generate a New Project

Start a new project named `planets-app` using the strudel-kit code:

```
npx degit strudel-science/strudel-kit planets-app
```

Note that this may prompt you to install degit from npm. Make sure you click select "yes" to install it.

Once installed, this will generate a new folder called `planets-app` with the strudel-kit base app and Task Flow templates embedded in it. See the [Project Structure](/strudel-kit/docs/getting-started/project-structure) page to get a breakdown of all the generated files.

## Run Your Project

Go into the new directory:

```bash
cd planets-app
```

Install the app dependencies:

```bash
npm install
```

Start up your app locally:

```bash
npm start
```

Open your app in the browser at http://localhost:5175

In the future, when you run your app, you will not need to perform the install step -- just `npm start`. In fact, the development server that this runs is able to update the app "live" as you change the code in this directory, so you don't need to stop and restart the app for each change.

## Open Your Application Code

For the rest of the tutorial you will need a code editor to make changes to the files in your app. We recommend [VSCode](https://code.visualstudio.com/) but any editor will do.

From your code editor, open the `planets-app` folder.



================================================
FILE: docs/docs/tutorials/basic-app-with-strudel/2-configure-taskflow.md
================================================
# Configure Your Task Flow

## Introduction

Task Flows are are a set of steps (represented by a series of screens) that help a user accomplish a task and represent how a user progresses through a UI. STRUDEL has several Task Flow templates that built into a the starter app. In this example, you will work with the Task Flow called "Explore Data". Let's configure this Task Flow so that users can search and filter data about planets in the Solar System.

## Remove Unused Task Flows

Before we start working with the Explore Data Task Flow, let's remove the Task Flows that we aren't going to be working with. Go to the `src/pages` directory and delete the following folders (don't worry, you can bring them back using the command-line later if you wish):

- `compare-data`
- `contribute-data`
- `monitor-activities`
- `playground`
- `run-computation`
- `search-data-repositories`

:::info Reference
To re-add or duplicate a Task Flow, you can navigate to the `src/pages` directory and run:

`npx degit strudel-science/strudel-kit/src/pages/TASK-FLOW-NAME`
:::

## Rename Your Task Flow

Let's rename the Explore Data Task Flow something that is more appropriate for our example. Inside the `src/pages` directory, rename the `explore-data` directory `solar-system`. Doing this will change the URL route to this Task Flow's page. It will also update the link to the Task Flow on the home page. You should now be able to navigate to your Task Flow template at http://localhost:5175/solar-system.

If you followed that link, you will be taken to the default Explore Data page. Right now it is configured with default data and settings. Let's keep going to configure this Task Flow for own usecase.

## Task Flow Breakdown

Let's look at the contents of `src/pages/solar-system`, the directory that holds the Explore Data Task Flow template:

```py
solar-system
├── -components
│  ├── DataView.tsx # Data grid component
│  ├── DataViewHeader.tsx # Header above data table
│  ├── FiltersPanel.tsx # Left side panel of filters
│  └── PreviewPanel.tsx # Panel displayable on row-click
├── -tests
│  └── explore-data.cy.ts # End-to-end test for this Task Flow
├── $id.tsx # Detail page for a single row
└── index.tsx # Data explorer page
```

There are three types of files in this template:

1. Page components
2. Sub-components
3. Tests

The page components are the files that aren't inside a directory prefixed with `-`. In this template that includes `$id.tsx` and `index.tsx`. These define the pages and URL routes that exist in our application. The strudel-kit uses TanStack Router to handle this. You may find it useful to scan their [documentation and conventions](https://tanstack.com/router/latest/docs/framework/react/routing/file-based-routing).

Sub-components are the files nested inside of the `-components` directory. These are pieces of pages that are broken into their own files for brevity. Typically these are used inside page components.

The last type of file in this template is a test. This tests the basic functionality and flow of the Task Flow.

You can read more about the structure of Task Flow templates on the Task Flows [Overview](/strudel-kit/docs/task-flows/overview) page in the strudel-kit docs.

## Add a Data Source

Right now the Task Flow you created is pulling its data from the `public/dummy-data/` directory. Let's instead create a new new data file that we will use for our Task Flow.

Open up a blank file and paste in the following content:

```
Name,Diameter,Mass,Inclination,Eccentricity,Semi_majorAxis,SurfaceGravity,OrbitalPeriod,SiderealRotation,Satellites
Mercury,4879.4, 3.302×10^23, 7.004, 0.20563593, 0.38709927, 3.7, 0.241, 58.65, 0
Venus,12103.6, 4.869×10^24, 3.39471, 0.00677672, 0.72333566, 8.87, 0.615, 243.0187, 0
Earth,12756.3, 5.974×10^24, 0.00005, 0.01671123, 1.00000261, 9.78, 1, 0.997271, 1
Mars,6794.4, 6.419×10^23, 1.85061, 0.0933941, 1.52371034, 3.71, 1.881, 1.02595, 2
Jupiter,142984, 1.899×10^27, 1.3053, 0.04838624, 5.202887, 24.79, 11.86, 0.4135, 63
Saturn,120536, 5.688×10^26, 2.48446, 0.05386179, 9.53667594, 8.96, 29.46, 0.4264, 64
Uranus,51118, 8.683×10^25, 0.774, 0.04725744, 19.18916464, 7.77, 84.01, 0.7181, 27
Neptune,49572, 1.024×10^26, 1.76917, 0.00859048, 30.06992276, 11, 164.79, 0.6712, 14
```

Save this file in `public/data` and name it `planets.csv`.

### Edit the Task Flow Data Source

Now you need to tell the Task Flow to use the new data source you just created. For this template, the data source is referenced inside the file `solar-system/-components/DataView.tsx`.

:::info Reference

The primary configurable portions of a Task Flow template are marked with comments that say `CUSTOMIZE:`. You might find it useful to do a project-wide search for this phrase when you are setting up a new Task Flow.
:::

Inside `DataView.tsx`, locate the following line of code:

```jsx
dataSource: 'dummy-data/exoplanets.csv',
```

Now change this to reflect the path to your newly created CSV file:

```jsx
dataSource: 'data/planets.csv',
```

Then locate `dataIdField` and change this to `Name` (the unique column in your new dataset):

```jsx
const dataIdField = 'Id';
```

Becomes:

```jsx
const dataIdField = 'Name';
```

Now instead of pointing to the default dataset, your Task Flow points to the planets dataset you made. Next, we need to change the page titles, table columns, and filters for the main `index` page.

## Modify Page Elements

Let's first start simple by changing the page titles for this Task Flow.

### Page Titles

Open up `src/pages/solar-system/index.tsx`. This is the initial page of the Task Flow. Scan this file for the `<PageHeader />` component:

```jsx title="index.tsx"
<PageHeader
  // CUSTOMIZE: the page title
  pageTitle="Explore Data App"
  // CUSTOMIZE: the page description
  description="Description of this app"
  sx={{
    marginBottom: 1,
    padding: 2,
  }}
/>
```

Replace the `pageTitle` prop value with `"Solar System Explorer"` and the `description` prop value with `"Explore data about the planets that orbit the Sun."`.

:::info Reference

A prop is like an input or argument for a React component. They are used to make components more reusable and dynamic.
:::

Your component should now look like this:

```jsx title="index.tsx"
<PageHeader
  // CUSTOMIZE: the page title
  pageTitle="Solar System Explorer"
  // CUSTOMIZE: the page description
  description="Explore data about the planets that orbit the Sun."
  sx={{
    marginBottom: 1,
    padding: 2,
  }}
/>
```

Save this file and you should see the new page titles in your browser at http://localhost:5175/solar-system.

### Filters

The filters are also defined in the `index.tsx` file so keep that file open for this next step. Locate the array towards the top of the file called `filterConfigs`. This array defines which filters to render, how they should render, and how they should connect to the data.

Replace that whole array definition with one that works with our new data source:

```jsx title="index.tsx"
// CUSTOMIZE: the filter definitions
const filterConfigs: FilterConfig[] = [
  {
    field: "Diameter",
    label: "Diameter (km)",
    filterComponent: "Slider",
    filterProps: {
      min: 4000,
      max: 150000
    }
  }
];
```

Save this file and you should see the new filter in your browser at http://localhost:5175/solar-system.

### Columns

The columns to display in the table are defined in the `DataView.tsx` component inside the `-components` directory (the same one where we defined the data source). Open up that file and locate the `<SciDataGrid />` component.

Inside this component is a prop called `columns`. Replace the value of this prop with an array of column definitions for our new dataset:

```jsx title="DataView.tsx"
// CUSTOMIZE: the table columns
columns={[
  {
    field: "Name",
    headerName: "Name",
    width: 200
  },
  {
    field: "Diameter",
    headerName: "Diameter (km)",
    width: 150
  },
  {
    field: "Mass",
    headerName: "Mass (kg)",
    width: 150
  },
  {
    field: "Inclination",
    headerName: "Inclination (deg)",
    width: 150
  },
  {
    field: "Eccentricity",
    headerName: "Eccentricity",
    width: 150
  }
]}
```

Save this file and you should see the new columns show up in the table in your browser at http://localhost:5175/solar-system.

You should now have a fully functioning Explore Data Task Flow page when you navigate to the `/solar-system` route!

![Screenshot of solar system Task Flow in a browser](/img/tutorial/start-explore-data-2.png)

This is great, but it would be good to be able to access this page from the navbar instead. Let's add a link to the Solar System page in the top navigation bar.

## Update the Navigation Bar

Open the file located at `src/components/TopBar.tsx`. This component controls the contents of the top navigation bar.

Locate the last closing `</AppLink>` and add another `<AppLink>` component directly after:

```jsx title="TopBar.tsx"
<AppLink to="/solar-system">Solar System</AppLink>
```

You may also want to update the title in the previous `<AppLink>` to say something other than "My Project":

```jsx title="TopBar.tsx"
<AppLink to="/">
  <Typography variant="h6" component="div" fontWeight="bold">
    Planets
  </Typography>
</AppLink>
```

To do this we are going to open the global strudel configuration file `strudel.config.ts` located at the root of our app.

Save that file and you should see a new "Solar System" link in the navbar.

Woohoo! You now have your first fully connected Task Flow.

## Next steps

The next section provides some examples of how to customize your Task Flow.



================================================
FILE: docs/docs/tutorials/basic-app-with-strudel/3-customize-taskflow.md
================================================
# Customize Your Task Flow

Now that you have set up your initial task flow let's customize some of the content within it. In this section you will learn how to remove, add, and edit sections in a task flow page.

## Remove an Element

Often you won't want to use all of the page elements that come with a Task Flow. For this tutorial, you remove the "Related Data" table in the preview panel that displays when you click on a row. Because you don't have any nested or linked data for each planet in the table, this element isn't useful to the UI right now.

First, look inside the `src/pages/solar-system/` directory that was generated when you first added your task flow.

These are the files that determine how this specific Task Flow will be rendered in the UI. Some of these files reference other components that are common to the whole app, but these components are specific to the `solar-system` Task Flow.

For this step, open `PreviewPanel.tsx` because the "Related Data" table is in the preview panel.

Next, find the code that renders the "Related Data" section:

```js
<Box>
  <Typography fontWeight="medium" mb={1}>
    Related Data
  </Typography>
  <DataGrid
    rows={relatedRows}
    columns={relatedColumns}
    disableRowSelectionOnClick
    initialState={{
      pagination: { paginationModel: { pageSize: 5 } },
    }}
  />
</Box>
```

This section of code includes a `Box` component to wrap around the whole section, a `Typography` component to display the section heading, and a `DataGrid` component to display the related data in a table.

Delete this whole section of code, from `<Box>` to `</Box>` and save `PreviewPanel.tsx`. Refresh the Explorer page in the browser. The "Related Data" section should now be gone and the "View Details" and "Export Data" buttons should be directly below the other content.

## Edit the Preview Panel Content

Now let's make the preview panel display more useful information. In this step, you are going to edit the property-value tables in the preview panel so that they display data from your data source: `planets.csv`.

With `PreviewPanel.tsx` open, find the code that renders the "Property Group 1" section:

```js
<Box>
  <Typography fontWeight="medium" mb={1}>
    Property Group 1
  </Typography>
  <LabelValueTable
    rows={[
      { label: 'Property 1', value: 'value' },
      { label: 'Property 2', value: 'value' },
      { label: 'Property 3', value: 'value' },
    ]}
  />
</Box>
```

Just like the "Related Data" section, there is a `Box` component and a `Typography` component but there is also a `LabelValueTable` component. This component renders a list of properties and their values in a readable two-column format.

### Replace the Section Label

For this first section, let's display the physical characteristics of the planet. Replace "Property Group 1" with "Physical Characteristics".

```js
<Typography fontWeight="medium" mb={1}>
  Physical Characteristics
</Typography>
```

Refresh your browser and make sure "Physical Characteristics" displays as the section label.

### Connect your data to the preview panel using the state variable

Next, you will replace the rows in the `LabelValueTable` with data from the planet that the user has clicked. To do this, you need to access the `props` of the `PreviewPanel` component. This component has a prop called `previewItem`. Data in the `previewItem` prop is dynamic. This means that it changes based on actions that the user takes or external events like data requests. In this case, it changes when a user clicks on a row in the main data table.

In the `PreviewPanel` component, the `previewItem` prop is defined near the top of the component:

```js
export const PreviewPanel: React.FC<PreviewPanelProps> = ({ previewItem, onClose }) => {
  ...
}
```

There are other pieces here, but for now just focus on the `previewItem` variable. When a user clicks on a row in this task flow, the data in that row is stored in `previewItem`. Now, replace "Property 1" in the first `LabelValueTable` with the "Diameter" property for the selected planet:

```js
<LabelValueTable
  rows={[
    { label: 'Diameter', value: previewItem['Diameter'] },
    { label: 'Property 2', value: 'value' },
    { label: 'Property 3', value: 'value' },
  ]}
/>
```

Here you have replaced the first label with "Diameter" and replaced the value with the value of the `Diameter` property from the selected row. Refresh the page and make sure your see a number next to the "Diameter" label in the preview panel. Click around to different rows. Do you see the number changing?

Add a few more dynamic rows to the table in this section:

```js
<LabelValueTable
  rows={[
    { label: 'Diameter', value: previewItem['Diameter'] },
    { label: 'Mass', value: previewItem['Mass'] },
    { label: 'Surface Gravity', value: previewItem['SurfaceGravity'] },
  ]}
/>
```

Notice that you can access properties that aren't displayed in the main table. Even though `SurfaceGravity` wasn't defined in the main table columns, it is still part of the underlying data so it is present in the internal task flow `state`. Also notice that the label can be any string you want, but the value must use the exact name of the property column in `planets.csv`.

Next, add dynamic rows to the second `LabelValueTable`. Replace the section label "Property Group 2" with "Orbital Characteristics" and add dynamic data points for the other columns in `planets.csv`:

```js
<Box>
  <Typography fontWeight="medium" mb={1}>
    Orbital Characteristics
  </Typography>
  <LabelValueTable
    rows={[
      { label: 'Inclination', value: previewItem['Inclination'] },
      { label: 'Eccentricity', value: previewItem['Eccentricity'] },
      { label: 'Semi Major Axis', value: previewItem['Semi_majorAxis'] },
      { label: 'Orbital Period', value: previewItem['OrbitalPeriod'] },
      { label: 'Sidereal Rotation', value: previewItem['SiderealRotation'] },
      { label: 'Satellites', value: previewItem['Satellites'] },
    ]}
  />
</Box>
```

Refresh the page and make sure you see dynamic values in both sections of the preview panel.

Let's clean up the preview panel so that there's no more placeholder content. Find the placeholder subtitle section and remove it:

```js
// Delete this line
<Typography variant="body2">
  Row description, subtitle, or helper text.
</Typography>
```

Now find the code that renders the "Preview Heading":

```js
<Typography variant="h6" component="h3" flex={1}>
  <Link component={RouterLink} to="." underline="hover">
    Preview Heading
  </Link>
</Typography>
```

Replace "Preview Heading" with the name of the planet by accessing the `Name` column:

```js
<Typography variant="h6" component="h3" flex={1}>
  <Link component={RouterLink} to="." underline="hover">
    {previewItem['Name']}
  </Link>
</Typography>
```

Here you are doing the same thing you did in the `LabelValueTable` components, except there is one small difference: the variable is wrapped with curly braces `{...}`. This is necessary because in React, curly braces indicate that a variable or function is going to be used in the component, otherwise it would render the literal text, "previewItem['Name']". This wasn't necessary in the `LabelValueTable` because there are already curly braces around the whole `row` prop.

Refresh the page. You should see the planet name at the top of the preview panel.

### Add dynamic images

In this step you will add an image for each planet and display it in the preview panel. First, create a new `images` directory inside the `public/` directory at the top level of the app.

Then, download the `planets.zip` file using the link below:

[Click to download planets.zip](/img/tutorial/planets.zip)

Double-click the `planets.zip` file you downloaded to unpack the files, then drill into the `planets` directory and copy the 8 files. There should be one file for each planet.

Paste the 8 planet images into `public/images`.

Now you are ready to start incorporating the images into the preview panel. Open `PreviewPanel.tsx` and fine the "Physical Characteristics" section you edited earlier:

```js
<Box>
  <Typography fontWeight="medium" mb={1}>
    Physical Characteristics
  </Typography>
  <LabelValueTable
    rows={[
      { label: 'Diameter', value: previewItem['Diameter'] },
      { label: 'Mass', value: previewItem['Mass'] },
      { label: 'Surface Gravity', value: previewItem['SurfaceGravity'] },
    ]}
  />
</Box>
```

Add an `<img>` tag directly above this section. The `img` tag uses the `src` attribute to tell it which image to display. In this case, you want the image to be different depending on the row that is selected. To do that, you are going to inject the planet's name into the path to the image:

```js
<img src={`images/${previewItem['Name']}.jpg`} />
```

Here you are using a JavaScript syntax called a _template literal_. Instead of using quotes to wrap the string, you use backticks (`` ` ``) which lets you embed dynamic content inside the string using a dollar sign and curly braces (`${expression}`).

Refresh your browser and check that the planet images are showing up in the preview panel when you click on a planet row.

This is great but the images are looking a little too big. Let's add a uniform height to the images so that users can more easily see both the image and the characteristics data.

To do this, import the `ImageWrapper` component below the other imports at the top of the file:

```js
import { ImageWrapper } from '../../components/ImageWrapper';
```

Then wrap your image with the `ImageWrapper` component and specify a height using the component's `height` prop:

```js
<ImageWrapper height="300px">
  <img src={`images/${previewItem['Name']}.jpg`} />
</ImageWrapper>
```

To make sure the images are accessible, add alt text to the `img` tag. Alt text is used by screen readers to describe images to users and it is also displayed if the image has trouble loading.

```js
<ImageWrapper height="300px">
  <img
    src={`images/${previewItem['Name']}.jpg`}
    alt={`Satellite image of ${previewItem['Name']}`}
  />
</ImageWrapper>
```

Refresh your page and make sure the images are smaller and all the same height.

![Screenshot of planet images in the preview panel](/img/tutorial/mid-preview-panel-2.png)

Woohoo! You're done with task flow customizations for now.

## Next Steps

At this point you have a task flow that is starting to be tailored to a particular data source and use-case. In the next section you will learn how to customize the app as a whole and make it your own.



================================================
FILE: docs/docs/tutorials/basic-app-with-strudel/4-customize-app.md
================================================
# Customize Your App

For most web applications, it is important to include content and alterations that are unique to your project. In this section you will learn the basics of how to make the app your own by changing the theme, styles, and general content.

## Modify the Global Theme

STRUDEL leverages [MUI](https://mui.com/) theming capabilities to style much of the app. Because STRUDEL uses MUI for its low-level components, using the theme makes it easy to make app-wide changes and keep things consistent. To learn more about how MUI theming works, checkout [their documentation on the topic](https://mui.com/material-ui/customization/theming/). For this tutorial, the explanations will be kept brief.

To get started modifying the theme, open up the theme file in `src/theme.tsx`. In this file you will find the `theme` object. This is where all of the theme values are configured and it has been prepopulated with many default values to make editing the theme simpler.

### Change the Color Palette

Let's start out by changing the color palette for the app. Right now, the primary color for the app is blue (`#1976d2`). Start by changing the `primary` `main` color to amaranth red (`#dd4050`):

```js title="theme.tsx"
primary: {
  main: '#dd4050',
  light: '#42a5f5',
  dark: '#1565c0',
  contrastText: '#fff',
},
```

The essential colors in the palette each have a `main`, `light`, and `dark` version. You can specify the `light` and `dark` versions explicitly or you can remove them and they will be generated automatically based on the `main` color. For now, set the `light` and `dark` versions to bright pink (`#e36370`) and cardinal red (`#bf2231`) respectively.

```js title="theme.tsx"
primary: {
  main: '#dd4050',
  light: '#e36370',
  dark: '#bf2231',
  contrastText: '#fff',
},
```

Refresh the page and see if the blue text and buttons changed to the red tones.

While you are here, also change the `secondary` colors to electric blue tones. Change `main` to `#00e9f5`, `light` to `#5ef6ff`, and `dark` to `#00c2cc`. Because this is a lighter color in general, also change the `contrastText` to black (`#000`). This controls the color of text that is rendered on top of the color and ensures the contrast is still readable and accessible.

```js title="theme.tsx"
secondary: {
  main: '#00e9f5',
  light: '#5ef6ff',
  dark: '#00c2cc',
  contrastText: '#000',
},
```

### Convert to Dark Mode

The new palette is looking good but what if you want to change the more prevalant base and background colors of the app? Let's convert the whole app to dark mode to demonstrate how to do that.

First, find the `mode` option nested under `palette`. This value controls how many of the inner components and various component states are rendered:

```js title="theme.tsx"
palette: {
  mode: 'light',
```

Change the `mode` from `light` to `dark`:

```js title="theme.tsx"
palette: {
  mode: 'dark',
```

You also need to adjust the `default` background color and the `paper` background color. To do this, find those two options nested under `palette.background`. Set `background.default` to eerie black (`#191919`) and `background.paper` to a lighter eerie black (`#232323`):

```js title="theme.tsx"
background: {
  default: '#191919',
  paper: '#232323',
},
```

Refresh the page and see how the new dark mode looks.

### Change the Default Font

The theme also controls the default font used throughout the app. All font properties are nested inside of the `typography` property. Try changing the default `fontFamily` from `Helvetica` to `Avenir`:

```js title="theme.tsx"
typography: {
  htmlFontSize: 16,
  fontFamily: '"Avenir", "Verdana", "Arial", sans-serif',
  fontSize: 14,
  fontWeightLight: 300,
  fontWeightRegular: 400,
  fontWeightMedium: 500,
  fontWeightBold: 700,
},
```

Refresh the page and see if the font has changed. Some devices may not support `Avenir` and will instead show one of the backup fonts.

## Modify Specific Styles

You just learned how to modify the global app theme. Now let's learn how to customize the style of a specific component. In this step you will change the color of the top level navigation bar.

Open the component for the navigation bar in `src/components/TopBar.tsx` and find the `AppBar` component:

```jsx title="TopBar.tsx"
<AppBar
  color="default"
  position="static"
  component="nav"
  sx={{
    backgroundColor: 'white',
    borderBottom: '1px solid',
    borderBottomColor: 'grey.300',
    boxShadow: 'none',
  }}
>
```

There are many ways to modify the styles of the elements in a component or on a page. In this tutorial you will use the MUI `sx` prop to change the styles of specific components. It's possible to use traditional methods like CSS classes for this too, but the `sx` prop allows you to easily utilize the global theme and create dynamic styles and states. You can read more about the `sx` prop in the [MUI documentation](https://mui.com/material-ui/customization/how-to-customize/).

To change the background color of the `AppBar` add the `sx` prop and set the `backgroundColor` property to `primary.main`:

```jsx title="TopBar.tsx"
<AppBar
  color="default"
  position="static"
  component="nav"
  sx={{
    backgroundColor: 'primary.main',
    borderBottom: '1px solid',
    borderBottomColor: 'grey.300',
    boxShadow: 'none',
  }}
>
```

The `primary.main` string is a reference to the value in the `theme.palette` object in `src/theme.tsx`. You can reference any value in the theme's `palette` inside of the `sx` prop. You can also just as easily use an explicit color code.

You may have noticed that the color of the navigation bar changed, but now the links are not very readable because they are also red. Use the `sx` prop to change the text of each `AppLink` component to white (`#ffffff`):

```jsx title="TopBar.tsx"
<AppLink to="/" sx={{ color: '#ffffff' }}>
  <ImageWrapper height={30}>
    <img
      src={cleanPath(
        `${import.meta.env.BASE_URL}/strudel-logo-icon.png`
      )}
    />
  </ImageWrapper>
</AppLink>
<AppLink to="/" sx={{ color: '#ffffff' }}>
  <Typography variant="h6" component="div" fontWeight="bold">
    Planets
  </Typography>
</AppLink>
<AppLink to="/solar-system" sx={{ color: '#ffffff' }}>
  Solar System
</AppLink>
```

Refresh the page to see the new navigation bar.

You can also use the `sx` prop to make advanced style changes like changing the hover state of an element. To do add a different style for the hover state, add a new property to the `sx` object called `'&:hover'`. You can then give this new property its own object of styles which tells the component how it should look when it is being hovered by a user's cursor.

Add a hover state style to the Solar System `AppLink` so that its color is `secondary.light` on hover:

```jsx title="TopBar.tsx"
<AppLink
  to="/solar-system"
  sx={{
    color: '#ffffff',
    '&:hover': {
      color: 'secondary.light',
    },
  }}
>
  Solar System
</AppLink>
```

Refresh the page and watch the Solar System link change color when you mouse over it.

## Add a Project Logo

Now, let's replace the "Tutorial Science App" title in the navigation bar with a logo for a project. First, download the tutorial app logo from GitHub:

[Click to open example-logo.png](/img/tutorial/example-logo.png). Then right-click the image and click "Save Image As..."

Place `example-logo.png` in the `public` folder alongside your other images.

Now, go back to the `TopBar.tsx` component in `src/components`. Find the `<ImageWrapper>` component and replace "strudel-logo-icon.png" with "example-logo.png":

```jsx title="TopBar.tsx"
<ImageWrapper height={30}>
  <img src={cleanPath(`${import.meta.env.BASE_URL}/example-logo.png`)} />
</ImageWrapper>
```

You can also delete the extra `<AppLink>` that says "Planets" now that we have our logo in the bar. Delete the following lines:

```jsx title="TopBar.tsx"
<AppLink to="/">
  <Typography variant="h6" component="div" fontWeight="bold">
    My Project
  </Typography>
</AppLink>
```

Save the file and you should see your new logo in the navbar.

Hooray! You are all done customizing app styles for this tutorial.

## Next Steps

In the last section of this tutorial, you will put what you have learned together to edit the app's home page.



================================================
FILE: docs/docs/tutorials/basic-app-with-strudel/5-customize-home-page.md
================================================
# Customize the Home Page

STRUDEL generates a default home page in `src/pages/index.tsx`. In this section you will add some content, images, and links to the home page.

First, let's remove the contents of the existing home page. Replace the contents of `src/pages/index.tsx` with the following barebones component:

```jsx title="index.tsx"
import { Container } from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';

export const Route = createFileRoute('/')({
  component: Index,
});

/**
 * Home page component that renders at the root route /
 */
function Index() {
  return (
    <Container
      maxWidth="lg"
      sx={{
        marginTop: 3,
        marginBottom: 3,
      }}
    >
      My home page
    </Container>
  );
}
```

Now, let's add a title. To add a title, use the `Typography` component from MUI. This is a general component for different variations of text. You can read more about the `Typography` component on the[ MUI `Typography` documentation page](https://mui.com/material-ui/react-typography/).

Add the `Typography` component to the `'@mui/material'` import:

```jsx title="index.tsx"
import { Container, Typography } from '@mui/material';
```

Then add a `Typography` title component inside of the `<Container>` component:

```jsx title="index.tsx"
<Container
  maxWidth="lg"
  sx={{
    marginTop: 3,
    marginBottom: 3,
  }}
>
  <Typography variant="h1">Planets of the Solar System</Typography>
</Container>
```

The `variant` prop is used to specify the kind of text to display in the component. The `h1` option stands for "Heading 1" and it's used for top-level page headings. If you look at the new title in the browser, you may notice that the default `h1` size is quite large. Make it smaller by setting `fontSize` to `2rem`.

```jsx title="index.tsx"
<Typography variant="h1" fontSize="2rem">
  Planets of the Solar System
</Typography>
```

That looks better. Now, let's add a description section underneath. For this section you are going to use two new components: `Paper` and `Stack`. These are both components from MUI. The `Paper` component is used to wrap content in an elevated panel and the `Stack` component is used to organize content in vertical or horizontal layouts with equal spacing. Learn detailed information about [Paper](https://mui.com/material-ui/react-paper/) and [Stack](https://mui.com/material-ui/react-stack/) in the MUI docs.

Here is the text to use for the description section (from [Wikipedia](https://en.wikipedia.org/wiki/Solar_System)):

> The Solar System is the gravitationally bound system of the Sun and the objects that orbit it. The largest of these objects are the eight planets, which in order from the Sun are four terrestrial planets (Mercury, Venus, Earth and Mars); two gas giants (Jupiter and Saturn); and two ice giants (Uranus and Neptune). The Solar System developed 4.6 billion years ago when a dense region of a molecular cloud collapsed, forming the Sun and a protoplanetary disc.

First add `Paper` to the `'@material/ui'` imports:

```jsx title="index.tsx"
import { Container, Paper, Typography } from '@mui/material';
```

Then add a new `Paper` component underneath the title's `Typography` and embed a `Typography` component with the description text from above:

```jsx title="index.tsx"
<Paper
  sx={{
    padding: 2,
  }}
>
  <Typography>
    The Solar System is the gravitationally bound system of the Sun and the
    objects that orbit it. The largest of these objects are the eight planets,
    which in order from the Sun are four terrestrial planets (Mercury, Venus,
    Earth and Mars); two gas giants (Jupiter and Saturn); and two ice giants
    (Uranus and Neptune). The Solar System developed 4.6 billion years ago when
    a dense region of a molecular cloud collapsed, forming the Sun and a
    protoplanetary disc.
  </Typography>
</Paper>
```

Now create some space between the `Paper` and title `Typography` components by wrapping them in a `Stack` component. First add `Stack` to the `'@material/ui'` imports:

```jsx title="index.tsx"
import { Container, Paper, Stack, Typography } from '@mui/material';
```

Then wrap both components inside of a `Stack`:

```jsx title="index.tsx"
<Stack>
  <Typography variant="h1" fontSize="2rem">
    Planets of the Solar System
  </Typography>
  <Paper
    sx={{
      padding: 2,
    }}
  >
    <Typography>
      The Solar System is the gravitationally bound system of the Sun and the
      objects that orbit it. The largest of these objects are the eight planets,
      which in order from the Sun are four terrestrial planets (Mercury, Venus,
      Earth and Mars); two gas giants (Jupiter and Saturn); and two ice giants
      (Uranus and Neptune). The Solar System developed 4.6 billion years ago
      when a dense region of a molecular cloud collapsed, forming the Sun and a
      protoplanetary disc.
    </Typography>
  </Paper>
</Stack>
```

That's looking pretty good!

## Next Steps

In the last section you will find resources to continue building your app and learning the STRUDEL Tech Stack.



================================================
FILE: docs/docs/tutorials/basic-app-with-strudel/6-continue-learning.md
================================================
# Continue Learning

Congratulations on building your first STRUDEL app! You are well on your way to creating a product that is usable, understandable, and impactful. Of course, the journey does not end here. Continue building on what you learned in this tutorial with the links below.

- [External Learning Resources](https://strudel.science/strudel-kit/docs/external-resources)
- [Task Flows](https://strudel.science/design-system/task-flows/overview/)
- [Community Discussions](https://github.com/orgs/strudel-science/discussions)
- [STRUDEL Events](https://strudel.science/engage/events/)
- [Connect and Contribute](https://strudel.science/engage/contribute/)



================================================
FILE: docs/src/components/CodeAndPreviewButtons.tsx
================================================
import React, { HTMLAttributes, ReactNode } from 'react';
import { Button, Stack } from '@mui/material';
import CodeIcon from '@mui/icons-material/Code';
import VisibilityIcon from '@mui/icons-material/Visibility';

export interface CodeAndPreviewButtonsProps {
  codeUrl?: string;
  previewUrl?: string;
}

/**
 * Display a Code and a Preview button side-by-side that link to respective locations
 */
export const CodeAndPreviewButtons: React.FC<CodeAndPreviewButtonsProps> = ({
  codeUrl,
  previewUrl,
}) => {
  return (
    <Stack direction="row" spacing={1}>
      {codeUrl && (
        <a href={codeUrl} target="_blank">
          <Button
            variant="contained"
            color="secondary"
            startIcon={<CodeIcon />}
            size="small"
          >
            <span>Code</span>
          </Button>
        </a>
      )}
      {previewUrl && (
        <a href={previewUrl} target="_blank">
          <Button
            variant="contained"
            color="secondary"
            startIcon={<VisibilityIcon />}
            size="small"
          >
            <span>Preview</span>
          </Button>
        </a>
      )}
    </Stack>
  );
};



================================================
FILE: docs/src/components/LinkCard.tsx
================================================
import React, { HTMLAttributes, ReactNode } from 'react';
import { Box, Card, CardActionArea, CardActionAreaProps, CardContent, Stack, Typography } from '@mui/material';

export interface LinkCardProps {
  href?: string;
  target?: React.HTMLAttributeAnchorTarget;
  label?: ReactNode;
  image?: ReactNode;
  description?: ReactNode;

}

/**
 * Component for displaying a flat list of label-value pairs
 * in a two column table.
 */
export const LinkCard: React.FC<LinkCardProps> = ({
  href,
  target = '_blank',
  label,
  image,
  description
}) => {
  return (
    <Card
      sx={{ 
        background: 'none',
        border: '1px solid',
        height: '100%',
        '.MuiCardActionArea-root:hover': {
          textDecoration: 'none'
        }
      }}>
      <CardActionArea href={href} target={target} sx={{ height: '100%' }}>
        <CardContent>
          <Stack spacing={1}>
            <Stack direction="row" spacing={1} alignItems="center">
              {image && (
                <Box
                  sx={{
                    height: '40px',
                    position: 'relative',
                    'img': {
                      height: '100%',
                      width: 'auto'
                    }
                  }}
                >
                  {image}
                </Box>
              )}
              <Typography gutterBottom variant="h6" component="div">
                {label}
              </Typography>
            </Stack>
            {description && (
              <Typography variant="body2" color="text.secondary">
                {description}
              </Typography>
            )}
          </Stack>
        </CardContent>
      </CardActionArea>
    </Card>
  )
}


================================================
FILE: docs/src/components/PropsTable.tsx
================================================
import React, { ReactNode } from 'react';
import { Table, TableBody, TableCell, TableProps, TableRow } from '@mui/material';

export interface PropsTableProps {
  propsData: any
}

/**
 * Component for displaying a flat list of label-value pairs
 * in a two column table.
 */
export const PropsTable: React.FC<PropsTableProps> = ({
  propsData
}) => {
  return (
    <Table 
      size="small"
      aria-label="label value table"
      sx={{
        color: 'white' 
      }}
    >
      <TableBody>
        <TableRow>
          <TableCell>
            Name
          </TableCell>
          <TableCell>
            Description
          </TableCell>
          <TableCell>
            Type
          </TableCell>
          <TableCell>
            Required
          </TableCell>
        </TableRow>
        {Object.keys(propsData).map((prop, i) => (
          <TableRow key={`${prop}-${i}`}>
            <TableCell>
              {prop}
            </TableCell>
            <TableCell>
              {propsData[prop].description}
            </TableCell>
            <TableCell>
              {propsData[prop].tsType.name}
            </TableCell>
            <TableCell>
              {JSON.stringify(propsData[prop].required)}
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}


================================================
FILE: docs/src/css/custom.css
================================================
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: #0143cf;
  --ifm-color-primary-dark: #180333;
  --ifm-color-primary-darker: #180333;
  --ifm-color-primary-darkest: #180333;
  --ifm-color-primary-light: #d6b5ff;
  --ifm-color-primary-lighter: #d6b5ff;
  --ifm-color-primary-lightest: #d6b5ff;
  --ifm-code-font-size: 95%;
  --ifm-table-stripe-background: #eeeeee;
  --ifm-background-color: #ffffff;
  --ifm-background-surface-color: #ffffff;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.1);
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
/* [data-theme='dark'] {
  --ifm-color-primary: #25c2a0;
  --ifm-color-primary-dark: #21af90;
  --ifm-color-primary-darker: #1fa588;
  --ifm-color-primary-darkest: #1a8870;
  --ifm-color-primary-light: #29d5b0;
  --ifm-color-primary-lighter: #32d8b4;
  --ifm-color-primary-lightest: #4fddbf;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
} */

html[data-theme='dark'] {
  --ifm-color-primary: #d6b5ff;
  --ifm-color-primary-dark: #4f4063;
  --ifm-color-primary-darker: #4f4063;
  --ifm-color-primary-darkest: #4f4063;
  --ifm-color-primary-light: #f7f0ff;
  --ifm-color-primary-lighter: #f7f0ff;
  --ifm-color-primary-lightest: #f7f0ff;
  --ifm-table-stripe-background: #2e2e38;
  --ifm-background-color: #1e1e24;
  --ifm-background-surface-color: #2e2e38;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
}

.footer {
  --ifm-footer-background-color: #eeeeee;
  --ifm-footer-color: #000000;
  --ifm-footer-title-color: #000000;
  --ifm-footer-link-color: var(--ifm-color-primary);
}

html[data-theme='dark'] .footer--dark {
  --ifm-footer-background-color: #2e2e38;
  --ifm-footer-color: #ffffff;
  --ifm-footer-title-color: #ffffff;
  --ifm-footer-link-color: var(--ifm-color-primary);
}

.theme-doc-sidebar-container {
  margin-right: var(--ifm-spacing-horizontal);
}

.theme-doc-sidebar-item-category-level-1 > .menu__list {
  padding-left: 0;
}

.theme-doc-sidebar-item-category-level-1 > .menu__list-item-collapsible {
  text-transform: uppercase;
  font-size: 0.85rem;
  opacity: 0.6;
}

.theme-doc-sidebar-item-category-level-1
  > .menu__list-item-collapsible
  .menu__link--active {
  color: var(--ifm-menu-color);
}

/* Custom styles for the @docusaurus/theme-live-codeblock */
.playgroundHeader_node_modules-\@docusaurus-theme-live-codeblock-lib-theme-Playground-styles-module {
  display: none;
}

.playgroundPreview_node_modules-\@docusaurus-theme-live-codeblock-lib-theme-Playground-styles-module {
  margin-bottom: 0.5rem;
  border-radius: var(--ifm-code-border-radius);
}

.docs-doc-id-examples\/basic-sandbox .container,
.docs-doc-id-examples\/basic-sandbox .container .row,
.docs-doc-id-examples\/basic-sandbox .container .row .col,
.docs-doc-id-examples\/climate-data-analysis-platform .container,
.docs-doc-id-examples\/climate-data-analysis-platform .container .row,
.docs-doc-id-examples\/climate-data-analysis-platform .container .row .col {
  max-width: 100% !important;
}



================================================
FILE: docs/src/pages/index.module.css
================================================
/**
 * CSS files with the .module.css suffix will be treated as CSS modules
 * and scoped locally.
 */

.heroBanner {
  padding: 4rem 0;
  text-align: center;
  position: relative;
  overflow: hidden;
}

@media screen and (max-width: 996px) {
  .heroBanner {
    padding: 2rem;
  }
}

.buttons {
  display: flex;
  align-items: center;
  justify-content: center;
}



================================================
FILE: docs/src/pages/markdown-page.md
================================================
---
title: Markdown page example
---

# Markdown page example

You don't need React to write simple standalone pages.



================================================
FILE: docs/src/theme/Root.tsx
================================================
import { experimental_extendTheme as extendTheme, Experimental_CssVarsProvider as CssVarsProvider, getInitColorSchemeScript } from '@mui/material';
import React from 'react';

const theme = extendTheme({
  colorSchemes: {
    light: {
      palette: {
        primary: {
          main: '#ff5252',
        },
        // ...
      },
    },
    dark: {
      palette: {
        primary: {
          main: '#52ffff',
        },
        // ...
      },
    },
  },
  // ...other properties
});

function Root({ children }) {
  return (
    <>
      {getInitColorSchemeScript()}
      <CssVarsProvider theme={theme}>{children}</CssVarsProvider>
    </>
  );
}

export default Root;


================================================
FILE: docs/src/theme/ColorModeToggle/index.tsx
================================================
import React, { useEffect } from 'react';
import ColorModeToggle from '@theme-original/ColorModeToggle';
import type ColorModeToggleType from '@theme/ColorModeToggle';
import type {WrapperProps} from '@docusaurus/types';
import { useColorScheme } from '@mui/material';

type Props = WrapperProps<typeof ColorModeToggleType>;

export default function ColorModeToggleWrapper(props: Props): JSX.Element {
  // Get the MUI hook
  const { setMode } = useColorScheme();

  // Extract the docusaurus theme from the component properties
  const { value } = props;

  // Whenever the theme changes in docusaurus, trigger the change in MUI
  useEffect(() => {
    setMode(value);
  }, [value]);
  
  return (
    <>
      <ColorModeToggle {...props} />
    </>
  );
}



================================================
FILE: docs/src/theme/ReactLiveScope/index.tsx
================================================
import React from 'react';
// import * as strudel from 'strudel-components';

// Add react-live imports you need here
const ReactLiveScope = {
  React,
  ...React,
  // ...strudel,
};

export default ReactLiveScope;



================================================
FILE: docs/static/.nojekyll
================================================
[Empty file]


================================================
FILE: public/robots.txt
================================================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:



================================================
FILE: public/data/.gitkeep
================================================
[Empty file]


================================================
FILE: public/dummy-data/contributor_datasets.json
================================================
[
  {
    "id": 0,
    "title": "Data from Decadal Change in Groundwater Quality Web Site (1988 - 2012)",
    "publication_date": "2018-02-02",
    "start_date": "1988-01-01",
    "end_date": "2010-12-31",
    "citation": "Lindsey, B.D., Johnson, T.D., and Belitz, Kenneth, 2018, Data from Decadal Change in Groundwater Quality Web Site, 1988-2012: U.S. Geological Survey data release, https://doi.org/10.5066/F7PC30WD.",
    "doi": "10.5066/F7PC30WD",
    "summary": "Groundwater quality data were collected in 5,000 wells between 1988-2001 by the National Water-Quality Assessment Project. About 1,500 of these wells were sampled again between 2002-2012 to evaluate decadal changes in groundwater quality. Monitoring wells, domestic supply wells, and some public supply wells were included in this study.",
    "tags": [
      "NAWQA",
      "National Water Quality Program",
      "USGS Science Data Catalog (SDC)",
      "Cycle 3",
      "groundwater quality",
      "trends",
      "water quality"
    ],
    "category": "Groundwater",
    "purpose": "Data were collected as a part of the NAWQA Land use studies or Major aquifer studies. Initially data were collected to characterize the quality of shallow and medium depths of groundwater in the nation. Subsequent samples were collected to evaluate changes in concentrations over a decadal time span. Mapping criteria and benchmarks: The NAWQA Project has developed an interactive mapping tool that displays decadal changes in concentrations.",
    "point_of_contact": "Bruce  D. Lindsey",
    "originator": "Bruce  D. Lindsey, Tyler D Johnson",
    "metadata_contact": "Jennifer B Sharpe",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 1,
    "title": "Fire perimeter data for the 1987 Black Dragon Fire in China (1987)",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Geospatial data were developed to characterize pre-fire biomass, burn severity, and biomass consumed for the Black Dragon Fire that burned in northern China in 1987. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Fires",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 2,
    "title": "Flood Inundation Extent and Depth in Selected Areas of Southern U.S. (March 2016)",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Heavy rainfall occurred across Louisiana, Texas, Arkansas, and Mississippi in March 2016 as a result of a slow-moving southward dip in the jetstream , funneling tropical moisture into Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Louisiana",
      "Mississippi",
      "Texas",
      "Floods",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Floods",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 3,
    "title": "Bathymetric survey of the Brandon Road Dam Spillway, Joliet, Illinois  (May 2015)",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Bathymetric survey data of the Brandon Road Dam spillway was collected on May 27 and May 28, 2015 by the US Geological Survey (USGS) using Trimble Real-Time Kinematic Global Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Dam",
      "GPS measurement",
      "Brandon Road Lock and Dam",
      "Floods",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Groundwater",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 4,
    "title": "Data from mercury intrusion porosimetry conducted on samples of a mudstone underlying the Naval Air Warfare Center, West Trenton, New Jersey",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "This data set presents the results of conducting Mercury Intrusion Porosimetry on core samples of the mudstone underlying the Naval Air Warfare Center, West Trenton, New Jersey Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Sedimentary rock",
      "porosity",
      "West Trenton",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Groundwater",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  }
]



================================================
FILE: public/dummy-data/datasets.json
================================================
[
  {
    "id": 0,
    "title": "Data from Decadal Change in Groundwater Quality Web Site (1988 - 2012)",
    "publication_date": "2018-02-02",
    "start_date": "1988-01-01",
    "end_date": "2010-12-31",
    "citation": "Lindsey, B.D., Johnson, T.D., and Belitz, Kenneth, 2018, Data from Decadal Change in Groundwater Quality Web Site, 1988-2012: U.S. Geological Survey data release, https://doi.org/10.5066/F7PC30WD.",
    "doi": "10.5066/F7PC30WD",
    "summary": "Groundwater quality data were collected in 5,000 wells between 1988-2001 by the National Water-Quality Assessment Project. About 1,500 of these wells were sampled again between 2002-2012 to evaluate decadal changes in groundwater quality. Monitoring wells, domestic supply wells, and some public supply wells were included in this study.",
    "tags": [
      "NAWQA",
      "National Water Quality Program",
      "USGS Science Data Catalog (SDC)",
      "Cycle 3",
      "groundwater quality",
      "trends",
      "water quality"
    ],
    "category": "Groundwater",
    "purpose": "Data were collected as a part of the NAWQA Land use studies or Major aquifer studies. Initially data were collected to characterize the quality of shallow and medium depths of groundwater in the nation. Subsequent samples were collected to evaluate changes in concentrations over a decadal time span. Mapping criteria and benchmarks: The NAWQA Project has developed an interactive mapping tool that displays decadal changes in concentrations.",
    "point_of_contact": "Bruce  D. Lindsey",
    "originator": "Bruce  D. Lindsey, Tyler D Johnson",
    "metadata_contact": "Jennifer B Sharpe",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "USGS Data Release Products",
        "url": "#"
      },
      {
        "title": "National Water Quality Assessment Project",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 1,
    "title": "Fire perimeter data for the 1987 Black Dragon Fire in China (1987)",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Geospatial data were developed to characterize pre-fire biomass, burn severity, and biomass consumed for the Black Dragon Fire that burned in northern China in 1987. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Fires",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 2,
    "title": "Flood Inundation Extent and Depth in Selected Areas of Southern U.S. (March 2016)",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Heavy rainfall occurred across Louisiana, Texas, Arkansas, and Mississippi in March 2016 as a result of a slow-moving southward dip in the jetstream , funneling tropical moisture into Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Louisiana",
      "Mississippi",
      "Texas",
      "Floods",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Floods",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 3,
    "title": "Bathymetric survey of the Brandon Road Dam Spillway, Joliet, Illinois  (May 2015)",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Bathymetric survey data of the Brandon Road Dam spillway was collected on May 27 and May 28, 2015 by the US Geological Survey (USGS) using Trimble Real-Time Kinematic Global Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Dam",
      "GPS measurement",
      "Brandon Road Lock and Dam",
      "Floods",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Groundwater",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 4,
    "title": "Data from mercury intrusion porosimetry conducted on samples of a mudstone underlying the Naval Air Warfare Center, West Trenton, New Jersey",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "This data set presents the results of conducting Mercury Intrusion Porosimetry on core samples of the mudstone underlying the Naval Air Warfare Center, West Trenton, New Jersey Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Sedimentary rock",
      "porosity",
      "West Trenton",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Groundwater",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 5,
    "title": "Discovery of Two Biological Mechanisms for Acetylene Metabolism in a Single Organism",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Acetylene fermentation assays, nitrogen fixation assays, and growth studies were performed with Pelobacter sp. strain SFB93 and Pelobacter acetylenicus DSM3246. Data includes concentrations of acetylene and ethylene over time, and growth measured with OD680 and cell counts.",
    "tags": [
      "Genetics",
      "Ecology",
      "Environmental health",
      "Geo Chemistry",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Biology",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 6,
    "title": "Annual California Sea Otter Census - Spring Census Summary (Apr - Jul 2017)",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "The spring 2017 mainland sea otter count began on April 30, and although the shore-based counts were completed by May 12, 2017, the aerial counts were not completed until July 12. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "California",
      "Sea Otters",
      "Census",
      "Coastal",
      "USGS Data Catalog (SDC)"
    ],
    "category": "Biology",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 7,
    "title": "Ullamco nulla eiusmod tempor nisi aute",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Earthquakes",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 8,
    "title": "Sint aliqua ut ut laboris eiusmod incididunt duis laboris anim",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Fires",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 9,
    "title": "Magna ea aliqua et id laboris incididunt pariatur veniam",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Fires",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 10,
    "title": "Anim ea laborum elit ad fugiat deserunt fugiat veniam cillum id",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Groundwater",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 11,
    "title": "Consectetur proident sint adipisicing velit aliquip laborum nostrud non",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Floods",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 12,
    "title": "Id duis ut ullamco amet occaecat duis fugiat nostrud laboris ipsum esse cupidatat ad",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Biology",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 13,
    "title": "Non magna officia voluptate proident sunt occaecat dolore eiusmod duis deserunt",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Earthquakes",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 14,
    "title": "Fugiat in Lorem fugiat sunt et sit quis elit amet cillum reprehenderit aliqua occaecat do",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Fires",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 15,
    "title": "Tempor adipisicing incididunt laboris sit dolore commodo ea qui deserunt nostrud veniam eu est",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Floods",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 16,
    "title": "Et adipisicing laboris mollit officia non esse consequat in commodo do Lorem",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Earthquakes",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 17,
    "title": "Veniam ut exercitation proident eiusmod enim ipsum culpa",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Groundwater",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  },
  {
    "id": 18,
    "title": "Cupidatat pariatur commodo sint qui in minim aliquip anim cillum eu sunt amet do aliqua",
    "publication_date": "2023-01-01",
    "start_date": "2010-01-01",
    "end_date": "2021-01-01",
    "citation": "Labore proident do aute et esse adipisicing veniam eiusmod culpa pariatur sunt officia.",
    "doi": "0000000000",
    "summary": "Est deserunt elit aliquip labore duis nostrud mollit sunt proident cillum. Mollit nisi sint laboris esse labore velit laboris. Ipsum id laborum et dolor laboris ut sint officia voluptate. Ipsum consectetur fugiat laboris sit Lorem duis minim fugiat.",
    "tags": [
      "Boreal forest",
      "Carbon and greenhouse gas emissions",
      "China",
      "Ecology",
      "Forestry"
    ],
    "category": "Fires",
    "purpose": "Nostrud ullamco ea id consequat ex. Tempor deserunt laborum amet ex quis culpa laborum Lorem Lorem sunt do sit excepteur. Sunt ea velit non magna ut Lorem magna eu aute aliquip.",
    "point_of_contact": "Ernest O. Lawrence",
    "originator": "Darleane C. Hoffman",
    "metadata_contact": "Glenn T. Seaborg",
    "publisher": "U.S Geological Survey",
    "distributor": "U.S Geological Survey - ScienceBase",
    "usgs_mission_area": "Water Resources",
    "communities": [
      {
        "title": "Veniam fugiat commodo esse ex sunt sit enim.",
        "url": "#"
      },
      {
        "title": "Duis amet voluptate adipisicing irure officia excepteur consectetur.",
        "url": "#"
      }
    ],
    "associated_projects": [
      {
        "title": "Data from Decadal Change in Groundwater Quality Web Site, 1988-2016",
        "url": "#"
      }
    ],
    "attached_files": [
      {
        "file_id": 0,
        "file_name": "Laborum-velit-in-minim.zip",
        "file_size": "42.7 MB",
        "description": "Ad qui Lorem ea voluptate"
      },
      {
        "file_id": 1,
        "file_name": "Duis-qui-consectetur.xml",
        "file_size": "8 KB",
        "description": "Adipisicing deserunt anim reprehenderit"
      }
    ]
  }
]



================================================
FILE: public/dummy-data/experiment_detail.json
================================================
{
  "id": 45,
  "experiment_name": "Experiment Cricket",
  "start_time": "12/16/2023, 3:01:07 PM",
  "end_time": null,
  "status": "Running",
  "events": [
    {
      "id": 10,
      "event_type": "Chirp",
      "event_time": "12/17/2023, 9:09:15 PM",
      "confidence": 97
    },
    {
      "id": 9,
      "event_type": "Chirp",
      "event_time": "12/17/2023, 8:11:19 PM",
      "confidence": 98
    },
    {
      "id": 8,
      "event_type": "Hop",
      "event_time": "12/17/2023, 4:33:53 PM",
      "confidence": 64
    },
    {
      "id": 7,
      "event_type": "Hop",
      "event_time": "12/17/2023, 11:09:15 AM",
      "confidence": 97
    },
    {
      "id": 6,
      "event_type": "Hop",
      "event_time": "12/17/2023, 11:02:05 AM",
      "confidence": 99
    },
    {
      "id": 5,
      "event_type": "Hop",
      "event_time": "12/17/2023, 7:23:32 AM",
      "confidence": 75
    },
    {
      "id": 4,
      "event_type": "Chirp",
      "event_time": "12/17/2023, 7:03:44 PM",
      "confidence": 99
    },
    {
      "id": 3,
      "event_type": "Chirp",
      "event_time": "12/17/2023, 3:26:42 PM",
      "confidence": 97
    },
    {
      "id": 2,
      "event_type": "Chirp",
      "event_time": "12/16/2023, 11:55:21 PM",
      "confidence": 97
    },
    {
      "id": 1,
      "event_type": "Chirp",
      "event_time": "12/16/2023, 10:08:10 PM",
      "confidence": 98
    },
    {
      "id": 0,
      "event_type": "Chirp",
      "event_time": "12/16/2023, 9:45:10 PM",
      "confidence": 97
    }
  ],
  "notes": [
    {
      "id": 2,
      "created_time": "12/17/2023, 4:00:29 PM",
      "content": "Aute amet aute irure in consectetur enim incididunt aute consectetur."
    },
    {
      "id": 1,
      "created_time": "12/17/2023, 7:00:25 AM",
      "content": "Labore elit cupidatat eiusmod sunt aliquip pariatur quis."
    },
    {
      "id": 0,
      "created_time": "12/16/2023, 11:59:20 PM",
      "content": "Culpa id officia laborum cupidatat dolor mollit."
    }
  ]
}



================================================
FILE: public/dummy-data/experiments.json
================================================
[
  {
    "id": 45,
    "experiment_name": "Experiment Cricket",
    "start_time": "12/16/2023, 3:01:07 PM",
    "end_time": null,
    "status": "Running"
  },
  {
    "id": 44,
    "experiment_name": "Experiment Mouse",
    "start_time": "12/15/2023, 1:40:10 PM",
    "end_time": null,
    "status": "Running"
  },
  {
    "id": 8,
    "experiment_name": "Experiment Fox",
    "start_time": "6/27/2023, 1:42:11 PM",
    "end_time": "6/30/2023, 5:15:29 AM",
    "status": "Complete"
  },
  {
    "id": 14,
    "experiment_name": "Experiment Elephant",
    "start_time": "10/15/2023, 1:42:11 PM",
    "end_time": "10/18/2023, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 30,
    "experiment_name": "Experiment Hippo",
    "start_time": "6/27/2023, 1:42:11 PM",
    "end_time": "6/30/2023, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 43,
    "experiment_name": "Experiment Cherry",
    "start_time": "5/20/2023, 9:34:45 AM",
    "end_time": "5/22/2023, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 23,
    "experiment_name": "Experiment Lime",
    "start_time": "4/22/2023, 9:34:45 AM",
    "end_time": "4/24/2023, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 39,
    "experiment_name": "Experiment Giraffe",
    "start_time": "4/28/2023, 9:34:45 AM",
    "end_time": "4/30/2023, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 26,
    "experiment_name": "Experiment Horse",
    "start_time": "2/17/2023, 1:42:11 PM",
    "end_time": "2/20/2023, 5:15:29 AM",
    "status": "Complete"
  },
  {
    "id": 11,
    "experiment_name": "Experiment Sloth",
    "start_time": "1/14/2023, 9:34:45 AM",
    "end_time": "1/16/2023, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 35,
    "experiment_name": "Experiment Gargoyle",
    "start_time": "7/10/2023, 9:34:45 AM",
    "end_time": "7/12/2023, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 19,
    "experiment_name": "Experiment Lion",
    "start_time": "8/6/2023, 9:34:45 AM",
    "end_time": "8/8/2023, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 3,
    "experiment_name": "Experiment Jasmine",
    "start_time": "6/5/2023, 9:34:45 AM",
    "end_time": "6/7/2023, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 6,
    "experiment_name": "Experiment Crocodile",
    "start_time": "9/20/2022, 1:42:11 PM",
    "end_time": "9/23/2022, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 32,
    "experiment_name": "Experiment Lemon",
    "start_time": "9/6/2022, 11:27:18 AM",
    "end_time": "9/8/2022, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 17,
    "experiment_name": "Experiment Iceberg",
    "start_time": "7/8/2022, 9:11:04 AM",
    "end_time": "7/10/2022, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 41,
    "experiment_name": "Experiment Diamond",
    "start_time": "6/19/2022, 9:11:04 AM",
    "end_time": "6/21/2022, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 21,
    "experiment_name": "Experiment Ruby",
    "start_time": "6/12/2022, 9:11:04 AM",
    "end_time": "6/14/2022, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 27,
    "experiment_name": "Experiment Pigeon",
    "start_time": "5/29/2022, 11:27:18 AM",
    "end_time": "5/31/2022, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 13,
    "experiment_name": "Experiment Oregono",
    "start_time": "5/9/2022, 9:11:04 AM",
    "end_time": "5/11/2022, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 28,
    "experiment_name": "Experiment Otter",
    "start_time": "5/1/2022, 11:27:18 AM",
    "end_time": "5/3/2022, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 0,
    "experiment_name": "Experiment Gecko",
    "start_time": "3/14/2022, 11:27:18 AM",
    "end_time": "3/16/2022, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 25,
    "experiment_name": "Experiment Banana",
    "start_time": "3/5/2022, 9:11:04 AM",
    "end_time": "3/7/2022, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 34,
    "experiment_name": "Experiment Thunder",
    "start_time": "12/7/2021, 1:42:11 PM",
    "end_time": "12/10/2021, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 15,
    "experiment_name": "Experiment Tornado",
    "start_time": "12/1/2021, 9:34:45 AM",
    "end_time": "12/3/2021, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 9,
    "experiment_name": "Experiment Wind",
    "start_time": "11/13/2021, 1:42:11 PM",
    "end_time": "11/16/2021, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 29,
    "experiment_name": "Experiment Pufferfish",
    "start_time": "10/14/2021, 9:11:04 AM",
    "end_time": "10/16/2021, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 42,
    "experiment_name": "Experiment Strawberry",
    "start_time": "9/26/2021, 1:42:11 PM",
    "end_time": "9/29/2021, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 22,
    "experiment_name": "Experiment Grape",
    "start_time": "9/19/2021, 1:42:11 PM",
    "end_time": "9/22/2021, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 10,
    "experiment_name": "Experiment Lightning",
    "start_time": "8/30/2021, 1:42:11 PM",
    "end_time": "9/2/2021, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 2,
    "experiment_name": "Experiment Leopard",
    "start_time": "8/22/2021, 1:42:11 PM",
    "end_time": "8/25/2021, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 38,
    "experiment_name": "Experiment Donkey",
    "start_time": "8/15/2021, 1:42:11 PM",
    "end_time": "8/18/2021, 5:15:29 AM",
    "status": "Interrupted"
  },
  {
    "id": 7,
    "experiment_name": "Experiment Walrus",
    "start_time": "5/15/2021, 9:34:45 AM",
    "end_time": "5/17/2021, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 16,
    "experiment_name": "Experiment Basil",
    "start_time": "3/24/2020, 11:27:18 AM",
    "end_time": "3/26/2020, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 18,
    "experiment_name": "Experiment Guava",
    "start_time": "11/28/2020, 9:11:04 AM",
    "end_time": "11/30/2020, 11:27:39 AM",
    "status": "Interrupted"
  },
  {
    "id": 5,
    "experiment_name": "Experiment Kiwi",
    "start_time": "11/7/2020, 9:11:04 AM",
    "end_time": "11/9/2020, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 12,
    "experiment_name": "Experiment Shark",
    "start_time": "6/25/2020, 11:27:18 AM",
    "end_time": "6/27/2020, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 33,
    "experiment_name": "Experiment Turtle",
    "start_time": "5/2/2020, 9:11:04 AM",
    "end_time": "5/4/2020, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 1,
    "experiment_name": "Experiment Dragon",
    "start_time": "4/28/2020, 9:11:04 AM",
    "end_time": "4/30/2020, 11:27:39 AM",
    "status": "Failed"
  },
  {
    "id": 31,
    "experiment_name": "Experiment Lizard",
    "start_time": "2/20/2020, 9:34:45 AM",
    "end_time": "2/22/2020, 2:46:01 PM",
    "status": "Complete"
  },
  {
    "id": 20,
    "experiment_name": "Experiment Apple",
    "start_time": "1/29/2020, 11:27:18 AM",
    "end_time": "1/31/2020, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 36,
    "experiment_name": "Experiment Avocado",
    "start_time": "1/15/2020, 11:27:18 AM",
    "end_time": "1/17/2020, 3:48:52 AM",
    "status": "Complete"
  },
  {
    "id": 4,
    "experiment_name": "Experiment Watermelon",
    "start_time": "1/11/2020, 11:27:18 AM",
    "end_time": "1/13/2020, 3:48:52 AM",
    "status": "Complete"
  }
]



================================================
FILE: public/dummy-data/inputs.json
================================================
[
  {
    "id": 0,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 1,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 2,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 3,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 4,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  }
]



================================================
FILE: public/dummy-data/list.json
================================================
[
  {
    "id": 0,
    "name": "Scenario 1",
    "analysisType": "Sensitivity Analysis",
    "createdDate": "05/24/2023",
    "status": "Running"
  },
  {
    "id": 1,
    "name": "Scenario 2",
    "analysisType": "Sensitivity Analysis",
    "createdDate": "05/24/2023",
    "status": "Draft"
  },
  {
    "id": 2,
    "name": "Scenario 3",
    "analysisType": "Optimization",
    "createdDate": "05/24/2023",
    "status": "Completed"
  },
  {
    "id": 3,
    "name": "Scenario 4",
    "analysisType": "Optimization",
    "createdDate": "05/23/2023",
    "status": "Completed"
  },
  {
    "id": 4,
    "name": "Scenario 5",
    "analysisType": "Optimization",
    "createdDate": "05/23/2023",
    "status": "Completed"
  }
]



================================================
FILE: public/dummy-data/results_bar_chart.json
================================================
[
  {
    "x": ["Category 1", "Category 2", "Category 3"],
    "y": [20, 14, 23],
    "name": "Group 1",
    "type": "bar"
  },
  {
    "x": ["Category 1", "Category 2", "Category 3"],
    "y": [12, 18, 29],
    "name": "Group 2",
    "type": "bar"
  }
]



================================================
FILE: public/dummy-data/results_line_chart.json
================================================
[
  {
    "x": [1, 2, 3, 4],
    "y": [10, 15, 13, 17],
    "type": "scatter"
  },
  {
    "x": [1, 2, 3, 4],
    "y": [16, 5, 11, 9],
    "type": "scatter"
  }
]



================================================
FILE: public/dummy-data/results_table.json
================================================
[
  {
    "id": 0,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 1,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 2,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 3,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  },
  {
    "id": 4,
    "name": "value",
    "unitType": "value",
    "lowerBound": 0,
    "upperBound": 1,
    "constraints": "value"
  }
]



================================================
FILE: public/dummy-data/scenarios.json
================================================
[
  {
    "id": 0,
    "name": "Scenario Dandelion",
    "description": "Ex aliquip consectetur laboris occaecat deserunt nulla aliqua est ut.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 25000000,
    "tss_concentration": 500,
    "cod_concentration": 700,
    "tkn_concentration": 65,
    "acetic_acid_concentration": 0,
    "metric6": 15,
    "metric7": 245,
    "metric8": 9852,
    "metric9": 4,
    "metric10": 0
  },
  {
    "id": 1,
    "name": "Scenario Tulip",
    "description": "Occaecat consequat exercitation minim do ullamco laborum aliquip.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 28000000,
    "tss_concentration": 700,
    "cod_concentration": 300,
    "tkn_concentration": 85,
    "acetic_acid_concentration": 2,
    "metric6": 65,
    "metric7": 290,
    "metric8": 8002,
    "metric9": 1,
    "metric10": 1
  },
  {
    "id": 2,
    "name": "Scenario Orchid",
    "description": "Cupidatat est magna commodo elit ad laborum esse adipisicing cupidatat.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 33000000,
    "tss_concentration": 500,
    "cod_concentration": 700,
    "tkn_concentration": 65,
    "acetic_acid_concentration": 1,
    "metric6": 15,
    "metric7": 209,
    "metric8": 7089,
    "metric9": 3,
    "metric10": 1
  },
  {
    "id": 3,
    "name": "Scenario Sunflower",
    "description": "Irure pariatur fugiat culpa cillum non veniam adipisicing amet.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 28000000,
    "tss_concentration": 400,
    "cod_concentration": 870,
    "tkn_concentration": 77,
    "acetic_acid_concentration": 1,
    "metric6": 20,
    "metric7": 300,
    "metric8": 8076,
    "metric9": 2,
    "metric10": 1
  },
  {
    "id": 4,
    "name": "Scenario Rose",
    "description": "Et ullamco cillum ipsum in culpa irure nostrud.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 31000000,
    "tss_concentration": 650,
    "cod_concentration": 820,
    "tkn_concentration": 40,
    "acetic_acid_concentration": 2,
    "metric6": 18,
    "metric7": 380,
    "metric8": 8000,
    "metric9": 5,
    "metric10": 7
  },
  {
    "id": 5,
    "name": "Scenario Daisy",
    "description": "Mollit veniam occaecat ea velit et officia ut voluptate.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 29000000,
    "tss_concentration": 550,
    "cod_concentration": 900,
    "tkn_concentration": 95,
    "acetic_acid_concentration": 1,
    "metric6": 15,
    "metric7": 270,
    "metric8": 9800,
    "metric9": 3,
    "metric10": 0
  },
  {
    "id": 6,
    "name": "Scenario Azalea",
    "description": "Enim cupidatat nisi enim in ex cillum.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 45000000,
    "tss_concentration": 570,
    "cod_concentration": 490,
    "tkn_concentration": 60,
    "acetic_acid_concentration": 0,
    "metric6": 20,
    "metric7": 300,
    "metric8": 8003,
    "metric9": 2,
    "metric10": 1
  },
  {
    "id": 7,
    "name": "Scenario Zinnia",
    "description": "Esse consequat mollit nulla enim esse duis excepteur.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 23000000,
    "tss_concentration": 480,
    "cod_concentration": 900,
    "tkn_concentration": 68,
    "acetic_acid_concentration": 0,
    "metric6": 44,
    "metric7": 479,
    "metric8": 6809,
    "metric9": 5,
    "metric10": 2
  },
  {
    "id": 8,
    "name": "Scenario Daffodil",
    "description": "Irure nulla veniam elit laborum dolor non culpa deserunt veniam laborum voluptate qui esse.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 39000000,
    "tss_concentration": 200,
    "cod_concentration": 880,
    "tkn_concentration": 48,
    "acetic_acid_concentration": 3,
    "metric6": 20,
    "metric7": 450,
    "metric8": 9052,
    "metric9": 2,
    "metric10": 0
  },
  {
    "id": 9,
    "name": "Scenario Amaryllis",
    "description": "Incididunt sit nisi proident ex.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 43000000,
    "tss_concentration": 600,
    "cod_concentration": 860,
    "tkn_concentration": 70,
    "acetic_acid_concentration": 1,
    "metric6": 22,
    "metric7": 400,
    "metric8": 7080,
    "metric9": 4,
    "metric10": 2
  },
  {
    "id": 10,
    "name": "Scenario Carnation",
    "description": "Officia excepteur eiusmod anim elit excepteur ad non dolor.",
    "analysis_type": "Sensitivity Analysis",
    "volumetric_flow_rate": 41000000,
    "tss_concentration": 450,
    "cod_concentration": 700,
    "tkn_concentration": 65,
    "acetic_acid_concentration": 1,
    "metric6": 30,
    "metric7": 445,
    "metric8": 6872,
    "metric9": 3,
    "metric10": 1
  }
]



================================================
FILE: src/App.tsx
================================================
import { CssBaseline } from '@mui/material';
import { ThemeProvider } from '@mui/material/styles';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { createRouter, RouterProvider } from '@tanstack/react-router';
import React from 'react';
import { ApiModal } from './components/ApiModal';
import { AppProvider } from './context/ContextProvider';
import { routeTree } from './routeTree.gen';
import { theme } from './theme';

export const router = createRouter({ routeTree });

// Register the router instance for type safety
declare module '@tanstack/react-router' {
  interface Register {
    router: typeof router;
  }
}

const queryClient = new QueryClient();

const App: React.FC = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <LocalizationProvider dateAdapter={AdapterDayjs}>
        <ThemeProvider theme={theme}>
          <CssBaseline />
          <AppProvider>
            <RouterProvider
              router={router}
              basepath={import.meta.env.BASE_URL}
            />
            <ApiModal />
          </AppProvider>
        </ThemeProvider>
      </LocalizationProvider>
    </QueryClientProvider>
  );
};

export default App;



================================================
FILE: src/declarations.d.ts
================================================
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { Palette, PaletteOptions } from '@mui/material/styles';

declare module '@mui/material/styles' {
  interface Palette {
    neutral: Partial<Color>;
  }
  interface PaletteOptions {
    neutral: Partial<Color>;
  }
}

declare module '@mui/material/Button' {
  interface ButtonPropsColorOverrides {
    neutral: true;
  }
}



================================================
FILE: src/index.css
================================================
html {
  height: 100%;
}

body {
  height: 100%;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  height: 100%;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}



================================================
FILE: src/main.tsx
================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



================================================
FILE: src/routeTree.gen.ts
================================================
/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './pages/__root';
import { Route as IndexImport } from './pages/index';
import { Route as SearchDataRepositoriesIndexImport } from './pages/search-data-repositories/index';
import { Route as PlaygroundIndexImport } from './pages/playground/index';
import { Route as MonitorActivitiesIndexImport } from './pages/monitor-activities/index';
import { Route as ExploreDataIndexImport } from './pages/explore-data/index';
import { Route as SearchDataRepositoriesIdImport } from './pages/search-data-repositories/$id';
import { Route as RunComputationLayoutImport } from './pages/run-computation/_layout';
import { Route as MonitorActivitiesDetailImport } from './pages/monitor-activities/detail';
import { Route as MonitorActivitiesCalendarImport } from './pages/monitor-activities/calendar';
import { Route as ExploreDataIdImport } from './pages/explore-data/$id';
import { Route as ContributeDataLayoutImport } from './pages/contribute-data/_layout';
import { Route as CompareDataLayoutImport } from './pages/compare-data/_layout';
import { Route as RunComputationLayoutIndexImport } from './pages/run-computation/_layout/index';
import { Route as ContributeDataLayoutIndexImport } from './pages/contribute-data/_layout/index';
import { Route as CompareDataLayoutIndexImport } from './pages/compare-data/_layout/index';
import { Route as ContributeDataLayoutReviewImport } from './pages/contribute-data/_layout/review';
import { Route as ContributeDataLayoutPortalImport } from './pages/contribute-data/_layout/portal';
import { Route as ContributeDataLayoutNewImport } from './pages/contribute-data/_layout/new';
import { Route as CompareDataLayoutNewImport } from './pages/compare-data/_layout/new';
import { Route as CompareDataLayoutCompareImport } from './pages/compare-data/_layout/compare';
import { Route as RunComputationLayoutIdLayoutImport } from './pages/run-computation/_layout/$id/_layout';
import { Route as RunComputationLayoutIdLayoutSettingsImport } from './pages/run-computation/_layout/$id/_layout/settings';
import { Route as RunComputationLayoutIdLayoutRunningImport } from './pages/run-computation/_layout/$id/_layout/running';
import { Route as RunComputationLayoutIdLayoutResultsImport } from './pages/run-computation/_layout/$id/_layout/results';
import { Route as RunComputationLayoutIdLayoutDataInputsImport } from './pages/run-computation/_layout/$id/_layout/data-inputs';

// Create Virtual Routes

const RunComputationImport = createFileRoute('/run-computation')();
const ContributeDataImport = createFileRoute('/contribute-data')();
const CompareDataImport = createFileRoute('/compare-data')();
const RunComputationLayoutIdImport = createFileRoute(
  '/run-computation/_layout/$id'
)();

// Create/Update Routes

const RunComputationRoute = RunComputationImport.update({
  id: '/run-computation',
  path: '/run-computation',
  getParentRoute: () => rootRoute,
} as any);

const ContributeDataRoute = ContributeDataImport.update({
  id: '/contribute-data',
  path: '/contribute-data',
  getParentRoute: () => rootRoute,
} as any);

const CompareDataRoute = CompareDataImport.update({
  id: '/compare-data',
  path: '/compare-data',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const SearchDataRepositoriesIndexRoute =
  SearchDataRepositoriesIndexImport.update({
    id: '/search-data-repositories/',
    path: '/search-data-repositories/',
    getParentRoute: () => rootRoute,
  } as any);

const PlaygroundIndexRoute = PlaygroundIndexImport.update({
  id: '/playground/',
  path: '/playground/',
  getParentRoute: () => rootRoute,
} as any);

const MonitorActivitiesIndexRoute = MonitorActivitiesIndexImport.update({
  id: '/monitor-activities/',
  path: '/monitor-activities/',
  getParentRoute: () => rootRoute,
} as any);

const ExploreDataIndexRoute = ExploreDataIndexImport.update({
  id: '/explore-data/',
  path: '/explore-data/',
  getParentRoute: () => rootRoute,
} as any);

const SearchDataRepositoriesIdRoute = SearchDataRepositoriesIdImport.update({
  id: '/search-data-repositories/$id',
  path: '/search-data-repositories/$id',
  getParentRoute: () => rootRoute,
} as any);

const RunComputationLayoutRoute = RunComputationLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => RunComputationRoute,
} as any);

const MonitorActivitiesDetailRoute = MonitorActivitiesDetailImport.update({
  id: '/monitor-activities/detail',
  path: '/monitor-activities/detail',
  getParentRoute: () => rootRoute,
} as any);

const MonitorActivitiesCalendarRoute = MonitorActivitiesCalendarImport.update({
  id: '/monitor-activities/calendar',
  path: '/monitor-activities/calendar',
  getParentRoute: () => rootRoute,
} as any);

const ExploreDataIdRoute = ExploreDataIdImport.update({
  id: '/explore-data/$id',
  path: '/explore-data/$id',
  getParentRoute: () => rootRoute,
} as any);

const ContributeDataLayoutRoute = ContributeDataLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => ContributeDataRoute,
} as any);

const CompareDataLayoutRoute = CompareDataLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => CompareDataRoute,
} as any);

const RunComputationLayoutIdRoute = RunComputationLayoutIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => RunComputationLayoutRoute,
} as any);

const RunComputationLayoutIndexRoute = RunComputationLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RunComputationLayoutRoute,
} as any);

const ContributeDataLayoutIndexRoute = ContributeDataLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ContributeDataLayoutRoute,
} as any);

const CompareDataLayoutIndexRoute = CompareDataLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CompareDataLayoutRoute,
} as any);

const ContributeDataLayoutReviewRoute = ContributeDataLayoutReviewImport.update(
  {
    id: '/review',
    path: '/review',
    getParentRoute: () => ContributeDataLayoutRoute,
  } as any
);

const ContributeDataLayoutPortalRoute = ContributeDataLayoutPortalImport.update(
  {
    id: '/portal',
    path: '/portal',
    getParentRoute: () => ContributeDataLayoutRoute,
  } as any
);

const ContributeDataLayoutNewRoute = ContributeDataLayoutNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ContributeDataLayoutRoute,
} as any);

const CompareDataLayoutNewRoute = CompareDataLayoutNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => CompareDataLayoutRoute,
} as any);

const CompareDataLayoutCompareRoute = CompareDataLayoutCompareImport.update({
  id: '/compare',
  path: '/compare',
  getParentRoute: () => CompareDataLayoutRoute,
} as any);

const RunComputationLayoutIdLayoutRoute =
  RunComputationLayoutIdLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => RunComputationLayoutIdRoute,
  } as any);

const RunComputationLayoutIdLayoutSettingsRoute =
  RunComputationLayoutIdLayoutSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => RunComputationLayoutIdLayoutRoute,
  } as any);

const RunComputationLayoutIdLayoutRunningRoute =
  RunComputationLayoutIdLayoutRunningImport.update({
    id: '/running',
    path: '/running',
    getParentRoute: () => RunComputationLayoutIdLayoutRoute,
  } as any);

const RunComputationLayoutIdLayoutResultsRoute =
  RunComputationLayoutIdLayoutResultsImport.update({
    id: '/results',
    path: '/results',
    getParentRoute: () => RunComputationLayoutIdLayoutRoute,
  } as any);

const RunComputationLayoutIdLayoutDataInputsRoute =
  RunComputationLayoutIdLayoutDataInputsImport.update({
    id: '/data-inputs',
    path: '/data-inputs',
    getParentRoute: () => RunComputationLayoutIdLayoutRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/compare-data': {
      id: '/compare-data';
      path: '/compare-data';
      fullPath: '/compare-data';
      preLoaderRoute: typeof CompareDataImport;
      parentRoute: typeof rootRoute;
    };
    '/compare-data/_layout': {
      id: '/compare-data/_layout';
      path: '/compare-data';
      fullPath: '/compare-data';
      preLoaderRoute: typeof CompareDataLayoutImport;
      parentRoute: typeof CompareDataRoute;
    };
    '/contribute-data': {
      id: '/contribute-data';
      path: '/contribute-data';
      fullPath: '/contribute-data';
      preLoaderRoute: typeof ContributeDataImport;
      parentRoute: typeof rootRoute;
    };
    '/contribute-data/_layout': {
      id: '/contribute-data/_layout';
      path: '/contribute-data';
      fullPath: '/contribute-data';
      preLoaderRoute: typeof ContributeDataLayoutImport;
      parentRoute: typeof ContributeDataRoute;
    };
    '/explore-data/$id': {
      id: '/explore-data/$id';
      path: '/explore-data/$id';
      fullPath: '/explore-data/$id';
      preLoaderRoute: typeof ExploreDataIdImport;
      parentRoute: typeof rootRoute;
    };
    '/monitor-activities/calendar': {
      id: '/monitor-activities/calendar';
      path: '/monitor-activities/calendar';
      fullPath: '/monitor-activities/calendar';
      preLoaderRoute: typeof MonitorActivitiesCalendarImport;
      parentRoute: typeof rootRoute;
    };
    '/monitor-activities/detail': {
      id: '/monitor-activities/detail';
      path: '/monitor-activities/detail';
      fullPath: '/monitor-activities/detail';
      preLoaderRoute: typeof MonitorActivitiesDetailImport;
      parentRoute: typeof rootRoute;
    };
    '/run-computation': {
      id: '/run-computation';
      path: '/run-computation';
      fullPath: '/run-computation';
      preLoaderRoute: typeof RunComputationImport;
      parentRoute: typeof rootRoute;
    };
    '/run-computation/_layout': {
      id: '/run-computation/_layout';
      path: '/run-computation';
      fullPath: '/run-computation';
      preLoaderRoute: typeof RunComputationLayoutImport;
      parentRoute: typeof RunComputationRoute;
    };
    '/search-data-repositories/$id': {
      id: '/search-data-repositories/$id';
      path: '/search-data-repositories/$id';
      fullPath: '/search-data-repositories/$id';
      preLoaderRoute: typeof SearchDataRepositoriesIdImport;
      parentRoute: typeof rootRoute;
    };
    '/explore-data/': {
      id: '/explore-data/';
      path: '/explore-data';
      fullPath: '/explore-data';
      preLoaderRoute: typeof ExploreDataIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/monitor-activities/': {
      id: '/monitor-activities/';
      path: '/monitor-activities';
      fullPath: '/monitor-activities';
      preLoaderRoute: typeof MonitorActivitiesIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/playground/': {
      id: '/playground/';
      path: '/playground';
      fullPath: '/playground';
      preLoaderRoute: typeof PlaygroundIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/search-data-repositories/': {
      id: '/search-data-repositories/';
      path: '/search-data-repositories';
      fullPath: '/search-data-repositories';
      preLoaderRoute: typeof SearchDataRepositoriesIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/compare-data/_layout/compare': {
      id: '/compare-data/_layout/compare';
      path: '/compare';
      fullPath: '/compare-data/compare';
      preLoaderRoute: typeof CompareDataLayoutCompareImport;
      parentRoute: typeof CompareDataLayoutImport;
    };
    '/compare-data/_layout/new': {
      id: '/compare-data/_layout/new';
      path: '/new';
      fullPath: '/compare-data/new';
      preLoaderRoute: typeof CompareDataLayoutNewImport;
      parentRoute: typeof CompareDataLayoutImport;
    };
    '/contribute-data/_layout/new': {
      id: '/contribute-data/_layout/new';
      path: '/new';
      fullPath: '/contribute-data/new';
      preLoaderRoute: typeof ContributeDataLayoutNewImport;
      parentRoute: typeof ContributeDataLayoutImport;
    };
    '/contribute-data/_layout/portal': {
      id: '/contribute-data/_layout/portal';
      path: '/portal';
      fullPath: '/contribute-data/portal';
      preLoaderRoute: typeof ContributeDataLayoutPortalImport;
      parentRoute: typeof ContributeDataLayoutImport;
    };
    '/contribute-data/_layout/review': {
      id: '/contribute-data/_layout/review';
      path: '/review';
      fullPath: '/contribute-data/review';
      preLoaderRoute: typeof ContributeDataLayoutReviewImport;
      parentRoute: typeof ContributeDataLayoutImport;
    };
    '/compare-data/_layout/': {
      id: '/compare-data/_layout/';
      path: '/';
      fullPath: '/compare-data/';
      preLoaderRoute: typeof CompareDataLayoutIndexImport;
      parentRoute: typeof CompareDataLayoutImport;
    };
    '/contribute-data/_layout/': {
      id: '/contribute-data/_layout/';
      path: '/';
      fullPath: '/contribute-data/';
      preLoaderRoute: typeof ContributeDataLayoutIndexImport;
      parentRoute: typeof ContributeDataLayoutImport;
    };
    '/run-computation/_layout/': {
      id: '/run-computation/_layout/';
      path: '/';
      fullPath: '/run-computation/';
      preLoaderRoute: typeof RunComputationLayoutIndexImport;
      parentRoute: typeof RunComputationLayoutImport;
    };
    '/run-computation/_layout/$id': {
      id: '/run-computation/_layout/$id';
      path: '/$id';
      fullPath: '/run-computation/$id';
      preLoaderRoute: typeof RunComputationLayoutIdImport;
      parentRoute: typeof RunComputationLayoutImport;
    };
    '/run-computation/_layout/$id/_layout': {
      id: '/run-computation/_layout/$id/_layout';
      path: '/$id';
      fullPath: '/run-computation/$id';
      preLoaderRoute: typeof RunComputationLayoutIdLayoutImport;
      parentRoute: typeof RunComputationLayoutIdRoute;
    };
    '/run-computation/_layout/$id/_layout/data-inputs': {
      id: '/run-computation/_layout/$id/_layout/data-inputs';
      path: '/data-inputs';
      fullPath: '/run-computation/$id/data-inputs';
      preLoaderRoute: typeof RunComputationLayoutIdLayoutDataInputsImport;
      parentRoute: typeof RunComputationLayoutIdLayoutImport;
    };
    '/run-computation/_layout/$id/_layout/results': {
      id: '/run-computation/_layout/$id/_layout/results';
      path: '/results';
      fullPath: '/run-computation/$id/results';
      preLoaderRoute: typeof RunComputationLayoutIdLayoutResultsImport;
      parentRoute: typeof RunComputationLayoutIdLayoutImport;
    };
    '/run-computation/_layout/$id/_layout/running': {
      id: '/run-computation/_layout/$id/_layout/running';
      path: '/running';
      fullPath: '/run-computation/$id/running';
      preLoaderRoute: typeof RunComputationLayoutIdLayoutRunningImport;
      parentRoute: typeof RunComputationLayoutIdLayoutImport;
    };
    '/run-computation/_layout/$id/_layout/settings': {
      id: '/run-computation/_layout/$id/_layout/settings';
      path: '/settings';
      fullPath: '/run-computation/$id/settings';
      preLoaderRoute: typeof RunComputationLayoutIdLayoutSettingsImport;
      parentRoute: typeof RunComputationLayoutIdLayoutImport;
    };
  }
}

// Create and export the route tree

interface CompareDataLayoutRouteChildren {
  CompareDataLayoutCompareRoute: typeof CompareDataLayoutCompareRoute;
  CompareDataLayoutNewRoute: typeof CompareDataLayoutNewRoute;
  CompareDataLayoutIndexRoute: typeof CompareDataLayoutIndexRoute;
}

const CompareDataLayoutRouteChildren: CompareDataLayoutRouteChildren = {
  CompareDataLayoutCompareRoute: CompareDataLayoutCompareRoute,
  CompareDataLayoutNewRoute: CompareDataLayoutNewRoute,
  CompareDataLayoutIndexRoute: CompareDataLayoutIndexRoute,
};

const CompareDataLayoutRouteWithChildren =
  CompareDataLayoutRoute._addFileChildren(CompareDataLayoutRouteChildren);

interface CompareDataRouteChildren {
  CompareDataLayoutRoute: typeof CompareDataLayoutRouteWithChildren;
}

const CompareDataRouteChildren: CompareDataRouteChildren = {
  CompareDataLayoutRoute: CompareDataLayoutRouteWithChildren,
};

const CompareDataRouteWithChildren = CompareDataRoute._addFileChildren(
  CompareDataRouteChildren
);

interface ContributeDataLayoutRouteChildren {
  ContributeDataLayoutNewRoute: typeof ContributeDataLayoutNewRoute;
  ContributeDataLayoutPortalRoute: typeof ContributeDataLayoutPortalRoute;
  ContributeDataLayoutReviewRoute: typeof ContributeDataLayoutReviewRoute;
  ContributeDataLayoutIndexRoute: typeof ContributeDataLayoutIndexRoute;
}

const ContributeDataLayoutRouteChildren: ContributeDataLayoutRouteChildren = {
  ContributeDataLayoutNewRoute: ContributeDataLayoutNewRoute,
  ContributeDataLayoutPortalRoute: ContributeDataLayoutPortalRoute,
  ContributeDataLayoutReviewRoute: ContributeDataLayoutReviewRoute,
  ContributeDataLayoutIndexRoute: ContributeDataLayoutIndexRoute,
};

const ContributeDataLayoutRouteWithChildren =
  ContributeDataLayoutRoute._addFileChildren(ContributeDataLayoutRouteChildren);

interface ContributeDataRouteChildren {
  ContributeDataLayoutRoute: typeof ContributeDataLayoutRouteWithChildren;
}

const ContributeDataRouteChildren: ContributeDataRouteChildren = {
  ContributeDataLayoutRoute: ContributeDataLayoutRouteWithChildren,
};

const ContributeDataRouteWithChildren = ContributeDataRoute._addFileChildren(
  ContributeDataRouteChildren
);

interface RunComputationLayoutIdLayoutRouteChildren {
  RunComputationLayoutIdLayoutDataInputsRoute: typeof RunComputationLayoutIdLayoutDataInputsRoute;
  RunComputationLayoutIdLayoutResultsRoute: typeof RunComputationLayoutIdLayoutResultsRoute;
  RunComputationLayoutIdLayoutRunningRoute: typeof RunComputationLayoutIdLayoutRunningRoute;
  RunComputationLayoutIdLayoutSettingsRoute: typeof RunComputationLayoutIdLayoutSettingsRoute;
}

const RunComputationLayoutIdLayoutRouteChildren: RunComputationLayoutIdLayoutRouteChildren =
  {
    RunComputationLayoutIdLayoutDataInputsRoute:
      RunComputationLayoutIdLayoutDataInputsRoute,
    RunComputationLayoutIdLayoutResultsRoute:
      RunComputationLayoutIdLayoutResultsRoute,
    RunComputationLayoutIdLayoutRunningRoute:
      RunComputationLayoutIdLayoutRunningRoute,
    RunComputationLayoutIdLayoutSettingsRoute:
      RunComputationLayoutIdLayoutSettingsRoute,
  };

const RunComputationLayoutIdLayoutRouteWithChildren =
  RunComputationLayoutIdLayoutRoute._addFileChildren(
    RunComputationLayoutIdLayoutRouteChildren
  );

interface RunComputationLayoutIdRouteChildren {
  RunComputationLayoutIdLayoutRoute: typeof RunComputationLayoutIdLayoutRouteWithChildren;
}

const RunComputationLayoutIdRouteChildren: RunComputationLayoutIdRouteChildren =
  {
    RunComputationLayoutIdLayoutRoute:
      RunComputationLayoutIdLayoutRouteWithChildren,
  };

const RunComputationLayoutIdRouteWithChildren =
  RunComputationLayoutIdRoute._addFileChildren(
    RunComputationLayoutIdRouteChildren
  );

interface RunComputationLayoutRouteChildren {
  RunComputationLayoutIndexRoute: typeof RunComputationLayoutIndexRoute;
  RunComputationLayoutIdRoute: typeof RunComputationLayoutIdRouteWithChildren;
}

const RunComputationLayoutRouteChildren: RunComputationLayoutRouteChildren = {
  RunComputationLayoutIndexRoute: RunComputationLayoutIndexRoute,
  RunComputationLayoutIdRoute: RunComputationLayoutIdRouteWithChildren,
};

const RunComputationLayoutRouteWithChildren =
  RunComputationLayoutRoute._addFileChildren(RunComputationLayoutRouteChildren);

interface RunComputationRouteChildren {
  RunComputationLayoutRoute: typeof RunComputationLayoutRouteWithChildren;
}

const RunComputationRouteChildren: RunComputationRouteChildren = {
  RunComputationLayoutRoute: RunComputationLayoutRouteWithChildren,
};

const RunComputationRouteWithChildren = RunComputationRoute._addFileChildren(
  RunComputationRouteChildren
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/compare-data': typeof CompareDataLayoutRouteWithChildren;
  '/contribute-data': typeof ContributeDataLayoutRouteWithChildren;
  '/explore-data/$id': typeof ExploreDataIdRoute;
  '/monitor-activities/calendar': typeof MonitorActivitiesCalendarRoute;
  '/monitor-activities/detail': typeof MonitorActivitiesDetailRoute;
  '/run-computation': typeof RunComputationLayoutRouteWithChildren;
  '/search-data-repositories/$id': typeof SearchDataRepositoriesIdRoute;
  '/explore-data': typeof ExploreDataIndexRoute;
  '/monitor-activities': typeof MonitorActivitiesIndexRoute;
  '/playground': typeof PlaygroundIndexRoute;
  '/search-data-repositories': typeof SearchDataRepositoriesIndexRoute;
  '/compare-data/compare': typeof CompareDataLayoutCompareRoute;
  '/compare-data/new': typeof CompareDataLayoutNewRoute;
  '/contribute-data/new': typeof ContributeDataLayoutNewRoute;
  '/contribute-data/portal': typeof ContributeDataLayoutPortalRoute;
  '/contribute-data/review': typeof ContributeDataLayoutReviewRoute;
  '/compare-data/': typeof CompareDataLayoutIndexRoute;
  '/contribute-data/': typeof ContributeDataLayoutIndexRoute;
  '/run-computation/': typeof RunComputationLayoutIndexRoute;
  '/run-computation/$id': typeof RunComputationLayoutIdLayoutRouteWithChildren;
  '/run-computation/$id/data-inputs': typeof RunComputationLayoutIdLayoutDataInputsRoute;
  '/run-computation/$id/results': typeof RunComputationLayoutIdLayoutResultsRoute;
  '/run-computation/$id/running': typeof RunComputationLayoutIdLayoutRunningRoute;
  '/run-computation/$id/settings': typeof RunComputationLayoutIdLayoutSettingsRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/compare-data': typeof CompareDataLayoutIndexRoute;
  '/contribute-data': typeof ContributeDataLayoutIndexRoute;
  '/explore-data/$id': typeof ExploreDataIdRoute;
  '/monitor-activities/calendar': typeof MonitorActivitiesCalendarRoute;
  '/monitor-activities/detail': typeof MonitorActivitiesDetailRoute;
  '/run-computation': typeof RunComputationLayoutIndexRoute;
  '/search-data-repositories/$id': typeof SearchDataRepositoriesIdRoute;
  '/explore-data': typeof ExploreDataIndexRoute;
  '/monitor-activities': typeof MonitorActivitiesIndexRoute;
  '/playground': typeof PlaygroundIndexRoute;
  '/search-data-repositories': typeof SearchDataRepositoriesIndexRoute;
  '/compare-data/compare': typeof CompareDataLayoutCompareRoute;
  '/compare-data/new': typeof CompareDataLayoutNewRoute;
  '/contribute-data/new': typeof ContributeDataLayoutNewRoute;
  '/contribute-data/portal': typeof ContributeDataLayoutPortalRoute;
  '/contribute-data/review': typeof ContributeDataLayoutReviewRoute;
  '/run-computation/$id': typeof RunComputationLayoutIdLayoutRouteWithChildren;
  '/run-computation/$id/data-inputs': typeof RunComputationLayoutIdLayoutDataInputsRoute;
  '/run-computation/$id/results': typeof RunComputationLayoutIdLayoutResultsRoute;
  '/run-computation/$id/running': typeof RunComputationLayoutIdLayoutRunningRoute;
  '/run-computation/$id/settings': typeof RunComputationLayoutIdLayoutSettingsRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/compare-data': typeof CompareDataRouteWithChildren;
  '/compare-data/_layout': typeof CompareDataLayoutRouteWithChildren;
  '/contribute-data': typeof ContributeDataRouteWithChildren;
  '/contribute-data/_layout': typeof ContributeDataLayoutRouteWithChildren;
  '/explore-data/$id': typeof ExploreDataIdRoute;
  '/monitor-activities/calendar': typeof MonitorActivitiesCalendarRoute;
  '/monitor-activities/detail': typeof MonitorActivitiesDetailRoute;
  '/run-computation': typeof RunComputationRouteWithChildren;
  '/run-computation/_layout': typeof RunComputationLayoutRouteWithChildren;
  '/search-data-repositories/$id': typeof SearchDataRepositoriesIdRoute;
  '/explore-data/': typeof ExploreDataIndexRoute;
  '/monitor-activities/': typeof MonitorActivitiesIndexRoute;
  '/playground/': typeof PlaygroundIndexRoute;
  '/search-data-repositories/': typeof SearchDataRepositoriesIndexRoute;
  '/compare-data/_layout/compare': typeof CompareDataLayoutCompareRoute;
  '/compare-data/_layout/new': typeof CompareDataLayoutNewRoute;
  '/contribute-data/_layout/new': typeof ContributeDataLayoutNewRoute;
  '/contribute-data/_layout/portal': typeof ContributeDataLayoutPortalRoute;
  '/contribute-data/_layout/review': typeof ContributeDataLayoutReviewRoute;
  '/compare-data/_layout/': typeof CompareDataLayoutIndexRoute;
  '/contribute-data/_layout/': typeof ContributeDataLayoutIndexRoute;
  '/run-computation/_layout/': typeof RunComputationLayoutIndexRoute;
  '/run-computation/_layout/$id': typeof RunComputationLayoutIdRouteWithChildren;
  '/run-computation/_layout/$id/_layout': typeof RunComputationLayoutIdLayoutRouteWithChildren;
  '/run-computation/_layout/$id/_layout/data-inputs': typeof RunComputationLayoutIdLayoutDataInputsRoute;
  '/run-computation/_layout/$id/_layout/results': typeof RunComputationLayoutIdLayoutResultsRoute;
  '/run-computation/_layout/$id/_layout/running': typeof RunComputationLayoutIdLayoutRunningRoute;
  '/run-computation/_layout/$id/_layout/settings': typeof RunComputationLayoutIdLayoutSettingsRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/compare-data'
    | '/contribute-data'
    | '/explore-data/$id'
    | '/monitor-activities/calendar'
    | '/monitor-activities/detail'
    | '/run-computation'
    | '/search-data-repositories/$id'
    | '/explore-data'
    | '/monitor-activities'
    | '/playground'
    | '/search-data-repositories'
    | '/compare-data/compare'
    | '/compare-data/new'
    | '/contribute-data/new'
    | '/contribute-data/portal'
    | '/contribute-data/review'
    | '/compare-data/'
    | '/contribute-data/'
    | '/run-computation/'
    | '/run-computation/$id'
    | '/run-computation/$id/data-inputs'
    | '/run-computation/$id/results'
    | '/run-computation/$id/running'
    | '/run-computation/$id/settings';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/compare-data'
    | '/contribute-data'
    | '/explore-data/$id'
    | '/monitor-activities/calendar'
    | '/monitor-activities/detail'
    | '/run-computation'
    | '/search-data-repositories/$id'
    | '/explore-data'
    | '/monitor-activities'
    | '/playground'
    | '/search-data-repositories'
    | '/compare-data/compare'
    | '/compare-data/new'
    | '/contribute-data/new'
    | '/contribute-data/portal'
    | '/contribute-data/review'
    | '/run-computation/$id'
    | '/run-computation/$id/data-inputs'
    | '/run-computation/$id/results'
    | '/run-computation/$id/running'
    | '/run-computation/$id/settings';
  id:
    | '__root__'
    | '/'
    | '/compare-data'
    | '/compare-data/_layout'
    | '/contribute-data'
    | '/contribute-data/_layout'
    | '/explore-data/$id'
    | '/monitor-activities/calendar'
    | '/monitor-activities/detail'
    | '/run-computation'
    | '/run-computation/_layout'
    | '/search-data-repositories/$id'
    | '/explore-data/'
    | '/monitor-activities/'
    | '/playground/'
    | '/search-data-repositories/'
    | '/compare-data/_layout/compare'
    | '/compare-data/_layout/new'
    | '/contribute-data/_layout/new'
    | '/contribute-data/_layout/portal'
    | '/contribute-data/_layout/review'
    | '/compare-data/_layout/'
    | '/contribute-data/_layout/'
    | '/run-computation/_layout/'
    | '/run-computation/_layout/$id'
    | '/run-computation/_layout/$id/_layout'
    | '/run-computation/_layout/$id/_layout/data-inputs'
    | '/run-computation/_layout/$id/_layout/results'
    | '/run-computation/_layout/$id/_layout/running'
    | '/run-computation/_layout/$id/_layout/settings';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CompareDataRoute: typeof CompareDataRouteWithChildren;
  ContributeDataRoute: typeof ContributeDataRouteWithChildren;
  ExploreDataIdRoute: typeof ExploreDataIdRoute;
  MonitorActivitiesCalendarRoute: typeof MonitorActivitiesCalendarRoute;
  MonitorActivitiesDetailRoute: typeof MonitorActivitiesDetailRoute;
  RunComputationRoute: typeof RunComputationRouteWithChildren;
  SearchDataRepositoriesIdRoute: typeof SearchDataRepositoriesIdRoute;
  ExploreDataIndexRoute: typeof ExploreDataIndexRoute;
  MonitorActivitiesIndexRoute: typeof MonitorActivitiesIndexRoute;
  PlaygroundIndexRoute: typeof PlaygroundIndexRoute;
  SearchDataRepositoriesIndexRoute: typeof SearchDataRepositoriesIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CompareDataRoute: CompareDataRouteWithChildren,
  ContributeDataRoute: ContributeDataRouteWithChildren,
  ExploreDataIdRoute: ExploreDataIdRoute,
  MonitorActivitiesCalendarRoute: MonitorActivitiesCalendarRoute,
  MonitorActivitiesDetailRoute: MonitorActivitiesDetailRoute,
  RunComputationRoute: RunComputationRouteWithChildren,
  SearchDataRepositoriesIdRoute: SearchDataRepositoriesIdRoute,
  ExploreDataIndexRoute: ExploreDataIndexRoute,
  MonitorActivitiesIndexRoute: MonitorActivitiesIndexRoute,
  PlaygroundIndexRoute: PlaygroundIndexRoute,
  SearchDataRepositoriesIndexRoute: SearchDataRepositoriesIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/compare-data",
        "/contribute-data",
        "/explore-data/$id",
        "/monitor-activities/calendar",
        "/monitor-activities/detail",
        "/run-computation",
        "/search-data-repositories/$id",
        "/explore-data/",
        "/monitor-activities/",
        "/playground/",
        "/search-data-repositories/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/compare-data": {
      "filePath": "compare-data",
      "children": [
        "/compare-data/_layout"
      ]
    },
    "/compare-data/_layout": {
      "filePath": "compare-data/_layout.tsx",
      "parent": "/compare-data",
      "children": [
        "/compare-data/_layout/compare",
        "/compare-data/_layout/new",
        "/compare-data/_layout/"
      ]
    },
    "/contribute-data": {
      "filePath": "contribute-data",
      "children": [
        "/contribute-data/_layout"
      ]
    },
    "/contribute-data/_layout": {
      "filePath": "contribute-data/_layout.tsx",
      "parent": "/contribute-data",
      "children": [
        "/contribute-data/_layout/new",
        "/contribute-data/_layout/portal",
        "/contribute-data/_layout/review",
        "/contribute-data/_layout/"
      ]
    },
    "/explore-data/$id": {
      "filePath": "explore-data/$id.tsx"
    },
    "/monitor-activities/calendar": {
      "filePath": "monitor-activities/calendar.tsx"
    },
    "/monitor-activities/detail": {
      "filePath": "monitor-activities/detail.tsx"
    },
    "/run-computation": {
      "filePath": "run-computation",
      "children": [
        "/run-computation/_layout"
      ]
    },
    "/run-computation/_layout": {
      "filePath": "run-computation/_layout.tsx",
      "parent": "/run-computation",
      "children": [
        "/run-computation/_layout/",
        "/run-computation/_layout/$id"
      ]
    },
    "/search-data-repositories/$id": {
      "filePath": "search-data-repositories/$id.tsx"
    },
    "/explore-data/": {
      "filePath": "explore-data/index.tsx"
    },
    "/monitor-activities/": {
      "filePath": "monitor-activities/index.tsx"
    },
    "/playground/": {
      "filePath": "playground/index.tsx"
    },
    "/search-data-repositories/": {
      "filePath": "search-data-repositories/index.tsx"
    },
    "/compare-data/_layout/compare": {
      "filePath": "compare-data/_layout/compare.tsx",
      "parent": "/compare-data/_layout"
    },
    "/compare-data/_layout/new": {
      "filePath": "compare-data/_layout/new.tsx",
      "parent": "/compare-data/_layout"
    },
    "/contribute-data/_layout/new": {
      "filePath": "contribute-data/_layout/new.tsx",
      "parent": "/contribute-data/_layout"
    },
    "/contribute-data/_layout/portal": {
      "filePath": "contribute-data/_layout/portal.tsx",
      "parent": "/contribute-data/_layout"
    },
    "/contribute-data/_layout/review": {
      "filePath": "contribute-data/_layout/review.tsx",
      "parent": "/contribute-data/_layout"
    },
    "/compare-data/_layout/": {
      "filePath": "compare-data/_layout/index.tsx",
      "parent": "/compare-data/_layout"
    },
    "/contribute-data/_layout/": {
      "filePath": "contribute-data/_layout/index.tsx",
      "parent": "/contribute-data/_layout"
    },
    "/run-computation/_layout/": {
      "filePath": "run-computation/_layout/index.tsx",
      "parent": "/run-computation/_layout"
    },
    "/run-computation/_layout/$id": {
      "filePath": "run-computation/_layout/$id",
      "parent": "/run-computation/_layout",
      "children": [
        "/run-computation/_layout/$id/_layout"
      ]
    },
    "/run-computation/_layout/$id/_layout": {
      "filePath": "run-computation/_layout/$id/_layout.tsx",
      "parent": "/run-computation/_layout/$id",
      "children": [
        "/run-computation/_layout/$id/_layout/data-inputs",
        "/run-computation/_layout/$id/_layout/results",
        "/run-computation/_layout/$id/_layout/running",
        "/run-computation/_layout/$id/_layout/settings"
      ]
    },
    "/run-computation/_layout/$id/_layout/data-inputs": {
      "filePath": "run-computation/_layout/$id/_layout/data-inputs.tsx",
      "parent": "/run-computation/_layout/$id/_layout"
    },
    "/run-computation/_layout/$id/_layout/results": {
      "filePath": "run-computation/_layout/$id/_layout/results.tsx",
      "parent": "/run-computation/_layout/$id/_layout"
    },
    "/run-computation/_layout/$id/_layout/running": {
      "filePath": "run-computation/_layout/$id/_layout/running.tsx",
      "parent": "/run-computation/_layout/$id/_layout"
    },
    "/run-computation/_layout/$id/_layout/settings": {
      "filePath": "run-computation/_layout/$id/_layout/settings.tsx",
      "parent": "/run-computation/_layout/$id/_layout"
    }
  }
}
ROUTE_MANIFEST_END */



================================================
FILE: src/theme.tsx
================================================
import { createTheme } from '@mui/material';
import type {} from '@mui/x-data-grid/themeAugmentation';

/**
 * MUI Theme object for setting app-wide and component-wide styles.
 * Specify colors, spacing, fonts, and more.
 * Learn more about theme options: https://mui.com/material-ui/customization/theming/
 */
export const theme = createTheme({
  // Color palette to use throughout the app
  palette: {
    mode: 'light',
    background: {
      default: '#F5F5F6',
      paper: '#fff',
    },
    primary: {
      main: '#1976d2',
      // Exclude light, dark, or contrastText to have them
      // calculated automatically based on the main color.
      light: '#42a5f5',
      dark: '#1565c0',
      contrastText: '#fff',
    },
    secondary: {
      main: '#9c27b0',
      light: '#ba68c8',
      dark: '#7b1fa2',
      contrastText: '#fff',
    },
    info: {
      main: '#0288d1',
      light: '#03a9f4',
      dark: '#01579b',
      contrastText: '#fff',
    },
    success: {
      main: '#2e7d32',
      light: '#4caf50',
      dark: '#1b5e20',
      contrastText: '#fff',
    },
    warning: {
      main: '#ed6c02',
      light: '#ff9800',
      dark: '#e65100',
      contrastText: '#fff',
    },
    error: {
      main: '#d32f2f',
      light: '#ef5350',
      dark: '#c62828',
      contrastText: '#fff',
    },
    neutral: {
      main: '#DADADA',
      light: '#e0e0e0',
      dark: '#828282',
    },
    common: {
      black: '#000',
      white: '#fff',
    },
    grey: {
      50: '#ddd',
      500: '#999',
      900: '#444',
    },
  },
  // Control the default border radius
  shape: {
    borderRadius: 4,
  },
  // Control the font, size, and font weights
  typography: {
    htmlFontSize: 16,
    fontFamily: `"Helvetica", "Verdana", "Arial", sans-serif`,
    fontSize: 14,
    fontWeightLight: 300,
    fontWeightRegular: 400,
    fontWeightMedium: 500,
    fontWeightBold: 700,
  },
  // Default options for MUI components used throughout the app
  components: {
    /**
     * Example component customization.
     * Learn more at https://mui.com/material-ui/customization/theme-components/
     * 
        MuiComponentName: {
          defaultProps: {
            // Put prop names and values here
          },
          styleOverrides: {
            root: {
              // Put styles here
            }
          },
          // Create new custom variants of certain components
          variants: [
            {
              props: { variant: '' },
              style: {
                // Put styles here
              },
            },
          ],
        },
     *
     */
    MuiButton: {
      variants: [
        {
          props: { color: 'neutral' },
          style: {
            backgroundColor: 'white',
            borderColor: '#bdbdbd',
            color: '#757575',
          },
        },
      ],
    },
    MuiLink: {
      styleOverrides: {
        root: {
          textDecoration: 'none',
        },
      },
    },
    MuiStack: {
      defaultProps: {
        spacing: 2,
      },
    },
    MuiDataGrid: {
      styleOverrides: {
        root: {
          border: 0,
          '& .MuiDataGrid-cell:focus-within': {
            outline: 'none',
          },
          '& .MuiDataGrid-overlayWrapper': {
            minHeight: '4rem',
          },
          '& .MuiDataGrid-columnHeaderTitle': {
            color: 'grey.900',
            fontSize: '0.85rem',
            fontWeight: 'bold',
            textTransform: 'uppercase',
          },
        },
      },
    },
  },
});



================================================
FILE: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: src/components/ApiModal.tsx
================================================
import * as React from 'react';
import { useAppState } from '../context/ContextProvider';
import { closeApiModal } from '../context/actions';
import {
  Button,
  Modal,
  Paper,
  Stack,
  TextField,
  Typography,
} from '@mui/material';
import { useState } from 'react';

export const ApiModal: React.FC = () => {
  const app = useAppState();
  const [name, setName] = useState('');
  const [value, setValue] = useState('');

  const handleClose = () => {
    app.dispatch(closeApiModal());
  };

  const handleSubmit = () => {
    localStorage.setItem('apiTokenName', name);
    localStorage.setItem('apiTokenValue', value);
    window.location.reload();
  };

  return (
    <div>
      <Modal
        open={app.state.apiModalOpen}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Paper
          sx={{
            left: '50%',
            p: 4,
            position: 'absolute',
            top: '50%',
            transform: 'translate(-50%, -50%)',
            width: 500,
          }}
        >
          <Stack spacing={2}>
            <Typography variant="h6" component="h2">
              API Authentication Required
            </Typography>
            <Typography>
              Enter the name of your API token (e.g. X-ApiToken) and the value
              of your API token (e.g. abc123).
            </Typography>
            <TextField
              value={name}
              label="Name"
              onChange={(event) => {
                setName(event.target.value);
              }}
            />
            <TextField
              value={value}
              label="Value"
              type="password"
              onChange={(event) => {
                setValue(event.target.value);
              }}
            />
            <Button variant="contained" onClick={handleSubmit}>
              Submit
            </Button>
          </Stack>
        </Paper>
      </Modal>
    </div>
  );
};



================================================
FILE: src/components/AppLink.tsx
================================================
import { Link } from '@mui/material';
import { createLink } from '@tanstack/react-router';

/**
 * Link component for in-app links.
 * Connects the tanstack link props to the MUI Link component
 */
export const AppLink = createLink(Link);



================================================
FILE: src/components/ArrayWithPopover.tsx
================================================
import { Box, Stack, Chip, Popover, Grid } from '@mui/material';
import { useState } from 'react';

interface ArrayWithPopoverProps {
  values: string[] | number[];
}

/**
 * Array of Chips with a popover to show the full list.
 * This is used to render arrays in table cells where the
 * list is cut off by the edge of the cell.
 */
export const ArrayWithPopover: React.FC<ArrayWithPopoverProps> = ({
  values,
}) => {
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);

  const handlePopoverOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handlePopoverClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);
  return (
    <Box sx={{ height: '100%' }}>
      <Stack
        direction="row"
        spacing={1}
        alignItems="center"
        onMouseEnter={handlePopoverOpen}
        onMouseLeave={handlePopoverClose}
        sx={{ height: '100%' }}
      >
        {values.map((v) => (
          <Chip key={v} label={v} size="small" />
        ))}
      </Stack>
      <Popover
        id="mouse-over-popover"
        sx={{
          pointerEvents: 'none',
        }}
        open={open}
        anchorEl={anchorEl}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
        onClose={handlePopoverClose}
        disableRestoreFocus
      >
        <Grid
          container
          rowGap={1}
          columnGap={1}
          sx={{
            maxWidth: '300px',
            padding: 2,
          }}
        >
          {values.map((v) => (
            <Grid key={v} item>
              <Chip label={v} size="small" />
            </Grid>
          ))}
        </Grid>
      </Popover>
    </Box>
  );
};



================================================
FILE: src/components/CellWithPopover.tsx
================================================
import { Box, Popover } from '@mui/material';
import { PropsWithChildren, useState } from 'react';

/**
 * Generic inner cell content with a popover to show the full contents.
 * This is used to render cells with too much content to display
 * inside a single cell. Full content is displayed on hover in a popover box.
 */
export const CellWithPopover: React.FC<PropsWithChildren> = ({ children }) => {
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);

  const handlePopoverOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handlePopoverClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);
  return (
    <Box sx={{ height: '100%' }}>
      <Box
        onMouseEnter={handlePopoverOpen}
        onMouseLeave={handlePopoverClose}
        sx={{
          height: '100%',
          overflow: 'hidden',
          textOverflow: 'ellipsis',
        }}
      >
        {children}
      </Box>
      <Popover
        id="mouse-over-popover"
        sx={{
          pointerEvents: 'none',
        }}
        open={open}
        anchorEl={anchorEl}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
        onClose={handlePopoverClose}
        disableRestoreFocus
      >
        <Box
          sx={{
            maxWidth: '300px',
            padding: 2,
          }}
        >
          {children}
        </Box>
      </Popover>
    </Box>
  );
};



================================================
FILE: src/components/CheckboxList.tsx
================================================
import {
  Checkbox,
  FormControlLabel,
  FormGroup,
  FormGroupProps,
} from '@mui/material';
import React, { useEffect, useState } from 'react';

export type CheckboxOptionValue = string | number;

export interface CheckboxOption {
  label: string;
  value: CheckboxOptionValue;
}

interface CheckboxListProps extends Omit<FormGroupProps, 'onChange'> {
  values: CheckboxOptionValue[] | null;
  options: CheckboxOption[];
  onChange?: (values: CheckboxOptionValue[] | null) => any;
}

export const CheckboxList: React.FC<CheckboxListProps> = ({
  options = [],
  onChange,
  values,
  sx,
  ...rest
}) => {
  const [checkValues, setCheckValues] = useState<CheckboxOptionValue[] | null>(
    values
  );

  const handleChange = (checked: boolean, value: CheckboxOption['value']) => {
    if (checkValues === null && checked) {
      setCheckValues([value]);
    } else if (checkValues !== null && checked) {
      setCheckValues([...checkValues, value]);
    } else if (checkValues !== null && !checked) {
      const newValues = checkValues.filter((v) => v !== value);
      if (newValues.length > 0) {
        setCheckValues(newValues);
      } else {
        setCheckValues(null);
      }
    }
  };

  useEffect(() => {
    if (onChange && checkValues?.length !== values?.length) {
      onChange(checkValues);
    }
  }, [checkValues]);

  useEffect(() => {
    setCheckValues(values);
  }, [values]);

  return (
    <FormGroup
      sx={{
        display: 'inline-flex',
        ...sx,
      }}
      {...rest}
    >
      {options.map((option, i) => (
        <FormControlLabel
          key={`${option}-${i}`}
          label={option.label}
          control={
            <Checkbox
              checked={!!checkValues && checkValues.indexOf(option.value) > -1}
              value={option.value}
              onChange={(e, checked) => handleChange(checked, option.value)}
              sx={{
                pr: 1,
                pl: 1,
                pb: 0,
                pt: 0,
              }}
            />
          }
          sx={{
            '&:not(:last-child)': {
              mb: 1,
            },
          }}
        />
      ))}
    </FormGroup>
  );
};



================================================
FILE: src/components/Collapsible.tsx
================================================
import React, { ReactNode, useEffect, useState } from 'react';
import { Box, Stack, StackProps } from '@mui/material';
import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';

export interface CollapsibleProps extends StackProps {
  color?: string;
  label: ReactNode;
  isOpen?: boolean;
}

export const Collapsible: React.FC<CollapsibleProps> = ({
  color,
  label,
  isOpen = false,
  children,
  ...rest
}) => {
  const [isOpenState, setIsOpenState] = useState<boolean>(isOpen);

  const handleClick = () => {
    setIsOpenState(!isOpenState);
  };

  useEffect(() => {
    setIsOpenState(isOpen);
  }, [isOpen]);

  return (
    <Stack spacing={1} {...rest}>
      <Box
        role="button"
        onClick={handleClick}
        sx={{
          cursor: 'pointer',
          display: 'block',
          padding: 0,
          textAlign: 'left',
          textTransform: 'none',
          width: '100%',
          '&:hover': {
            background: 'none',
            opacity: 0.7,
          },
        }}
      >
        <Stack spacing={1} direction="row" alignItems="center">
          {!isOpenState && (
            <KeyboardArrowRightIcon
              sx={{
                ml: '-0.5rem',
                mt: '-0.5rem',
                mb: '-0.5rem',
              }}
            />
          )}
          {isOpenState && (
            <KeyboardArrowDownIcon
              sx={{
                ml: '-0.5rem',
                mt: '-0.5rem',
                mb: '-0.5rem',
              }}
            />
          )}
          <Box flex={1}>{label}</Box>
        </Stack>
      </Box>
      {isOpenState && <Box>{children}</Box>}
    </Stack>
  );
};



================================================
FILE: src/components/FilterContext.tsx
================================================
import React, {
  PropsWithChildren,
  useContext,
  useEffect,
  useReducer,
} from 'react';
import { FilterOperator } from '../types/filters.types';

export interface DataFilter {
  field: string;
  value: string | any[] | null;
  operator: FilterOperator;
}

export interface FilterState {
  activeFilters: DataFilter[];
  expandedGroup: string | number | boolean;
}

const FilterContextAPI = React.createContext<
  | {
      activeFilters: FilterState['activeFilters'];
      expandedGroup: FilterState['expandedGroup'];
      dispatch: React.Dispatch<FilterAction>;
    }
  | undefined
>(undefined);

const initialState: FilterState = {
  activeFilters: [],
  expandedGroup: false,
};

export type FilterAction =
  | {
      type: 'SET_FILTER';
      payload: { field: string; value: any; operator: FilterOperator };
    }
  | { type: 'SET_ACTIVE_FILTERS'; payload: FilterState['activeFilters'] }
  | { type: 'SET_EXPANDED_GROUP'; payload: FilterState['expandedGroup'] };

function filterReducer(state: FilterState, action: FilterAction): FilterState {
  switch (action.type) {
    case 'SET_FILTER': {
      const filter = action.payload;
      const existingIndex = state.activeFilters.findIndex(
        (f) => f.field === filter.field
      );
      const activeFilters = [...state.activeFilters];
      if (existingIndex > -1) {
        if (filter.value) {
          activeFilters[existingIndex] = filter;
        } else {
          activeFilters.splice(existingIndex, 1);
        }
      } else if (filter.value) {
        activeFilters.push(filter);
      }
      return {
        ...state,
        activeFilters,
      };
    }
    case 'SET_ACTIVE_FILTERS': {
      return {
        ...state,
        activeFilters: action.payload,
      };
    }
    case 'SET_EXPANDED_GROUP': {
      return {
        ...state,
        expandedGroup: action.payload,
      };
    }
    default: {
      throw new Error(`Unhandled action type`);
    }
  }
}

interface FilterContextProps extends PropsWithChildren {
  activeFilters?: FilterState['activeFilters'];
  onChange?: (filters: FilterState['activeFilters']) => void;
}

export const FilterContext: React.FC<FilterContextProps> = ({
  activeFilters = [],
  onChange = () => null,
  children,
}) => {
  const [state, dispatch] = useReducer(filterReducer, {
    ...initialState,
    activeFilters,
  });
  const value = {
    activeFilters: state.activeFilters,
    expandedGroup: state.expandedGroup,
    dispatch,
  };

  /**
   * Emit a change event when state.activeFilters changes
   */
  useEffect(() => {
    if (onChange) onChange(state.activeFilters);
  }, [JSON.stringify(state.activeFilters)]);

  return (
    <FilterContextAPI.Provider value={value}>
      {children}
    </FilterContextAPI.Provider>
  );
};

export const useFilters = () => {
  const context = useContext(FilterContextAPI);
  if (context === undefined) {
    throw new Error('useFilters must be used within a FilterContext');
  }
  return context;
};



================================================
FILE: src/components/FilterField.tsx
================================================
import React, { useEffect, useState } from 'react';
import {
  Box,
  Stack,
  StackProps,
  TextField,
  Tooltip,
  Typography,
} from '@mui/material';
import CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';
import { CheckboxList } from './CheckboxList';
import { RangeSlider } from './RangeSlider';
import { DatePicker } from '@mui/x-date-pickers';
import { useFilters } from './FilterContext';
import {
  FilterComponent,
  FilterOperator,
  FilterValue,
} from '../types/filters.types';

interface FilterFieldProps extends StackProps {
  label: string;
  field: string;
  tooltip?: string;
  operator: FilterOperator;
  filterComponent: FilterComponent;
  filterProps?: any;
}

/**
 * Determine if a value is truthy or falsy in the context of a filter.
 * Values like 0 and false should be considered as having a value,
 * and having an empty array should be considered not having a value.
 */
export const hasValue = (value: any) => {
  if (value === 0 || value === false) {
    return true;
  } else if (Array.isArray(value) && value.length === 0) {
    return false;
  } else {
    return !!value;
  }
};

/**
 *
 */
export const FilterField: React.FC<FilterFieldProps> = ({
  label,
  field,
  tooltip,
  operator,
  filterComponent,
  filterProps,
  ...rest
}) => {
  const { activeFilters, dispatch } = useFilters();
  const [value, setValue] = useState<FilterValue<typeof filterComponent>>(null);
  const currentFilter = activeFilters.find((filter) => filter.field === field);
  const isActive = hasValue(currentFilter?.value);

  /**
   * When a filter is canceled, reset its value to the proper
   * empty or base state depending on the filter type.
   * In the activeFilters variable, empty filters will always be marked as null.
   */
  const handleCancelFilter = () => {
    switch (filterComponent) {
      case 'CheckboxList':
        setValue(null);
        break;
      case 'RangeSlider':
        setValue([filterProps.min, filterProps.max]);
        break;
      case 'DateRange':
        setValue([filterProps.min, filterProps.max]);
        break;
      case 'TextField':
        setValue(null);
        break;
      default:
        throw new Error('Unknown filter type');
    }

    dispatch({
      type: 'SET_FILTER',
      payload: { field: field, value: null, operator },
    });
  };

  /**
   * Render filter component based on the `filterComponent` prop.
   */
  const getFilterComponent = () => {
    switch (filterComponent) {
      case 'CheckboxList': {
        return (
          <CheckboxList
            values={value as string[] | number[] | null}
            options={filterProps.options}
            onChange={(values) =>
              dispatch({
                type: 'SET_FILTER',
                payload: { field: field, value: values, operator },
              })
            }
            {...filterProps}
          />
        );
      }
      case 'RangeSlider': {
        const handleSliderChange = (
          event: Event | React.SyntheticEvent<Element, Event>,
          values: number | number[]
        ) => {
          if (!Array.isArray(values)) {
            return;
          }
          let newValues: number[] | null = [...values];
          /** Set to null if both ends of slider are at min/max */
          if (values[0] === filterProps.min && values[1] === filterProps.max) {
            newValues = null;
          }
          dispatch({
            type: 'SET_FILTER',
            payload: { field: field, value: newValues, operator },
          });
        };

        return (
          <RangeSlider
            getAriaLabel={() => field}
            valueLabelDisplay="auto"
            min={filterProps.min}
            max={filterProps.max}
            value={value || [filterProps.min, filterProps.max]}
            onChange={(e, v) => setValue(v as number[])}
            onChangeCommitted={handleSliderChange}
            {...filterProps}
          />
        );
      }
      case 'DateRange': {
        const currentDateRange = activeFilters.find(
          (filter) => filter.field === filter.field
        )?.value;
        const hasDateValue =
          currentDateRange &&
          Array.isArray(currentDateRange) &&
          currentDateRange.length === 2;
        const currentMin =
          hasDateValue && Array.isArray(currentDateRange)
            ? currentDateRange[0]
            : null;
        const currentMax =
          hasDateValue && Array.isArray(currentDateRange)
            ? currentDateRange[1]
            : null;

        return (
          <Stack>
            <DatePicker
              label="From"
              slotProps={{
                actionBar: {
                  actions: ['clear', 'today'],
                },
              }}
              onChange={(v) =>
                dispatch({
                  type: 'SET_FILTER',
                  payload: {
                    field: field,
                    value: [v, currentMax],
                    operator,
                  },
                })
              }
            />
            <DatePicker
              label="To"
              slotProps={{
                actionBar: {
                  actions: ['clear', 'today'],
                },
              }}
              onChange={(v) =>
                dispatch({
                  type: 'SET_FILTER',
                  payload: {
                    field: field,
                    value: [currentMin, v],
                    operator,
                  },
                })
              }
            />
          </Stack>
        );
      }
      case 'TextField': {
        /**
         * Debounce the dispatch so that activeFilters isn't rapidly updated.
         */
        useEffect(() => {
          const timeout = setTimeout(() => {
            dispatch({
              type: 'SET_FILTER',
              payload: { field: field, value: value, operator },
            });
          }, 1000);
          return () => {
            clearTimeout(timeout);
          };
        }, [value]);

        return (
          <TextField
            value={value || ''}
            onChange={(e) => setValue(e.target.value)}
            fullWidth
            {...filterProps}
          />
        );
      }
    }
  };

  /**
   * When activeFilters changes, make sure the value changes accordingly.
   * This primarily happens when filters are reset from the top.
   */
  useEffect(() => {
    if (isActive) {
      setValue(currentFilter?.value || null);
    } else if (filterComponent === 'RangeSlider') {
      /** RangeSliders should be considered off if both values are min and max */
      if (
        value &&
        (value[0] !== filterProps.min || value[1] !== filterProps.max)
      ) {
        handleCancelFilter();
      }
    } else if (hasValue(value)) {
      handleCancelFilter();
    }
  }, [JSON.stringify(activeFilters)]);

  return (
    <Stack
      spacing={1}
      sx={{
        paddingBottom: 2,
        borderBottom: '1px solid',
        borderBottomColor: 'grey.300',
        '&:last-child': {
          borderBottom: 'none',
          paddingBottom: 0,
        },
      }}
      {...rest}
    >
      <Box display="inline-block">
        <Stack
          direction="row"
          spacing={1}
          onClick={() => handleCancelFilter()}
          sx={{
            cursor: isActive ? 'pointer' : 'default',
            display: 'inline-flex',
          }}
        >
          {tooltip && (
            <Tooltip title={tooltip} placement="top" arrow>
              <Typography
                fontWeight="bold"
                color={isActive ? 'primary' : 'auto'}
                sx={{
                  textDecoration: 'underline',
                  textDecorationStyle: 'dotted',
                  textUnderlineOffset: '0.25rem',
                }}
              >
                {label}
              </Typography>
            </Tooltip>
          )}
          {!tooltip && (
            <Typography
              fontWeight="bold"
              color={isActive ? 'primary' : 'default'}
            >
              {label}
            </Typography>
          )}
          {isActive && <CancelOutlinedIcon color="primary" />}
        </Stack>
      </Box>
      <Box>{getFilterComponent()}</Box>
    </Stack>
  );
};



================================================
FILE: src/components/FilterGroup.tsx
================================================
import ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp';
import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  Chip,
  Stack,
  Typography,
} from '@mui/material';
import React from 'react';
import { useFilters } from './FilterContext';
import { hasValue } from './FilterField';

interface FilterGroupProps {
  label?: React.ReactNode;
  groupId: string | number;
  children: React.ReactNode;
}

export const FilterGroup: React.FC<FilterGroupProps> = ({
  label,
  groupId,
  children,
}) => {
  const { activeFilters, expandedGroup, dispatch } = useFilters();

  /**
   * Count the number of active filters in this group by using
   * the `field` prop from the FilterField children to look up
   * that filter in `activeFilters`
   */
  let activeChildren = 0;
  React.Children.forEach(children, (child) => {
    if (
      React.isValidElement(child) &&
      child.props.field &&
      hasValue(activeFilters.find((f: any) => f.field === child.props.field))
    ) {
      return activeChildren++;
    }
  });

  const handleChange =
    (panel: string | number) =>
    (event: React.SyntheticEvent, newExpanded: boolean) => {
      dispatch({
        type: 'SET_EXPANDED_GROUP',
        payload: newExpanded ? panel : false,
      });
    };

  return (
    <Accordion
      disableGutters
      elevation={0}
      expanded={expandedGroup === groupId}
      onChange={handleChange(groupId)}
      sx={{
        borderTop: '1px solid',
        borderTopColor: 'grey.300',
        '&:first-of-type': {
          borderTop: 'none',
        },
        '&::before': {
          display: 'none',
        },
      }}
    >
      <AccordionSummary
        expandIcon={<ArrowForwardIosSharpIcon />}
        aria-controls="panel1d-content"
        id="panel1d-header"
        sx={{
          flexDirection: 'row-reverse',
          '& .MuiAccordionSummary-expandIconWrapper .MuiSvgIcon-root': {
            fontSize: '1rem',
          },
          '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {
            transform: 'rotate(90deg)',
          },
          '& .MuiAccordionSummary-content': {
            marginLeft: 1,
            marginTop: 2,
            marginBottom: 2,
          },
        }}
      >
        <Stack direction="row" spacing={2} alignItems="center">
          <Typography fontSize="large">{label}</Typography>
          {activeChildren > 0 && (
            <Chip
              label={`${activeChildren} active`}
              color="primary"
              size="small"
            />
          )}
        </Stack>
      </AccordionSummary>
      <AccordionDetails>
        <Stack spacing={2}>{children}</Stack>
      </AccordionDetails>
    </Accordion>
  );
};



================================================
FILE: src/components/Filters.tsx
================================================
import CloseIcon from '@mui/icons-material/Close';
import {
  Box,
  Button,
  Chip,
  IconButton,
  Paper,
  PaperProps,
  Stack,
} from '@mui/material';
import React from 'react';
import { FilterState, useFilters } from './FilterContext';
import { hasValue } from './FilterField';

interface FilterPanelProps extends Omit<PaperProps, 'onChange'> {
  onChange?: (activeFilters: FilterState['activeFilters']) => void;
  onClose?: () => any;
  config?: any;
  header?: React.ReactNode;
  grouped?: boolean;
}

/**
 * Container panel for FilterField(s) and FilterGroup(s).
 * Acts as a multi-dimensional input where you can monitor
 * the active state of all filters contained inside the component.
 */
export const Filters: React.FC<FilterPanelProps> = ({
  header = 'Filters',
  grouped = true,
  onChange,
  onClose,
  config,
  children,
  ...rest
}) => {
  const { activeFilters, dispatch } = useFilters();

  /**
   * Count the number of active filters in this group by using
   * the `field` prop from the FilterField children to look up
   * that filter in `activeFilters`
   */
  let activeChildren = 0;
  React.Children.forEach(children, (child) => {
    if (
      React.isValidElement(child) &&
      child.props.field &&
      hasValue(activeFilters.find((f: any) => f.field === child.props.field))
    ) {
      return activeChildren++;
    }
  });

  const handleReset = () => {
    dispatch({ type: 'SET_ACTIVE_FILTERS', payload: [] });
  };

  return (
    <Paper elevation={0} variant="outlined" {...rest}>
      <Stack spacing={0}>
        {header && (
          <Stack
            direction="row"
            spacing={0}
            alignItems="center"
            sx={{
              borderBottom: '1px solid',
              borderBottomColor: 'grey.300',
              paddingLeft: 2,
              paddingRight: 2,
              paddingTop: 1,
              paddingBottom: 1,
            }}
          >
            <Stack direction="row" spacing={2} flex={1}>
              <Box>{header}</Box>
              {activeChildren > 0 && (
                <Chip
                  label={`${activeChildren} active`}
                  color="primary"
                  size="small"
                />
              )}
            </Stack>
            <Button
              variant="outlined"
              onClick={handleReset}
              sx={{
                marginRight: 1,
              }}
            >
              Reset
            </Button>
            <IconButton onClick={onClose}>
              <CloseIcon />
            </IconButton>
          </Stack>
        )}
        {grouped && <Stack spacing={0}>{children}</Stack>}
        {!grouped && (
          <Stack spacing={2} sx={{ padding: 2 }}>
            {children}
          </Stack>
        )}
      </Stack>
    </Paper>
  );
};



================================================
FILE: src/components/FiltersPanel.tsx
================================================
import CloseIcon from '@mui/icons-material/Close';
import { IconButton, Stack, StackProps, Typography } from '@mui/material';
import React from 'react';

enum FilterType {
  CHECKBOX_LIST = 'CHECKBOX_LIST',
  RANGE_SLIDER = 'RANGE_SLIDER',
}

interface Filter {
  label: string;
  field: string;
  type: FilterType;
  defaultValue: any;
}

interface FiltersProps extends StackProps {
  filters?: Filter[];
  onChange?: () => any;
  onClose?: () => any;
}

// const initFilterValues = (filters: Filter[]) => {
//   const filterValues: any = {};
//   filters.forEach((filter) => {
//     filterValues[filter.field] = filter.defaultValue;
//   })
// };

export const Filters: React.FC<FiltersProps> = ({
  onClose,
  children,
  ...rest
}) => {
  return (
    <Stack {...rest}>
      <Stack direction="row" alignItems="center">
        <Typography variant="h6" component="h2" flex={1}>
          FILTERS
        </Typography>
        <IconButton onClick={onClose}>
          <CloseIcon />
        </IconButton>
      </Stack>
      <Stack>{children}</Stack>
    </Stack>
  );
};



================================================
FILE: src/components/Footer.tsx
================================================
import { Box, Container, Grid, Stack, Typography } from '@mui/material';
import React from 'react';
import { cleanPath } from '../utils/queryParams.utils';
import { AppLink } from './AppLink';
import { ImageWrapper } from './ImageWrapper';

/**
 * Bottom footer component
 */
export const Footer: React.FC = () => {
  return (
    <Box
      sx={{
        backgroundColor: 'white',
        padding: 4,
      }}
    >
      <Container>
        <Grid container>
          <Grid item md={6}>
            <Stack
              direction="row"
              useFlexGap
              sx={{
                flexWrap: 'wrap',
              }}
            >
              <AppLink to="/">Home</AppLink>
            </Stack>
          </Grid>
          <Grid item md={6}>
            <Stack alignItems="center">
              <Typography>
                Describe your project, place a copyright statement, or credit
                your funding organizations.
              </Typography>
              <AppLink to="/">
                <ImageWrapper height={60}>
                  <img
                    src={cleanPath(
                      `${import.meta.env.BASE_URL}/strudel-logo-header.png`
                    )}
                  />
                </ImageWrapper>
              </AppLink>
            </Stack>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};



================================================
FILE: src/components/Formula.tsx
================================================
export const VALID_ELEMENTS =
  'H He Li Be B C N O F Ne Na Mg Al Si P S Cl Ar Kr K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Ar Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe Cs Ba La-Lu Hf Ta W Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Ac-Lr Rf Db Sg Bh Hs Mt Ds Rg Cn La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr'.split(
    ' '
  );

export const ELEMENTS_REGEX =
  /A[cglmrstu]|B[aehikr]?|C[adeflmnorsu]?|D[bsy]|E[rsu]|F[elmr]?|G[ade]|H[efgos]?|I[nr]?|Kr?|L[airuv]|M[dgnot]|N[abdeiop]?|Os?|P[abdmortu]?|R[abefghnu]|S[bcegimnr]?|T[abcehilm]|U(u[opst])?|V|W|Xe|Yb?|Z[nr]|La\-Lu?|Ac\-Lr?/g;

export const ELEMENTS_SPLIT_REGEX =
  /(A[cglmrstu]|B[aehikr]?|C[adeflmnorsu]?|D[bsy]|E[rsu]|F[elmr]?|G[ade]|H[efgos]?|I[nr]?|Kr?|L[airuv]|M[dgnot]|N[abdeiop]?|Os?|P[abdmortu]?|R[abefghnu]|S[bcegimnr]?|T[abcehilm]|U(u[opst])?|V|W|Xe|Yb?|Z[nr]|La\-Lu?|Ac\-Lr?)|(.)/g;

interface FormulaProps extends React.HTMLAttributes<HTMLSpanElement> {
  content: string;
}

const formulaItem = (str: string) => {
  if (!str.match(/\(|\)|\*/g) && !str.match(ELEMENTS_REGEX)) {
    return <sub>{str}</sub>;
  } else {
    return <span>{str}</span>;
  }
};

/**
 * Render a formula string with proper subscripts.
 * Non-elements will be interpreted as subscripts.
 */
export const Formula: React.FC<FormulaProps> = ({ content, ...rest }) => {
  let formula: React.ReactNode;
  const splitFormula = content.match(ELEMENTS_SPLIT_REGEX);
  formula = (
    <span>
      {splitFormula?.map((s, i) => <span key={i}>{formulaItem(s)}</span>)}
    </span>
  );

  return <span {...rest}>{formula}</span>;
};



================================================
FILE: src/components/ImageWrapper.css
================================================
.relative-height {
  height: 100%;
  width: auto;
}

.relative-width {
  height: auto;
  width: 100%;
}



================================================
FILE: src/components/ImageWrapper.tsx
================================================
import { Box, BoxProps } from '@mui/material';
import React from 'react';
import './ImageWrapper.css';

interface ImageWrapperProps extends BoxProps {
  height?: string | number;
  width?: string | number;
}

/**
 * Generic image wrapper component for sizing images relatively
 * based on container sizes. Provide either a height or width and
 * the image will size to that value and maintain its aspect ratio.
 */
export const ImageWrapper: React.FC<ImageWrapperProps> = ({
  height,
  width,
  sx,
  children,
  ...rest
}) => {
  return (
    <Box
      {...rest}
      sx={{
        ...sx,
        height: height || 'auto',
        overflow: 'hidden',
        width: width || 'auto',
      }}
    >
      {React.Children.map(children, (child) => {
        if (React.isValidElement(child)) {
          const imgClass = width ? 'relative-width' : 'relative-height';
          return React.cloneElement(child as React.ReactElement<any>, {
            className: `${child.props.className} ${imgClass}`,
          });
        }
      })}
    </Box>
  );
};



================================================
FILE: src/components/LabelValueTable.tsx
================================================
import React, { ReactNode } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableProps,
  TableRow,
} from '@mui/material';

interface LabelValuePair {
  label: ReactNode;
  value: ReactNode;
}

export interface LabelValueTableProps extends TableProps {
  rows?: LabelValuePair[];
  labelWidth?: number;
}

/**
 * Component for displaying a flat list of label-value pairs
 * in a two column table.
 */
export const LabelValueTable: React.FC<LabelValueTableProps> = ({
  rows,
  labelWidth = 150,
  ...rest
}) => {
  return (
    <Table size="small" aria-label="label value table" {...rest}>
      <TableBody>
        {rows?.map((row, i) => (
          <TableRow key={`${row.label}-${i}`} sx={{ border: 0 }}>
            <TableCell
              width={labelWidth}
              component="th"
              scope="row"
              sx={{
                border: 0,
                color: 'neutral.dark',
                pl: 0,
              }}
            >
              {row.label}
            </TableCell>
            <TableCell
              align="left"
              sx={{
                border: 0,
                pl: 0,
              }}
            >
              {row.value}
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};



================================================
FILE: src/components/Layout.tsx
================================================
import { Box, Stack } from '@mui/material';
import React, { PropsWithChildren } from 'react';
import { Footer } from './Footer';
import { TopBar } from './TopBar';

/**
 * Basic layout with navbar and footer
 */
export const Layout: React.FC<PropsWithChildren> = ({ children }) => {
  return (
    <Stack
      sx={{
        height: '100%',
      }}
    >
      <TopBar />
      <Box
        sx={{
          flex: 1,
        }}
      >
        {children}
      </Box>
      <Footer />
    </Stack>
  );
};



================================================
FILE: src/components/LinearMeter.tsx
================================================
import {
  LinearProgress,
  LinearProgressProps,
  linearProgressClasses,
} from '@mui/material';
import React from 'react';

/**
 * Styled version of the LinearProgress mui component that can be
 * used to show one-dimensional data in a horizontal meter.
 */
export const LinearMeter: React.FC<LinearProgressProps> = (props) => {
  return (
    <LinearProgress
      variant="determinate"
      sx={{
        height: 10,
        borderRadius: 5,
        [`&.${linearProgressClasses.colorPrimary}`]: {
          backgroundColor: 'neutral.dark',
        },
        [`& .${linearProgressClasses.bar}`]: {
          borderRadius: 5,
          backgroundColor: 'success.light',
        },
      }}
      {...props}
    />
  );
};



================================================
FILE: src/components/PageHeader.tsx
================================================
import React from 'react';
import {
  PaperProps,
  Breadcrumbs,
  Link,
  Paper,
  Stack,
  Typography,
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';

interface PageHeaderProps extends PaperProps {
  pageTitle: React.ReactNode;
  breadcrumbTitle?: string;
  description?: string;
  actions?: React.ReactNode;
}

export const PageHeader: React.FC<PageHeaderProps> = ({
  pageTitle,
  breadcrumbTitle,
  description,
  actions,
  ...rest
}) => {
  return (
    <Paper elevation={0} {...rest}>
      <Stack direction="row" justifyContent="space-between">
        <Stack spacing={1}>
          <Breadcrumbs aria-label="breadcrumb">
            <Link underline="hover" color="inherit" href="/">
              <HomeIcon />
            </Link>
            <Link underline="hover" color="inherit">
              ...
            </Link>
            <Typography color="text.primary">
              {breadcrumbTitle || pageTitle}
            </Typography>
          </Breadcrumbs>
          <Typography variant="h4" component="h1">
            {pageTitle}
          </Typography>
          <Typography variant="body2">{description}</Typography>
        </Stack>
        {actions}
      </Stack>
    </Paper>
  );
};



================================================
FILE: src/components/RangeSlider.tsx
================================================
import React, { useState } from 'react';
import { Box, Slider, SliderProps } from '@mui/material';

interface RangeSliderProps extends SliderProps {}

/**
 * Custom wrapper for the MUI Slider components where
 * the user is selecting a range of values.
 */
export const RangeSlider: React.FC<RangeSliderProps> = ({
  min = 0,
  max = 100,
  ...rest
}) => {
  const [value, setValue] = useState<number[]>([min, max]);

  const handleChange = (event: Event, v: number | number[]) => {
    setValue(v as number[]);
  };

  const marks = [
    {
      value: min,
      label: min,
    },
    {
      value: max,
      label: max,
    },
  ];

  return (
    <Box
      sx={{
        paddingLeft: 1,
        paddingRight: 1,
      }}
    >
      <Slider
        value={value}
        onChange={handleChange}
        min={min}
        max={max}
        marks={marks}
        {...rest}
      />
    </Box>
  );
};



================================================
FILE: src/components/SciDataGrid.tsx
================================================
import { Box, Typography } from '@mui/material';
import {
  DataGrid,
  DataGridProps,
  GridColDef,
  GridColumnHeaderParams,
  GridRenderCellParams,
} from '@mui/x-data-grid';
import React, { ReactNode } from 'react';
import { ArrayWithPopover } from './ArrayWithPopover';
import { CellWithPopover } from './CellWithPopover';
import { hasValue } from './FilterField';
import { Formula } from './Formula';

export type SciDataGridColDef = GridColDef & {
  units?: string;
  decimals?: number;
  sigFigs?: number;
  isFormula?: boolean;
  hasPopover?: boolean;
};

interface SciDataGridProps extends Omit<DataGridProps, 'columns'> {
  columns: SciDataGridColDef[];
}

const CellWrapper: React.FC<{ hasPopover?: boolean; children: ReactNode }> = ({
  hasPopover,
  children,
}) => {
  if (hasPopover) {
    return <CellWithPopover>{children}</CellWithPopover>;
  } else {
    return children;
  }
};

const getGridColumns = (columns: SciDataGridColDef[]) => {
  return columns.map((column) => {
    const { units, decimals, sigFigs, isFormula, hasPopover, ...gridColumn } =
      column;

    /**
     * Style column header and render unit label
     * underneath the headerName if units supplied
     */
    gridColumn.renderHeader = (params: GridColumnHeaderParams) => (
      <Box>
        <Typography fontSize="0.875rem" fontWeight="bold">
          {params.colDef.headerName}
        </Typography>
        {units && (
          <Typography
            fontSize="small"
            color="grey.700"
            sx={{
              position: 'absolute',
              bottom: '4px',
              left: params.colDef.type !== 'number' ? 0 : 'auto',
              right: params.colDef.type === 'number' ? 0 : 'auto',
              transform: 'translate(0, 0)',
              zIndex: 1000,
            }}
          >
            {units}
          </Typography>
        )}
      </Box>
    );

    /** Handle value transformation options */
    if (!gridColumn.valueFormatter && gridColumn.type === 'number') {
      gridColumn.valueFormatter = (value: number) => {
        /** Empty cells should render as '-' */
        if (!hasValue(value)) {
          return '-';
          /**
           * Round display values to nearest n decimals.
           * Exactly zero should display as just 0.
           * Values that would require more decimals to display
           * a non-zero digit should display "> 0.001" (decimals would be based on decimals value).
           */
        } else if ((!isNaN(value) && decimals) || decimals === 0) {
          if (value === 0) {
            return value;
          } else if (value < 1 / Math.pow(10, decimals)) {
            return `> ${1 / Math.pow(10, decimals)}`;
          } else {
            return value.toLocaleString(undefined, {
              minimumFractionDigits: decimals,
              maximumFractionDigits: decimals,
            });
          }
          /**
           * Round display values to a certain number of significant figures
           * and convert to scientific notation.
           */
        } else if (!isNaN(value) && sigFigs) {
          return value.toPrecision(sigFigs);
        } else {
          return value.toLocaleString();
        }
      };
    }

    /** Handle value transformation options */
    if (!gridColumn.renderCell) {
      gridColumn.renderCell = (params: GridRenderCellParams) => {
        if (Array.isArray(params.value)) {
          return <ArrayWithPopover values={params.value} />;
        }
        if (isFormula) {
          return (
            <CellWrapper hasPopover={hasPopover}>
              <Formula content={params.value} />
            </CellWrapper>
          );
        } else {
          return (
            <CellWrapper hasPopover={hasPopover}>
              {params.formattedValue}
            </CellWrapper>
          );
        }
      };
    }

    return gridColumn;
  });
};

/**
 * Extension of the MUI DataGrid that adds extra functionality
 * and options for scientific data tables.
 */
export const SciDataGrid: React.FC<SciDataGridProps> = ({
  rows,
  columns,
  ...rest
}) => {
  return (
    <DataGrid
      rows={rows}
      columns={getGridColumns(columns)}
      disableColumnSelector
      initialState={{
        pagination: { paginationModel: { page: 0, pageSize: 5 } },
      }}
      sx={{
        '& .MuiDataGrid-columnHeaderTitle': {
          fontWeight: 'bold',
        },
        '& .MuiDataGrid-cell:focus-within': {
          outline: 'none',
        },
        '& .MuiDataGrid-overlayWrapper': {
          minHeight: '4rem',
        },
      }}
      {...rest}
    />
  );
};



================================================
FILE: src/components/StrudelSlider.tsx
================================================
import React, { useState } from 'react';
import { Slider, SliderProps } from '@mui/material';

interface StrudelSliderProps extends SliderProps {}

/**
 * Custom wrapper for the MUI Slider component.
 * Enables advanced features such as value debounce.
 */
export const StrudelSlider: React.FC<StrudelSliderProps> = ({
  min = 0,
  max = 100,
  ...rest
}) => {
  const [value, setValue] = useState<number[]>([min, max]);

  const handleChange = (event: Event, v: number | number[]) => {
    setValue(v as number[]);
  };

  const marks = [
    {
      value: min,
      label: min,
    },
    {
      value: max,
      label: max,
    },
  ];

  return (
    <Slider
      value={value}
      onChange={handleChange}
      min={min}
      max={max}
      marks={marks}
      {...rest}
    />
  );
};



================================================
FILE: src/components/TopBar.tsx
================================================
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import { AppBar, IconButton, Stack, Toolbar, Typography } from '@mui/material';
import React from 'react';
import { cleanPath } from '../utils/queryParams.utils';
import { AppLink } from './AppLink';
import { ImageWrapper } from './ImageWrapper';

/**
 * Top navigation bar component
 */
export const TopBar: React.FC = () => {
  return (
    <AppBar
      color="default"
      position="static"
      component="nav"
      sx={{
        backgroundColor: 'white',
        borderBottom: '1px solid',
        borderBottomColor: 'grey.300',
        boxShadow: 'none',
      }}
    >
      <Toolbar>
        <Stack
          direction="row"
          sx={{
            alignItems: 'center',
            flexGrow: 1,
          }}
        >
          <AppLink to="/">
            <ImageWrapper height={30}>
              <img
                src={cleanPath(
                  `${import.meta.env.BASE_URL}/strudel-logo-icon.png`
                )}
              />
            </ImageWrapper>
          </AppLink>
          <AppLink to="/">
            <Typography variant="h6" component="div" fontWeight="bold">
              My Project
            </Typography>
          </AppLink>
        </Stack>
        <IconButton size="large" edge="start" color="inherit">
          <AccountCircleIcon />
        </IconButton>
      </Toolbar>
    </AppBar>
  );
};



================================================
FILE: src/context/actions.ts
================================================
export enum AppActionType {
  OPEN_API_MODAL = 'OPEN_API_MODAL',
  CLOSE_API_MODAL = 'CLOSE_API_MODAL',
}

export interface AppAction {
  type: AppActionType;
  payload?: any;
}

export const openApiModal = (): AppAction => ({
  type: AppActionType.OPEN_API_MODAL,
});

export const closeApiModal = (): AppAction => ({
  type: AppActionType.CLOSE_API_MODAL,
});



================================================
FILE: src/context/ContextProvider.tsx
================================================
import React, { useReducer, useContext } from 'react';
import { AppAction, AppActionType } from './actions';

export interface AppState {
  appTitle: string;
  apiModalOpen: boolean;
}

/**
 * AppProviderProps props are the same as the State except
 * some of the required props in the State are optional props.
 * These props have default values set in the initialState object.
 */
interface AppProviderProps extends Partial<AppState> {
  apiModalOpen?: boolean;
  children: React.ReactNode;
}

const AppContext = React.createContext<
  { state: AppState; dispatch: React.Dispatch<AppAction> } | undefined
>(undefined);

const initialState: AppState = {
  appTitle: '',
  apiModalOpen: false,
};

const initState = (state: AppState, props: AppProviderProps) => {
  const { children, ...rest } = props;
  return {
    ...state,
    ...rest,
  };
};

function appReducer(state: AppState, action: AppAction): AppState {
  switch (action.type) {
    case AppActionType.OPEN_API_MODAL: {
      return {
        ...state,
        apiModalOpen: true,
      };
    }
    case AppActionType.CLOSE_API_MODAL: {
      return {
        ...state,
        apiModalOpen: false,
      };
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`);
    }
  }
}

export const AppProvider: React.FC<AppProviderProps> = (props) => {
  const [state, dispatch] = useReducer(
    appReducer,
    initState(initialState, props)
  );
  const value = { state, dispatch };

  return (
    <AppContext.Provider value={value}>{props.children}</AppContext.Provider>
  );
};

export const useAppState = () => {
  const context = useContext(AppContext);
  if (context === undefined) {
    throw new Error('useAppState must be used within an AppProvider');
  }
  return context;
};



================================================
FILE: src/hooks/useDataFromSource.tsx
================================================
import * as d3 from 'd3-fetch';
import { useAppState } from '../context/ContextProvider';
import { useEffect, useState } from 'react';
import { openApiModal } from '../context/actions';

/**
 * Get data from a local source or REST API.
 * Include the local basename if pulling from a local source.
 */
export const useDataFromSource = (dataSource: string): any => {
  const { dispatch } = useAppState();
  const [data, setData] = useState();
  /** Get the base portion of the URL. Will be blank when running locally. */
  const base = document.querySelector('base')?.getAttribute('href') ?? '';
  /**
   * Use the VITE_BASE_URL env variable to specify a path prefix that
   * should be added to routes and local requests
   */
  const basePath = import.meta.env.VITE_BASE_URL || '';
  const basename = base + basePath;

  useEffect(() => {
    const fetchData = async () => {
      const fileExtension = dataSource.split('.').pop();
      const isExternal = dataSource.startsWith('http');
      const dataSourcePath = isExternal
        ? dataSource
        : `${basename}/${dataSource}`;
      let newData: any = [];
      if (fileExtension === 'csv') {
        newData = await d3.csv(dataSourcePath);
      } else if (fileExtension === 'tsv') {
        newData = await d3.tsv(dataSourcePath);
      } else if (fileExtension === 'json' || isExternal) {
        let headers = new Headers();
        const apiTokenName = localStorage.getItem('apiTokenName');
        const apiTokenValue = localStorage.getItem('apiTokenValue');
        if (apiTokenName && apiTokenValue) {
          headers = new Headers({
            [apiTokenName]: apiTokenValue,
          });
        }
        try {
          const response = await fetch(dataSourcePath, {
            headers: headers,
            method: 'GET',
            redirect: 'follow',
          });
          if (!response.ok) {
            dispatch(openApiModal());
            throw new Error('unable to fetch');
          }
          newData = await response.json();
        } catch (e) {
          // eslint-disable-next-line no-console
          console.log(e);
        }
      }
      setData(newData);
    };
    fetchData();
  }, []);

  return data;
};



================================================
FILE: src/hooks/useDetailQuery.ts
================================================
import { useQuery } from '@tanstack/react-query';
import { fetchData } from '../utils/queryParams.utils';

interface DetailQueryConfig {
  dataSource: string;
  dataIdField: string;
  paramId?: string;
  queryMode: 'server' | 'client';
  staticParams: Record<string, string> | null | undefined;
}

/**
 * Helper hook that wraps around the useQuery hook and fetches a
 * single detail item based on the config options supplied.
 */
export const useDetailQuery = (queryConfig: DetailQueryConfig): any => {
  let queryParams = { ...queryConfig.staticParams };
  const queryString = new URLSearchParams(queryParams).toString();
  let queryFn;
  if (queryConfig.queryMode === 'server') {
    queryFn = async (): Promise<any> => {
      const response = await fetch(
        `${queryConfig.dataSource}/${queryConfig.paramId}?${queryString}`
      );
      return response.json();
    };
  } else if (queryConfig.queryMode === 'client') {
    queryFn = async (): Promise<any> => {
      const results = await fetchData(queryConfig.dataSource);
      return results?.find((d: any) => {
        if (queryConfig.paramId) {
          return (
            d[queryConfig.dataIdField].toString() ===
            queryConfig.paramId.toString()
          );
        }
      });
    };
  }

  // Define query for this page and fetch data item
  const { isPending, isFetching, isError, data, error } = useQuery({
    queryKey: [queryConfig.dataSource, queryConfig.paramId],
    queryFn,
  });
  return { isPending, isFetching, isError, data, error };
};



================================================
FILE: src/hooks/useInterval.tsx
================================================
import { useEffect, useRef } from 'react';

type IntervalFunction = () => unknown | void;

export const useInterval = (callback: IntervalFunction, delay: number) => {
  const savedCallback = useRef<IntervalFunction | null>(null);

  // Remember the latest callback.
  useEffect(() => {
    savedCallback.current = callback;
  });

  // Set up the interval.
  useEffect(() => {
    function tick() {
      if (savedCallback.current !== null) {
        savedCallback.current();
      }
    }
    const id = setInterval(tick, delay);
    return () => clearInterval(id);
  }, [delay]);
};



================================================
FILE: src/hooks/useListQuery.ts
================================================
import { keepPreviousData, useQuery } from '@tanstack/react-query';
import { DataFilter } from '../components/FilterContext';
import { FilterConfig } from '../types/filters.types';
import { createFilterParams, fetchData } from '../utils/queryParams.utils';

interface DataQueryConfig {
  activeFilters: DataFilter[];
  dataSource: string;
  filterConfigs: FilterConfig[];
  offset: number;
  page: number;
  pageSize: number;
  queryMode: 'server' | 'client';
  staticParams: Record<string, string> | null | undefined;
}

/**
 * Helper hook that wraps around the useQuery hook and inputs the config
 * options specified in the taskflow config as well as other filtering options.
 */
export const useListQuery = (dataQueryConfig: DataQueryConfig): any => {
  // If in server mode, create query params from the active filters
  let queryParams =
    dataQueryConfig.queryMode === 'server'
      ? createFilterParams(
          dataQueryConfig.activeFilters,
          dataQueryConfig.filterConfigs
        )
      : new URLSearchParams();

  // Tack on the static query params
  if (dataQueryConfig.staticParams) {
    Object.keys(dataQueryConfig.staticParams).forEach((param) => {
      if (dataQueryConfig.staticParams) {
        queryParams.append(
          param,
          dataQueryConfig.staticParams[param].toString()
        );
      }
    });
  }

  // If in server mode, tack on pagination query params
  if (dataQueryConfig.queryMode === 'server') {
    queryParams.append('limit', dataQueryConfig.pageSize.toString());
    queryParams.append('offset', dataQueryConfig.offset.toString());
  }

  // The queryKey only needs to change dynamically in server mode
  const queryKey =
    dataQueryConfig.queryMode === 'server'
      ? [
          dataQueryConfig.dataSource,
          {
            ...dataQueryConfig.activeFilters,
            pageSize: dataQueryConfig.pageSize,
            offset: dataQueryConfig.offset,
          },
        ]
      : [dataQueryConfig.dataSource];

  // Define query for this page and fetch data items
  const { isPending, isFetching, isError, data, error } = useQuery({
    queryKey,
    queryFn: async (): Promise<any> => {
      const queryString = queryParams.toString();
      let fullDataSourcePath = dataQueryConfig.dataSource;
      if (queryString && queryString.length > 0) {
        fullDataSourcePath = `${dataQueryConfig.dataSource}?${queryString}`;
      }
      const results = await fetchData(fullDataSourcePath);
      return results;
    },
    placeholderData: keepPreviousData,
  });
  return { isPending, isFetching, isError, data, error };
};



================================================
FILE: src/pages/__root.tsx
================================================
import { Box, Stack } from '@mui/material';
import { createRootRoute, Outlet } from '@tanstack/react-router';
import { TopBar } from '../components/TopBar';

/**
 * Basic layout with navbar and footer
 */
export const Route = createRootRoute({
  component: () => (
    <Stack
      spacing={0}
      sx={{
        height: '100%',
      }}
    >
      <TopBar />
      <Box
        component="main"
        sx={{
          flex: 1,
          paddingBottom: 4,
        }}
      >
        <Outlet />
      </Box>
    </Stack>
  ),
});



================================================
FILE: src/pages/index.tsx
================================================
import {
  Box,
  Container,
  Divider,
  Grid,
  Paper,
  Stack,
  Typography,
} from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { PropsWithChildren } from 'react';
import { router } from '../App';
import { AppLink } from '../components/AppLink';
import {
  getNameFromPath,
  getTopLevelRoutes,
  getTaskFlowRoutes,
} from '../utils/string.utils';
import { ImageWrapper } from '../components/ImageWrapper';

export const Route = createFileRoute('/')({
  component: Index,
});

/**
 * Home page component that renders at the root route /
 */
function Index() {
  const topLevelRoutes = getTopLevelRoutes(router.flatRoutes);
  const taskflowRoutes = getTaskFlowRoutes(router.flatRoutes);

  const PaperWithHover: React.FC<PropsWithChildren> = ({ children }) => (
    <Paper
      sx={{
        padding: 2,
        transition: '0.25s',
        '&:hover': {
          backgroundColor: 'grey.200',
        },
      }}
    >
      {children}
    </Paper>
  );

  return (
    <Box>
      <Box
        sx={{
          backgroundColor: 'grey.200',
          height: '250px',
        }}
      >
        <Container maxWidth="lg" sx={{ height: '100%' }}>
          <Stack alignItems="center" justifyContent="center" height="100%">
            <ImageWrapper height={60}>
              <img src="strudel-logo-icon.png" />
            </ImageWrapper>
            <Typography variant="h6" component="h1">
              You just started an app with STRUDEL!
            </Typography>
          </Stack>
        </Container>
      </Box>
      <Container
        maxWidth="lg"
        sx={{
          marginTop: 3,
          marginBottom: 3,
        }}
      >
        <Stack spacing={3}>
          <Box>
            <Grid container spacing={1}>
              <Grid item sm={6}>
                <AppLink to="/">
                  <PaperWithHover>
                    <Stack>
                      <Typography
                        variant="h5"
                        component="h3"
                        fontWeight="bold"
                        color="primary.main"
                      >
                        Home
                      </Typography>
                      <Box>
                        <Typography fontSize="small">
                          <code>{`/src/pages/index.tsx`}</code>
                        </Typography>
                      </Box>
                    </Stack>
                  </PaperWithHover>
                </AppLink>
              </Grid>
              {topLevelRoutes.map((route) => (
                <Grid key={route.id} item sm={6}>
                  <AppLink to={route.fullPath}>
                    <PaperWithHover>
                      <Stack>
                        <Typography
                          variant="h5"
                          component="h3"
                          fontWeight="bold"
                          color="primary.main"
                        >
                          {getNameFromPath(route.fullPath)}
                        </Typography>
                        <Box>
                          <Typography fontSize="small">
                            <code>{`/src/pages${route.id}index.tsx`}</code>
                          </Typography>
                        </Box>
                      </Stack>
                    </PaperWithHover>
                  </AppLink>
                </Grid>
              ))}
            </Grid>
          </Box>
          <Divider />
          <Box>
            {taskflowRoutes.length > 0 && (
              <Grid container spacing={1}>
                {taskflowRoutes.map((route) => (
                  <Grid key={route.id} item sm={6}>
                    <AppLink to={route.fullPath}>
                      <PaperWithHover>
                        <Stack>
                          <Typography
                            variant="h5"
                            component="h3"
                            fontWeight="bold"
                            color="primary.main"
                          >
                            {getNameFromPath(route.fullPath)}
                          </Typography>
                          <Box>
                            <Typography fontSize="small">
                              <code>{`/src/pages${route.id}index.tsx`}</code>
                            </Typography>
                          </Box>
                        </Stack>
                      </PaperWithHover>
                    </AppLink>
                  </Grid>
                ))}
              </Grid>
            )}
            {taskflowRoutes.length === 0 && (
              <Typography>No Task Flows configured in your app.</Typography>
            )}
          </Box>
        </Stack>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/compare-data/_layout.tsx
================================================
import { Box } from '@mui/material';
import { createFileRoute, Outlet } from '@tanstack/react-router';
import { useDataFromSource } from '../../hooks/useDataFromSource';
import { CompareDataProvider } from './-context/ContextProvider';

export const Route = createFileRoute('/compare-data/_layout')({
  component: CompareDataWrapper,
});

/**
 * Top-level wrapper for the compare-data Task Flow templates.
 * Inner pages are rendered inside the `<Outlet />` component
 */
function CompareDataWrapper() {
  // CUSTOMIZE: the data source for the main data table.
  const scenarios = useDataFromSource('dummy-data/scenarios.json');

  // CUSTOMIZE: the columns for the main data table
  const columns = [
    {
      field: 'name',
      headerName: 'Scenario Name',
      width: 200,
    },
    {
      field: 'description',
      headerName: 'Description',
      width: 200,
    },
    {
      field: 'analysis_type',
      headerName: 'Analysis Type',
      width: 200,
    },
    {
      field: 'volumetric_flow_rate',
      headerName: 'Volumetric Flow Rate',
      width: 200,
      isComparisonMetric: true,
    },
    {
      field: 'tss_concentration',
      headerName: 'TSS Concentration',
      width: 200,
      isComparisonMetric: true,
    },
    {
      field: 'cod_concentration',
      headerName: 'COD Concentration',
      width: 200,
      isComparisonMetric: true,
    },
    {
      field: 'tkn_concentration',
      headerName: 'TKN Concentration',
      width: 200,
      isComparisonMetric: true,
    },
    {
      field: 'acetic_acid_concentration',
      headerName: 'Acetic Acid Concentration',
      width: 200,
      isComparisonMetric: true,
    },
  ];

  return (
    <Box>
      <CompareDataProvider
        data={scenarios || []}
        columns={columns}
        // CUSTOMIZE: the unique identifier field in the data
        dataIdField="id"
      >
        <Outlet />
      </CompareDataProvider>
    </Box>
  );
}



================================================
FILE: src/pages/compare-data/-context/actions.ts
================================================
import { CompareDataState } from './ContextProvider';

export enum CompareDataActionType {
  SET_DATA = 'SET_DATA',
  SET_SELECTED_ROWS = 'SET_SELECTED_ROWS',
  SET_COMPARISON_DATA = 'SET_COMPARISON_DATA',
  SET_COMPARING = 'SET_COMPARING',
}

export interface CompareDataAction {
  type: CompareDataActionType;
  payload?: any;
}

export const setData = (data: CompareDataState['data']): CompareDataAction => ({
  type: CompareDataActionType.SET_DATA,
  payload: data,
});

export const setSelectedRows = (
  rows: CompareDataState['selectedRows']
): CompareDataAction => ({
  type: CompareDataActionType.SET_SELECTED_ROWS,
  payload: rows,
});

export const setComparisonData = (
  data: CompareDataState['comparisonData'],
  columns: CompareDataState['comparisonColumns']
): CompareDataAction => ({
  type: CompareDataActionType.SET_COMPARISON_DATA,
  payload: { data, columns },
});

export const setComparing = (
  comparing: CompareDataState['comparing']
): CompareDataAction => ({
  type: CompareDataActionType.SET_COMPARING,
  payload: comparing,
});



================================================
FILE: src/pages/compare-data/-context/ContextProvider.tsx
================================================
import React, { useEffect, useReducer, useContext } from 'react';
import {
  CompareDataAction,
  CompareDataActionType,
  setComparisonData,
  setData,
} from './actions';
import { GridRowSelectionModel } from '@mui/x-data-grid';

interface ComparisonRow {
  [key: string]: number | string | null | undefined;
}

export interface CompareDataState {
  data: any[];
  selectedRows: GridRowSelectionModel;
  columns: any[];
  comparisonColumns: any[];
  dataIdField: string;
  comparing?: boolean;
  comparisonData: ComparisonRow[];
}

/**
 * CompareDataProvider props are the same as the State except
 * some of the required props in the State are optional props.
 * These props have default values set in the initialState object.
 *
 * Switched to using Partial<> so that the props doesn't abide by the same
 * required props as the State, but this leaves it unclear which props are
 * optional when initiating a Provider component. But it is simpler.
 * Not sure yet which to stick with going forward.
 */
interface CompareDataProviderProps extends Partial<CompareDataState> {
  data?: CompareDataState['data'];
  comparisonColumns?: CompareDataState['comparisonColumns'];
  children: React.ReactNode;
}

const CompareDataContext = React.createContext<
  | { state: CompareDataState; dispatch: React.Dispatch<CompareDataAction> }
  | undefined
>(undefined);

const initialState: CompareDataState = {
  data: [],
  columns: [],
  selectedRows: [],
  dataIdField: 'id',
  comparing: false,
  comparisonData: [],
  comparisonColumns: [],
};

const initState = (
  state: CompareDataState,
  props: CompareDataProviderProps
) => {
  const { children, ...rest } = props;
  return {
    ...state,
    ...rest,
  };
};

function CompareDataReducer(
  state: CompareDataState,
  action: CompareDataAction
): CompareDataState {
  switch (action.type) {
    case CompareDataActionType.SET_DATA: {
      return {
        ...state,
        data: action.payload,
      };
    }
    case CompareDataActionType.SET_SELECTED_ROWS: {
      return {
        ...state,
        selectedRows: action.payload,
      };
    }
    case CompareDataActionType.SET_COMPARISON_DATA: {
      return {
        ...state,
        comparisonData: action.payload.data,
        comparisonColumns: action.payload.columns,
      };
    }
    case CompareDataActionType.SET_COMPARING: {
      return {
        ...state,
        comparing: action.payload,
      };
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`);
    }
  }
}

export const CompareDataProvider: React.FC<CompareDataProviderProps> = (
  props
) => {
  const [state, dispatch] = useReducer(
    CompareDataReducer,
    initState(initialState, props)
  );
  const value = { state, dispatch };

  useEffect(() => {
    if (props.data) {
      dispatch(setData(props.data));
    }
  }, [props.data]);

  /**
   * Side effect to occur after comparing changes.
   * When comparing is set to true, generate data for
   * the comparison table based on the selected scenarios.
   */
  useEffect(() => {
    if (state.comparing && state.selectedRows.length > 1) {
      const metrics = state.columns.filter((c) => c.isComparisonMetric);
      const scenarios = state.data.filter(
        (d) => state.selectedRows.indexOf(d.id) > -1
      );
      const comparisonColumns: any[] = [
        {
          field: 'metric',
          headerName: 'Metric',
          width: 200,
          cellClassName: 'compare-data--metric',
        },
      ];
      const comparisonData = metrics.map((m, i) => {
        const row: ComparisonRow = {};
        row.metric = m.headerName;
        scenarios.forEach((s) => {
          row[s.name] = s[m.field];
          if (i === 0) {
            comparisonColumns.push({
              field: s.name,
              headerName: s.name,
              width: 200,
            });
          }
        });
        return row;
      });
      dispatch(setComparisonData(comparisonData, comparisonColumns));
    }
  }, [state.comparing]);

  return (
    <CompareDataContext.Provider value={value}>
      {props.children}
    </CompareDataContext.Provider>
  );
};

export const useCompareData = () => {
  const context = useContext(CompareDataContext);
  if (context === undefined) {
    throw new Error(
      'useCompareData must be used within an CompareDataProvider'
    );
  }
  return context;
};



================================================
FILE: src/pages/compare-data/-tests/compare-data.cy.ts
================================================
describe('The Compare Data Task Flow', () => {
  beforeEach(() => {
    cy.visit('/compare-data');
  });

  it('successfully loads', () => {
    cy.get('h1').contains('Compare Data');
  });

  it('selects two rows and compares them', () => {
    cy.get('.MuiCheckbox-root').eq(1).click();
    cy.get('button[data-testid="cpd-compare-button"]').should('be.disabled');
    cy.get('.MuiCheckbox-root').eq(2).click();
    cy.get('button[data-testid="cpd-compare-button"]')
      .contains('Compare Scenarios (2)', { matchCase: false })
      .click();
    cy.get('.MuiDataGrid-columnHeader').should('have.length', 3);
  });

  it('opens the new item page and closes it', () => {
    cy.get('button[data-testid="cpd-new-button"]').click();
    cy.get('button[data-testid="cpd-cancel-button"]');
    cy.get('button[data-testid="cpd-save-button"]').click();
    cy.get('button[data-testid="cpd-compare-button"]');
  });
});



================================================
FILE: src/pages/compare-data/_layout/compare.tsx
================================================
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { Box, Button, Container, Paper, Stack } from '@mui/material';
import { useEffect } from 'react';
import { PageHeader } from '../../../components/PageHeader';
import { DataGrid } from '@mui/x-data-grid';
import { createFileRoute } from '@tanstack/react-router';
import { AppLink } from '../../../components/AppLink';
import { setComparing } from '../-context/actions';
import { useCompareData } from '../-context/ContextProvider';

export const Route = createFileRoute('/compare-data/_layout/compare')({
  component: ScenarioComparison,
});

/**
 * Comparison page for the compare-data Task Flow.
 * Displays a table with the selected items from `<ScenarioList>`
 * as the columns and the metrics as the rows.
 */
function ScenarioComparison() {
  const { state, dispatch } = useCompareData();

  /**
   * Set comparing to true whenever this page renders.
   * Set it back to false when the component is torn down.
   */
  useEffect(() => {
    dispatch(setComparing(true));
    return () => {
      dispatch(setComparing(false));
    };
  }, []);

  return (
    <Box>
      <PageHeader
        // CUSTOMIZE: the title that displays at the top of the page
        pageTitle="Compare Data App"
        // CUSTOMIZE: the subtitle that displays underneath the title
        description="Description of this app section"
        actions={
          <Stack direction="row">
            <Box>
              <AppLink to="..">
                {/* CUSTOMIZE: the back button text */}
                <Button variant="contained" startIcon={<ArrowBackIcon />}>
                  Back to scenarios
                </Button>
              </AppLink>
            </Box>
            <Box>
              <AppLink to="/compare-data/new">
                {/* CUSTOMIZE: the new button text */}
                <Button variant="contained">New scenario</Button>
              </AppLink>
            </Box>
          </Stack>
        }
        sx={{
          padding: 3,
          backgroundColor: 'white',
        }}
      />
      <Container
        maxWidth="xl"
        sx={{
          marginTop: 3,
          marginBottom: 3,
        }}
      >
        <Paper
          sx={{
            '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {
              borderRight: '1px solid',
              borderRightColor: 'neutral.main',
            },
            '& .compare-data--metric': {
              fontWeight: 'bold',
            },
          }}
        >
          {state.comparing && (
            <DataGrid
              rows={state.comparisonData}
              getRowId={(row) => row.metric!}
              columns={state.comparisonColumns}
              disableRowSelectionOnClick
              disableDensitySelector
              disableColumnFilter
            />
          )}
        </Paper>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/compare-data/_layout/index.tsx
================================================
import { Box, Button, Container, Paper, Stack } from '@mui/material';
import { GridToolbar } from '@mui/x-data-grid';
import { PageHeader } from '../../../components/PageHeader';
import { SciDataGrid } from '../../../components/SciDataGrid';
import { AppLink } from '../../../components/AppLink';
import { createFileRoute } from '@tanstack/react-router';
import { useCompareData } from '../-context/ContextProvider';
import { setSelectedRows } from '../-context/actions';

export const Route = createFileRoute('/compare-data/_layout/')({
  component: ScenarioList,
});

/**
 * List page to show comparable items in the compare-data Task Flow.
 * Items in this table are selectable and can be sent to the `<ScenarioComparison>`
 * page to be rendered in the comparison table.
 */
function ScenarioList() {
  const { state, dispatch } = useCompareData();

  return (
    <Box>
      <PageHeader
        // CUSTOMIZE: the title that displays at the top of the page
        pageTitle="Compare Data App"
        // CUSTOMIZE: the subtitle that displays underneath the title
        description="Description of this app section"
        actions={
          <Stack direction="row">
            <Box>
              {/* CUSTOMIZE: the compare button text */}
              {state.selectedRows.length < 2 && (
                <Button
                  variant="outlined"
                  disabled
                  data-testid="cpd-compare-button"
                >
                  Compare scenarios
                </Button>
              )}
              {state.selectedRows.length > 1 && (
                <AppLink to="/compare-data/compare">
                  <Button variant="contained" data-testid="cpd-compare-button">
                    Compare scenarios ({state.selectedRows.length})
                  </Button>
                </AppLink>
              )}
            </Box>
            <Box>
              <AppLink to="/compare-data/new">
                {/* CUSTOMIZE: the new button text */}
                <Button variant="contained" data-testid="cpd-new-button">
                  New scenario
                </Button>
              </AppLink>
            </Box>
          </Stack>
        }
        sx={{
          padding: 3,
          backgroundColor: 'white',
        }}
      />
      <Container
        maxWidth="xl"
        sx={{
          paddingTop: 3,
          paddingBottom: 3,
        }}
      >
        <Paper>
          <SciDataGrid
            rows={state.data}
            getRowId={(row) => row[state.dataIdField]}
            columns={state.columns}
            checkboxSelection
            rowSelectionModel={state.selectedRows}
            onRowSelectionModelChange={(rows) =>
              dispatch(setSelectedRows(rows))
            }
            disableRowSelectionOnClick
            disableDensitySelector
            disableColumnFilter
            initialState={{
              pagination: { paginationModel: { page: 1, pageSize: 25 } },
            }}
            slots={{ toolbar: GridToolbar }}
            slotProps={{
              toolbar: {
                showQuickFilter: true,
              },
            }}
            sx={{
              '& .MuiDataGrid-toolbarContainer': {
                padding: 2,
                paddingBottom: 0,
              },
            }}
          />
        </Paper>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/compare-data/_layout/new.tsx
================================================
import { Box, Button, Container, Paper, Stack } from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { useEffect } from 'react';
import { AppLink } from '../../../components/AppLink';
import { PageHeader } from '../../../components/PageHeader';
import { useCompareData } from '../-context/ContextProvider';
import { setComparing } from '../-context/actions';

export const Route = createFileRoute('/compare-data/_layout/new')({
  component: NewScenario,
});

/**
 * Page for filling out a form for adding a new item to
 * the main list in the compare-data Task Flow.
 */
function NewScenario() {
  const { dispatch } = useCompareData();

  /**
   * Set comparing to true whenever this page renders.
   * Set it back to false when the component is torn down.
   */
  useEffect(() => {
    dispatch(setComparing(true));
    return () => {
      dispatch(setComparing(false));
    };
  }, []);

  return (
    <Box>
      <PageHeader
        // CUSTOMIZE: the title that displays at the top of the page
        pageTitle="New Scenario"
        // CUSTOMIZE: the subtitle that displays underneath the title
        description="Description of this app section"
        actions={
          <Stack direction="row">
            <Box>
              <AppLink to="..">
                <Button
                  variant="contained"
                  color="warning"
                  data-testid="cpd-cancel-button"
                >
                  Cancel
                </Button>
              </AppLink>
            </Box>
            <Box>
              <AppLink to="..">
                {/* CUSTOMIZE: the save button text */}
                <Button variant="contained" data-testid="cpd-save-button">
                  Save scenario
                </Button>
              </AppLink>
            </Box>
          </Stack>
        }
        sx={{
          padding: 3,
          backgroundColor: 'white',
        }}
      />
      <Container
        maxWidth="xl"
        sx={{
          marginTop: 3,
          marginBottom: 3,
        }}
      >
        <Paper
          sx={{
            padding: 2,
          }}
        >
          {/* CUSTOMIZE: form elements */}
          Work in progress
        </Paper>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/contribute-data/_layout.tsx
================================================
import { Box } from '@mui/material';
import { ContributeDataProvider } from './-context/ContextProvider';
import { createFileRoute, Outlet } from '@tanstack/react-router';

export const Route = createFileRoute('/contribute-data/_layout')({
  component: ContributeDataLayout,
});

/**
 * Top-level wrapper for the contribute-data Task Flow templates.
 * Inner pages are rendered inside the `<Outlet />` component
 */
function ContributeDataLayout() {
  return (
    <Box>
      <ContributeDataProvider>
        <Outlet />
      </ContributeDataProvider>
    </Box>
  );
}

export default ContributeDataLayout;



================================================
FILE: src/pages/contribute-data/-components/DataFilesPanel.tsx
================================================
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import { Button, Paper, Stack, Typography } from '@mui/material';
import { GridActionsCellItem, GridColDef } from '@mui/x-data-grid';
import React from 'react';
import { DataGrid } from '@mui/x-data-grid';

// CUSTOMIZE: data for the files table
export const files = [
  {
    id: 0,
    filename: 'xx',
    type: 'csv',
    size: '213 MB',
    status: 'Uploading',
  },
  {
    id: 1,
    filename: 'xy',
    type: 'csv',
    size: '213 MB',
    status: 'Uploading',
  },
  {
    id: 2,
    filename: 'xs',
    type: 'csv',
    size: '213 MB',
    status: 'Uploading',
  },
  {
    id: 3,
    filename: 'xe',
    type: 'tsv',
    size: '2 GB',
    status: 'Uploaded',
  },
  {
    id: 4,
    filename: 'xz',
    type: 'txt',
    size: '15 MB',
    status: 'Uploaded',
  },
];

// CUSTOMIZE: columns for the files table
const columns: GridColDef[] = [
  {
    field: 'filename',
    headerName: 'File Name',
    width: 150,
  },
  {
    field: 'type',
    headerName: 'Type',
    width: 100,
  },
  {
    field: 'size',
    headerName: 'Size',
    width: 100,
  },
  {
    field: 'status',
    headerName: 'Status',
    width: 100,
  },
  {
    field: 'actions',
    headerName: 'Actions',
    type: 'actions',
    getActions: () => [
      <GridActionsCellItem icon={<EditIcon />} label="Edit" />,
      <GridActionsCellItem icon={<DeleteIcon />} label="Delete" />,
    ],
    flex: 1,
  },
];

/**
 * Panel to display on the `<NewDataset>` page of the contribute-data Task Flow.
 * Shows a table with files that have been uploaded as part of the dataset.
 */
export const DataFilesPanel: React.FC = () => {
  return (
    <Paper
      sx={{
        height: '100%',
      }}
    >
      <Stack
        direction="row"
        spacing={2}
        alignItems="center"
        justifyContent="space-between"
        sx={{
          padding: 2,
        }}
      >
        <Typography fontWeight="bold" component="h2">
          Dataset Files
        </Typography>
        <Button variant="contained">Add Files</Button>
      </Stack>
      <DataGrid
        rows={files}
        // CUSTOMIZE: data id field
        getRowId={(row) => row.id}
        columns={columns}
        disableColumnSelector
        disableRowSelectionOnClick
        sx={{
          height: 'auto',
        }}
      />
    </Paper>
  );
};



================================================
FILE: src/pages/contribute-data/-components/DatasetView.tsx
================================================
import { Box, Paper, Stack, Typography } from '@mui/material';
import { GridColDef } from '@mui/x-data-grid';
import React from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { LabelValueTable } from '../../../components/LabelValueTable';
import { files } from './DataFilesPanel';

// CUSTOMIZE: columns for the dataset files table
const columns: GridColDef[] = [
  {
    field: 'filename',
    headerName: 'File Name',
    width: 150,
  },
  {
    field: 'type',
    headerName: 'Type',
    width: 100,
  },
  {
    field: 'size',
    headerName: 'Size',
    width: 100,
  },
  {
    field: 'status',
    headerName: 'Status',
    flex: 1,
  },
];

/**
 * Panel to display data entered from the `<MetadataPanel>` and the `<DataFilesPanel>` from
 * the previous step in contribute-data (not currently hooked together).
 * This component is rendered as part of the `<ReviewDataset>` page.
 */
export const DatasetView: React.FC = () => {
  return (
    <Paper
      sx={{
        height: '100%',
        padding: 2,
      }}
    >
      <Stack>
        {/* CUSTOMIZE: the dataset title */}
        <Typography component="h2" variant="h6">
          My Dataset
        </Typography>
        {/* CUSTOMIZE: the dataset description */}
        <Typography>
          Laboris incididunt ullamco dolore ex. Non ad aute cillum excepteur.
          Quis exercitation duis quis ad. Laborum eiusmod incididunt magna dolor
          eiusmod cupidatat non veniam sit consequat anim esse. Dolore fugiat
          incididunt et qui dolore dolor. Ut aute dolore magna ea commodo
          ullamco velit in aliquip sunt id ea.
        </Typography>
        {/* CUSTOMIZE: the dataset metadata */}
        <LabelValueTable
          rows={[
            {
              label: 'DOI',
              value: 'http://dx.doi.org/10.123432/NGT/XXXXXXX',
            },
            {
              label: 'Start Date',
              value: '1 January 2023',
            },
            {
              label: 'End Date',
              value: '1 November 2023',
            },
            {
              label: 'Category',
              value: 'Groundwater',
            },
          ]}
        />
        <Box>
          <Typography component="h3" fontWeight="bold">
            Dataset Files
          </Typography>
          <DataGrid
            // CUSTOMIZE: the data source for the dataset files table
            rows={files}
            // CUSTOMIZE: the data id field
            getRowId={(row) => row.id}
            columns={columns}
            disableColumnSelector
            disableRowSelectionOnClick
          />
        </Box>
      </Stack>
    </Paper>
  );
};



================================================
FILE: src/pages/contribute-data/-components/MetadataPanel.tsx
================================================
import {
  Box,
  FormControl,
  FormHelperText,
  InputLabel,
  List,
  ListItem,
  MenuItem,
  Paper,
  Select,
  SelectChangeEvent,
  Stack,
  TextField,
  Typography,
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers';
import dayjs from 'dayjs';
import React, { useState } from 'react';

/**
 * Panel for entering metadata about the new dataset in the contribute-data Task Flow.
 * Data from this panel would then display in the <DatasetView> in the next step (not currently hooked together).
 */
export const MetadataPanel: React.FC = () => {
  const [category, setCategory] = useState<string>();
  const [startDate, setStartDate] = useState<dayjs.Dayjs | null>(null);
  const [endDate, setEndDate] = useState<dayjs.Dayjs | null>(null);

  const handleCategoryChange = (event: SelectChangeEvent) => {
    setCategory(event.target.value);
  };

  /**
   * Content to render on the page for this component
   */
  return (
    <Paper>
      <Box
        sx={{
          padding: 2,
          borderBottom: '1px solid',
          borderBottomColor: 'neutral.main',
        }}
      >
        <Typography fontWeight="bold" component="h2">
          Metadata
        </Typography>
      </Box>
      <Stack direction="row" spacing={0}>
        <Box
          component="aside"
          sx={{
            borderRight: '1px solid',
            borderRightColor: 'neutral.main',
            width: '150px',
          }}
        >
          {/* CUSTOMIZE: the metadata groups */}
          <List>
            <ListItem>Overview</ListItem>
            <ListItem>Dates</ListItem>
            <ListItem>Locations</ListItem>
            <ListItem>Methods</ListItem>
          </List>
        </Box>
        <Box
          sx={{
            padding: 2,
          }}
        >
          <Stack>
            <Stack
              spacing={3}
              sx={{
                borderBottom: '1px solid',
                borderBottomColor: 'neutral.main',
                paddingBottom: 2,
              }}
            >
              {/* CUSTOMIZE: the metdata fields */}
              <Typography color="neutral.dark" fontWeight="bold">
                Overview
              </Typography>
              <TextField
                label="Dataset Title"
                variant="outlined"
                helperText="A brief, meaningful title for dataset including topic, dates and location. Ex: Sapflow and Soil Moisture Raw sensor data. Jan 2023-Apr 2023. San Diego, CA."
                fullWidth
              />
              <TextField
                label="DOI"
                variant="outlined"
                helperText="Digital object identifier for the dataset"
                fullWidth
              />
              <FormControl>
                <InputLabel id="demo-simple-select-helper-label">
                  Category
                </InputLabel>
                <Select
                  labelId="demo-simple-select-helper-label"
                  id="demo-simple-select-helper"
                  value={category}
                  label="Category"
                  onChange={handleCategoryChange}
                >
                  <MenuItem value="Fires">Fires</MenuItem>
                  <MenuItem value="Floods">Floods</MenuItem>
                  <MenuItem value="Groundwater">Groundwater</MenuItem>
                </Select>
                <FormHelperText>
                  Select the category most closely associeted with your dataset.
                </FormHelperText>
              </FormControl>
              <TextField
                label="Dataset Summary"
                variant="outlined"
                helperText="Briefly describe the dataset."
                fullWidth
                multiline
                minRows={4}
              />
            </Stack>
            <Stack
              spacing={3}
              sx={{
                borderBottom: '1px solid',
                borderBottomColor: 'neutral.main',
                paddingBottom: 2,
              }}
            >
              <Typography color="neutral.dark" fontWeight="bold">
                Dates
              </Typography>
              <Stack direction="row">
                <DatePicker
                  value={startDate}
                  label="Start Date"
                  slotProps={{
                    actionBar: {
                      actions: ['clear', 'today'],
                    },
                  }}
                  onChange={(value) => setStartDate(value)}
                />
                <DatePicker
                  value={endDate}
                  label="End Date"
                  slotProps={{
                    actionBar: {
                      actions: ['clear', 'today'],
                    },
                  }}
                  onChange={(value) => setEndDate(value)}
                />
              </Stack>
            </Stack>
            <Stack spacing={3}>
              <Typography color="neutral.dark" fontWeight="bold">
                Contacts
              </Typography>
              <TextField
                label="Point of Contact"
                variant="outlined"
                helperText="Primary contact person for the dataset"
                fullWidth
              />
              <TextField
                label="Originator"
                variant="outlined"
                helperText="Primary originators for the dataset"
                fullWidth
              />
              <TextField
                label="Metadata Contact"
                variant="outlined"
                helperText="Contact person about metadata"
                fullWidth
              />
              <TextField
                label="Publisher"
                variant="outlined"
                helperText="Organization responsible for publishing for the dataset"
                fullWidth
              />
            </Stack>
          </Stack>
        </Box>
      </Stack>
    </Paper>
  );
};



================================================
FILE: src/pages/contribute-data/-components/ValidationChecks.tsx
================================================
import { Box, LinearProgress, Paper, Stack, Typography } from '@mui/material';
import React from 'react';
import { LinearMeter } from '../../../components/LinearMeter';
import { useContributeData } from '../-context/ContextProvider';

/**
 * Panel to display information and status of validation checks in the contribute-data Task Flow.
 * This component is rendered as part of the `<ReviewDataset>` page.
 */
export const ValidationChecks: React.FC = () => {
  const { state } = useContributeData();

  return (
    <Paper
      sx={{
        height: '100%',
        padding: 2,
      }}
    >
      <Stack>
        {/* CUSTOMIZE: the validation panel title */}
        <Typography component="h2" variant="h6">
          Validation Checks
        </Typography>
        {/* CUSTOMIZE: the validation panel description */}
        <Typography>
          Running the dataset metadata and datafile against our standard set of
          metadata, data and congruency checks helps to validate the data and
          find potential issues with format or compatibility.
        </Typography>
        <Typography>
          These checks help to improve discoverability and reusability of your
          research data, and also fastens the process of verifying the data for
          the public release.
        </Typography>
        <Typography>
          We run checks to gauge the following aspects of uploaded dataset.
        </Typography>
        {state.runningChecks && (
          <Box>
            <Stack sx={{ marginBottom: 2, marginTop: 2 }}>
              <LinearProgress />
              <Typography variant="body2">Running validation checks</Typography>
            </Stack>
          </Box>
        )}
        {!state.runningChecks && state.checksComplete && (
          <Box>
            <Stack sx={{ marginBottom: 2, marginTop: 2 }}>
              <LinearMeter value={90} />
              <Stack direction="row">
                <Typography variant="body2" color="success.main">
                  Passed: 22 checks
                </Typography>
                <Typography variant="body2" color="neutral.dark">
                  Warning: 2 checks
                </Typography>
              </Stack>
            </Stack>
          </Box>
        )}
        <Box>
          <Stack
            direction="row"
            alignItems="center"
            justifyContent="space-between"
          >
            <Typography fontWeight="bold">Findability</Typography>
            {!state.runningChecks && state.checksComplete && (
              <Box sx={{ width: '60%' }}>
                <LinearMeter value={100} />
              </Box>
            )}
          </Stack>
          <Typography>
            Occaecat commodo velit aliqua consectetur id tempor amet aliqua.
          </Typography>
          {state.runningChecks && <Box>Test</Box>}
        </Box>
        <Box>
          <Stack
            direction="row"
            alignItems="center"
            justifyContent="space-between"
          >
            <Typography fontWeight="bold">Accessibility</Typography>
            {!state.runningChecks && state.checksComplete && (
              <Box sx={{ width: '60%' }}>
                <LinearMeter value={100} />
              </Box>
            )}
          </Stack>
          <Typography>
            Et labore aliqua proident velit exercitation ullamco ad deserunt
            velit commodo aliquip esse consectetur.
          </Typography>
        </Box>
        <Box>
          <Stack
            direction="row"
            alignItems="center"
            justifyContent="space-between"
          >
            <Typography fontWeight="bold">Interoperability</Typography>
            {!state.runningChecks && state.checksComplete && (
              <Box sx={{ width: '60%' }}>
                <LinearMeter value={90} />
              </Box>
            )}
          </Stack>
          <Typography>
            Ex deserunt Lorem enim adipisicing dolor esse voluptate
            exercitation.
          </Typography>
        </Box>
        <Box>
          <Stack
            direction="row"
            alignItems="center"
            justifyContent="space-between"
          >
            <Typography fontWeight="bold">Reusability</Typography>
            {!state.runningChecks && state.checksComplete && (
              <Box sx={{ width: '60%' }}>
                <LinearMeter value={90} />
              </Box>
            )}
          </Stack>
          <Typography>
            Nulla sint amet ullamco laborum cillum cupidatat irure excepteur
            mollit ut amet.
          </Typography>
        </Box>
      </Stack>
    </Paper>
  );
};



================================================
FILE: src/pages/contribute-data/-context/actions.ts
================================================
export enum ContributeDataActionType {
  RUN_CHECKS = 'RUN_CHECKS',
  FINISH_CHECKS = 'FINISH_CHECKS',
}

export interface ContributeDataAction {
  type: ContributeDataActionType;
  payload?: any;
}

export const runChecks = (): ContributeDataAction => ({
  type: ContributeDataActionType.RUN_CHECKS,
});

export const finishChecks = (): ContributeDataAction => ({
  type: ContributeDataActionType.FINISH_CHECKS,
});



================================================
FILE: src/pages/contribute-data/-context/ContextProvider.tsx
================================================
import React, { useContext } from 'react';
import { ContributeDataAction, ContributeDataActionType } from './actions';

export interface DataFilter {
  field: string;
  value: string | number | any[] | null;
  operator: string;
}

export interface ContributeDataState {
  runningChecks?: boolean;
  checksComplete?: boolean;
}

/**
 * ContributeDataProvider props are the same as the State except
 * some of the required props in the State are optional props.
 * These props have default values set in the initialState object.
 */
interface ContributeDataProviderProps
  extends Omit<ContributeDataState, 'runningChecks'> {
  children: React.ReactNode;
}

const ContributeDataContext = React.createContext<
  | {
      state: ContributeDataState;
      dispatch: React.Dispatch<ContributeDataAction>;
    }
  | undefined
>(undefined);

const initialState: ContributeDataState = {
  runningChecks: false,
  checksComplete: false,
};

function contributingDataReducer(
  state: ContributeDataState,
  action: ContributeDataAction
): ContributeDataState {
  switch (action.type) {
    case ContributeDataActionType.RUN_CHECKS: {
      return {
        ...state,
        runningChecks: true,
      };
    }
    case ContributeDataActionType.FINISH_CHECKS: {
      return {
        ...state,
        runningChecks: false,
        checksComplete: true,
      };
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`);
    }
  }
}

export const ContributeDataProvider: React.FC<ContributeDataProviderProps> = (
  props
) => {
  const [state, dispatch] = React.useReducer(
    contributingDataReducer,
    initialState
  );
  const value = { state, dispatch };

  return (
    <ContributeDataContext.Provider value={value}>
      {props.children}
    </ContributeDataContext.Provider>
  );
};

export const useContributeData = () => {
  const context = useContext(ContributeDataContext);
  if (context === undefined) {
    throw new Error(
      'useContributeData must be used within an ContributeDataProvider'
    );
  }
  return context;
};



================================================
FILE: src/pages/contribute-data/-tests/contribute-data.cy.ts
================================================
describe('The Contribute Data Task Flow', () => {
  beforeEach(() => {
    cy.visit('/contribute-data');
  });

  it('successfully loads', () => {
    cy.get('h1').contains('Register');
  });

  it('publishes a new dataset', () => {
    cy.get('button[data-testid="ctd-submit-button"]').click();
    cy.get('button[data-testid="ctd-new-button"]').click();
    cy.get('h2').first().contains('Metadata');
    cy.get('h2').eq(1).contains('Dataset Files');
    cy.get('button[data-testid="ctd-save-button"]').click();
    cy.get('.MuiAlert-colorSuccess');
    cy.get('h2').should('have.length', 2);
    cy.get('button[data-testid="ctd-checks-button"]').click();
    cy.wait(6000);
    cy.get('button[data-testid="ctd-publish-button"]').click();
    cy.get('button[data-testid="ctd-new-button"]');
  });

  it('edits and cancels a dataset', () => {
    cy.get('button[data-testid="ctd-submit-button"]').click();
    cy.get('button[data-testid="ctd-new-button"]').click();
    cy.get('button[data-testid="ctd-save-button"]').click();
    cy.get('button[data-testid="ctd-edit-button"]').click();
    cy.get('button[data-testid="ctd-cancel-button"]').click();
    cy.get('button[data-testid="ctd-new-button"]');
  });
});



================================================
FILE: src/pages/contribute-data/_layout/index.tsx
================================================
import {
  Box,
  Button,
  Container,
  Paper,
  Stack,
  TextField,
  Typography,
} from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { AppLink } from '../../../components/AppLink';
import { LabelValueTable } from '../../../components/LabelValueTable';

export const Route = createFileRoute('/contribute-data/_layout/')({
  component: Register,
});

/**
 * Initial page for registering as a contributor in the contribute-data Task Flow.
 * After submitting, users are directed to the `<ContributorPortal>`.
 */
function Register() {
  return (
    <Container
      maxWidth="md"
      sx={{
        mt: 4,
      }}
    >
      <Paper
        sx={{
          padding: 2,
        }}
      >
        <Stack spacing={4}>
          {/* CUSTOMIZE: the registration page title */}
          <Typography variant="h6" component="h1">
            Register as a data contributor
          </Typography>
          <Box>
            <Typography fontWeight="medium" mb={1}>
              Description
            </Typography>
            {/* CUSTOMIZE: the registration page description */}
            <Stack>
              <Typography>
                Explain data contribution process in brief, with links to proper
                documentation of steps, requirements and guidelines if any. Link
                to documentation
              </Typography>
              <Typography>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
              </Typography>
            </Stack>
          </Box>
          <Box>
            <Typography fontWeight="medium" mb={1}>
              Summary of Steps
            </Typography>
            {/* CUSTOMIZE: the summary of registration steps */}
            <LabelValueTable
              rows={[
                {
                  label: 'Step 1',
                  value:
                    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed ',
                },
                {
                  label: 'Step 2',
                  value:
                    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed ',
                },
                {
                  label: 'Step 3',
                  value:
                    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed ',
                },
              ]}
            />
          </Box>
          <Box>
            <Typography fontWeight="medium" mb={2}>
              Registration Form
            </Typography>
            {/* CUSTOMIZE: the registration form inputs */}
            <Stack>
              <TextField
                id="email"
                label="Email"
                variant="outlined"
                fullWidth
              />
              <TextField
                id="first-name"
                label="First Name"
                variant="outlined"
                fullWidth
              />
              <TextField
                id="last-name"
                label="Last Name"
                variant="outlined"
                fullWidth
              />
              <TextField
                id="organization"
                label="Organization"
                variant="outlined"
                fullWidth
              />
              <TextField
                id="project-title"
                label="Project Title"
                variant="outlined"
                fullWidth
              />
              <TextField
                id="project-brief"
                label="Project Brief"
                variant="outlined"
                fullWidth
                multiline
                minRows={4}
              />
            </Stack>
          </Box>
          <Box>
            <AppLink to="/contribute-data/portal">
              <Button variant="contained" data-testid="ctd-submit-button">
                Submit Registration
              </Button>
            </AppLink>
          </Box>
        </Stack>
      </Paper>
    </Container>
  );
}

export default Register;



================================================
FILE: src/pages/contribute-data/_layout/new.tsx
================================================
import { Box, Button, Container, Grid, Stack, Typography } from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { AppLink } from '../../../components/AppLink';
import { MetadataPanel } from '../-components/MetadataPanel';
import { DataFilesPanel } from '../-components/DataFilesPanel';

export const Route = createFileRoute('/contribute-data/_layout/new')({
  component: NewDataset,
});

/**
 * Page for entering information about a new dataset in the contribute-data Task Flow.
 * Includes the `<MetadataPanel>` and `<DataFilesPanel>` for adding input data.
 */
function NewDataset() {
  return (
    <Container
      maxWidth="xl"
      sx={{
        marginBottom: 3,
        marginTop: 3,
      }}
    >
      <Stack>
        <Stack direction="row" justifyContent="space-between">
          <Stack>
            {/* CUSTOMIZE: the new dataset page title */}
            <Typography variant="h6" component="h1">
              Upload a new dataset
            </Typography>
            {/* CUSTOMIZE: the new dataset page description */}
            <Typography>
              Mention the data contribution steps in brief, and also major
              requirements if any. Also give links to detailed documentation of
              steps, requirements and guidelines. Link to documentation.
            </Typography>
          </Stack>
          <Stack direction="row">
            <Box>
              <AppLink to="/contribute-data/portal">
                <Button
                  variant="contained"
                  color="warning"
                  data-testid="ctd-cancel-button"
                >
                  Cancel
                </Button>
              </AppLink>
            </Box>
            <Box>
              <AppLink to="/contribute-data/review">
                <Button
                  variant="contained"
                  data-testid="ctd-save-button"
                  sx={{ whiteSpace: 'nowrap' }}
                >
                  Save Dataset
                </Button>
              </AppLink>
            </Box>
          </Stack>
        </Stack>
        <Box>
          <Grid container spacing={2}>
            <Grid item lg={7} md={12}>
              <MetadataPanel />
            </Grid>
            <Grid item lg={5} md={12}>
              <DataFilesPanel />
            </Grid>
          </Grid>
        </Box>
      </Stack>
    </Container>
  );
}



================================================
FILE: src/pages/contribute-data/_layout/portal.tsx
================================================
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import { Button, Container, Paper, Stack, Typography } from '@mui/material';
import { GridActionsCellItem, GridColDef } from '@mui/x-data-grid';
import { DataGrid } from '@mui/x-data-grid';
import { createFileRoute } from '@tanstack/react-router';
import { useDataFromSource } from '../../../hooks/useDataFromSource';
import { AppLink } from '../../../components/AppLink';

export const Route = createFileRoute('/contribute-data/_layout/portal')({
  component: ContributorPortal,
});

// CUSTOMIZE: the columns for the uploads table
const columns: GridColDef[] = [
  {
    field: 'title',
    headerName: 'Dataset Title',
    width: 200,
  },
  {
    field: 'category',
    headerName: 'Category',
    width: 200,
  },
  {
    field: 'summary',
    headerName: 'Summary',
    width: 200,
  },
  {
    field: 'doi',
    headerName: 'DOI',
    width: 200,
  },
  {
    field: 'publication_date',
    headerName: 'Created Date',
    width: 200,
  },
  {
    field: 'status',
    headerName: 'Status',
    width: 200,
  },
  {
    field: 'actions',
    headerName: 'Actions',
    type: 'actions',
    getActions: () => [
      <GridActionsCellItem icon={<EditIcon />} label="Edit" />,
      <GridActionsCellItem icon={<DeleteIcon />} label="Delete" />,
    ],
    flex: 1,
  },
];

/**
 * Page to show a contributor's uploads in the contribute-data Task Flow.
 * Also allows users to start a new dataset which sends them to the `<NewDataset>` component.
 */
function ContributorPortal() {
  // CUSTOMIZE: the data source for the contributed datasets table
  const datasets = useDataFromSource('dummy-data/contributor_datasets.json');

  return (
    <Container
      maxWidth="xl"
      sx={{
        mt: 4,
      }}
    >
      <Stack>
        <Stack
          direction="row"
          justifyContent="space-between"
          alignItems="center"
        >
          {/* CUSTOMIZE: the page title */}
          <Typography variant="h6" component="h1">
            Your Dataset Uploads
          </Typography>
          <AppLink to="/contribute-data/new">
            {/* CUSTOMIZE: the button for creating a new entry */}
            <Button variant="contained" data-testid="ctd-new-button">
              New Dataset
            </Button>
          </AppLink>
        </Stack>
        <Paper>
          <DataGrid
            rows={datasets || []}
            // CUSTOMIZE: the data ID field
            getRowId={(row) => row.id}
            columns={columns}
            disableColumnSelector
            disableRowSelectionOnClick
          />
        </Paper>
      </Stack>
    </Container>
  );
}



================================================
FILE: src/pages/contribute-data/_layout/review.tsx
================================================
import CloseIcon from '@mui/icons-material/Close';
import {
  Alert,
  Box,
  Button,
  Collapse,
  Container,
  Grid,
  IconButton,
  Stack,
  Typography,
} from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { useState } from 'react';
import { DatasetView } from '../-components/DatasetView';
import { ValidationChecks } from '../-components/ValidationChecks';
import { useContributeData } from '../-context/ContextProvider';
import { finishChecks, runChecks } from '../-context/actions';
import { AppLink } from '../../../components/AppLink';

export const Route = createFileRoute('/contribute-data/_layout/review')({
  component: ReviewDataset,
});

/**
 * Page to review a new dataset before submitting it in the contribute-data Task Flow.
 * Users can see read-only data in the `<DatasetView>`, go back to editing, or run checks
 * against their uploaded dataset and see validation in the `<ValidationChecks>` component.
 */
function ReviewDataset() {
  const [alertOpen, setAlertOpen] = useState(true);
  const { state, dispatch } = useContributeData();

  /**
   * Simulate the checks being run using an external service
   */
  const startRunChecks = () => {
    dispatch(runChecks());
    setTimeout(() => {
      dispatch(finishChecks());
    }, 5000);
  };

  /**
   * Content to render on the page for this component
   */
  return (
    <Box>
      <Collapse in={alertOpen}>
        <Alert
          severity="success"
          action={
            <IconButton
              aria-label="close"
              color="inherit"
              size="small"
              onClick={() => {
                setAlertOpen(false);
              }}
            >
              <CloseIcon fontSize="inherit" />
            </IconButton>
          }
          sx={{
            paddingLeft: 3,
            paddingRight: 3,
          }}
        >
          Your dataset edits have been saved.
        </Alert>
      </Collapse>
      <Container
        maxWidth="xl"
        sx={{
          marginBottom: 3,
          marginTop: 3,
        }}
      >
        <Stack>
          <Stack direction="row" justifyContent="space-between">
            <Stack>
              {/* CUSTOMIZE: the review page title */}
              <Typography variant="h6" component="h1">
                Review your new dataset
              </Typography>
            </Stack>
            <Stack direction="row">
              <Box>
                <AppLink to="/contribute-data/new">
                  <Button
                    variant="contained"
                    data-testid="ctd-edit-button"
                    sx={{ whiteSpace: 'nowrap' }}
                  >
                    Edit Dataset
                  </Button>
                </AppLink>
              </Box>
              <Box>
                <Button
                  variant="contained"
                  onClick={() => startRunChecks()}
                  data-testid="ctd-checks-button"
                  sx={{ whiteSpace: 'nowrap' }}
                >
                  Run Checks
                </Button>
              </Box>
              {state.checksComplete && (
                <Box>
                  <AppLink to="/contribute-data/portal">
                    <Button
                      variant="contained"
                      data-testid="ctd-publish-button"
                      sx={{ whiteSpace: 'nowrap' }}
                    >
                      Publish Dataset
                    </Button>
                  </AppLink>
                </Box>
              )}
            </Stack>
          </Stack>
          <Box>
            <Grid container spacing={2}>
              <Grid item md={8} sm={12}>
                <DatasetView />
              </Grid>
              <Grid item md={4} sm={12}>
                <ValidationChecks />
              </Grid>
            </Grid>
          </Box>
        </Stack>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/explore-data/$id.tsx
================================================
import { createFileRoute } from '@tanstack/react-router';
import { Box, Container, Paper, Stack, Typography } from '@mui/material';
import { PageHeader } from '../../components/PageHeader';
import { useDetailQuery } from '../../hooks/useDetailQuery';

export const Route = createFileRoute('/explore-data/$id')({
  component: DataDetailPage,
});

/**
 * Detail view for a selected row from the` <DataExplorer>` in the explore-data Task Flow.
 */
function DataDetailPage() {
  const { id } = Route.useParams();

  // Define query for this page and fetch data item
  const { data } = useDetailQuery({
    // CUSTOMIZE: detail data source
    dataSource: 'dummy-data/exoplanets.csv',
    // CUSTOMIZE: detail data unique ID field
    dataIdField: 'Id',
    paramId: id,
    // CUSTOMIZE: query mode, 'client' or 'server'
    queryMode: 'client',
    staticParams: null,
  });

  return (
    <Box>
      <PageHeader
        // CUSTOMIZE: page header field
        pageTitle={data ? data['Planet Name'] : ''}
        // CUSTOMIZE: breadcrumb title text
        breadcrumbTitle="Data Detail"
        sx={{
          marginBottom: 1,
          padding: 2,
        }}
      />
      <Container maxWidth="xl">
        <Stack>
          {/* CUSTOMIZE: detail page content */}
          <Paper
            sx={{
              padding: 2,
            }}
          >
            <Stack>
              <Typography fontWeight="bold">Planet Name</Typography>
              <Typography>{data && data['Planet Name']}</Typography>
            </Stack>
          </Paper>
        </Stack>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/explore-data/index.tsx
================================================
import { Box, Paper, Stack } from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { useState } from 'react';
import { FilterContext } from '../../components/FilterContext';
import { PageHeader } from '../../components/PageHeader';
import { DataView } from './-components/DataView';
import { DataViewHeader } from './-components/DataViewHeader';
import { FiltersPanel } from './-components/FiltersPanel';
import { PreviewPanel } from './-components/PreviewPanel';
import { FilterConfig } from '../../types/filters.types';

export const Route = createFileRoute('/explore-data/')({
  component: DataExplorer,
});

// CUSTOMIZE: the filter definitions
const filterConfigs: FilterConfig[] = [
  {
    field: 'Discovery Method',
    label: 'Discovery Method',
    operator: 'contains-one-of',
    filterComponent: 'CheckboxList',
    filterProps: {
      options: [
        {
          label: 'Astrometry',
          value: 'Astrometry',
        },
        {
          label: 'Disk Kinematics',
          value: 'Disk Kinematics',
        },
        {
          label: 'Eclipse Timing Variations',
          value: 'Eclipse Timing Variations',
        },
        {
          label: 'Imaging',
          value: 'Imaging',
        },
        {
          label: 'Microlensing',
          value: 'Microlensing',
        },
        {
          label: 'Radial Velocity',
          value: 'Radial Velocity',
        },
        {
          label: 'Transit',
          value: 'Transit',
        },
      ],
    },
  },
  {
    field: 'Mass',
    label: 'Mass',
    operator: 'between-inclusive',
    filterComponent: 'RangeSlider',
    filterProps: {
      min: 0,
      max: 10000,
    },
  },
];

/**
 * Main explorer page in the explore-data Task Flow.
 * This page includes the page header, filters panel,
 * main table, and the table row preview panel.
 */
function DataExplorer() {
  const [searchTerm, setSearchTerm] = useState('');
  const [previewItem, setPreviewItem] = useState<any>();
  const [showFiltersPanel, setShowFiltersPanel] = useState(true);

  const handleCloseFilters = () => {
    setShowFiltersPanel(false);
  };

  const handleToggleFilters = () => {
    setShowFiltersPanel(!showFiltersPanel);
  };

  const handleClosePreview = () => {
    setPreviewItem(null);
  };

  return (
    <FilterContext>
      <Box>
        <PageHeader
          // CUSTOMIZE: the page title
          pageTitle="Explore Data App"
          // CUSTOMIZE: the page description
          description="Description of this app"
          sx={{
            marginBottom: 1,
            padding: 2,
          }}
        />
        <Box>
          <Stack direction="row">
            {showFiltersPanel && (
              <Box
                sx={{
                  width: '350px',
                }}
              >
                <FiltersPanel
                  filterConfigs={filterConfigs}
                  onClose={handleCloseFilters}
                />
              </Box>
            )}
            <Paper
              elevation={0}
              sx={{
                flex: 1,
                minHeight: '600px',
                minWidth: 0,
              }}
            >
              <DataViewHeader
                searchTerm={searchTerm}
                setSearchTerm={setSearchTerm}
                onToggleFiltersPanel={handleToggleFilters}
              />
              <DataView
                filterConfigs={filterConfigs}
                searchTerm={searchTerm}
                setPreviewItem={setPreviewItem}
              />
            </Paper>
            {previewItem && (
              <Box
                sx={{
                  minWidth: '400px',
                }}
              >
                <PreviewPanel
                  previewItem={previewItem}
                  onClose={handleClosePreview}
                />
              </Box>
            )}
          </Stack>
        </Box>
      </Box>
    </FilterContext>
  );
}



================================================
FILE: src/pages/explore-data/-components/DataView.tsx
================================================
import { Alert, Box, LinearProgress, Skeleton } from '@mui/material';
import { GridPaginationModel } from '@mui/x-data-grid';
import React, { useState } from 'react';
import { useFilters } from '../../../components/FilterContext';
import { SciDataGrid } from '../../../components/SciDataGrid';
import { filterData } from '../../../utils/filters.utils';
import { useListQuery } from '../../../hooks/useListQuery';
import { FilterConfig } from '../../../types/filters.types';

interface DataViewProps {
  filterConfigs: FilterConfig[];
  searchTerm: string;
  setPreviewItem: React.Dispatch<React.SetStateAction<any>>;
}
/**
 * Query the data rows and render as an interactive table
 */
export const DataView: React.FC<DataViewProps> = ({
  filterConfigs,
  searchTerm,
  setPreviewItem,
}) => {
  const { activeFilters } = useFilters();
  const [page, setPage] = useState(0);
  const [pageSize, setPageSize] = useState(25);
  const [offset, setOffest] = useState(page * pageSize);
  // CUSTOMIZE: the unique ID field for the data source
  const dataIdField = 'Id';
  // CUSTOMIZE: query mode, 'client' or 'server'
  const queryMode = 'client';
  const { isPending, isFetching, isError, data, error } = useListQuery({
    activeFilters,
    // CUSTOMIZE: the table data source
    dataSource: 'dummy-data/exoplanets.csv',
    filterConfigs,
    offset,
    page,
    pageSize,
    queryMode,
    staticParams: null,
  });

  const handleRowClick = (rowData: any) => {
    setPreviewItem(rowData.row);
  };

  const handlePaginationModelChange = (model: GridPaginationModel) => {
    // Reset page to first when the page size changes
    const newPage = model.pageSize !== pageSize ? 0 : model.page;
    const newPageSize = model.pageSize;
    const newOffset = newPage * newPageSize;
    setPage(newPage);
    setPageSize(newPageSize);
    setOffest(newOffset);
  };

  // Show a loading skeleton while the initial query is pending
  if (isPending) {
    const emptyRows = new Array(pageSize).fill(null);
    const indexedRows = emptyRows.map((row, i) => i);
    return (
      <Box
        sx={{
          padding: 2,
        }}
      >
        {indexedRows.map((row) => (
          <Skeleton key={row} height={50} />
        ))}
      </Box>
    );
  }

  // Show an error message if the query fails
  if (isError) {
    return <Alert severity="error">{error.message}</Alert>;
  }

  // Show the data when the query completes
  return (
    <>
      {isFetching && <LinearProgress variant="indeterminate" />}
      <SciDataGrid
        rows={filterData(data, activeFilters, filterConfigs, searchTerm)}
        pagination
        paginationMode={queryMode}
        onPaginationModelChange={handlePaginationModelChange}
        getRowId={(row) => row[dataIdField]}
        // CUSTOMIZE: the table columns
        columns={[
          {
            field: 'Planet Name',
            headerName: 'Planet Name',
            width: 200,
          },
          {
            field: 'Planet Host',
            headerName: 'Planet Host',
            width: 200,
          },
          {
            field: 'Discovery Method',
            headerName: 'Discovery Method',
            width: 200,
          },
          {
            field: 'Orbital Period Days',
            headerName: 'Orbital Period',
            units: 'days',
            type: 'number',
            width: 200,
          },
          {
            field: 'Mass',
            headerName: 'Mass',
            units: 'Earth Mass',
            type: 'number',
            width: 200,
          },
          {
            field: 'Eccentricity',
            headerName: 'Eccentricity',
            type: 'number',
            width: 200,
          },
        ]}
        disableColumnSelector
        autoHeight
        initialState={{
          pagination: { paginationModel: { page, pageSize } },
        }}
        onRowClick={handleRowClick}
      />
    </>
  );
};



================================================
FILE: src/pages/explore-data/-components/DataViewHeader.tsx
================================================
import FilterListIcon from '@mui/icons-material/FilterList';
import { Button, Stack, TextField, Typography } from '@mui/material';
import React from 'react';

interface DataViewHeaderProps {
  searchTerm: string;
  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;
  onToggleFiltersPanel: () => void;
}

/**
 * Data table header section with filters button and search bar
 */
export const DataViewHeader: React.FC<DataViewHeaderProps> = ({
  searchTerm,
  setSearchTerm,
  onToggleFiltersPanel,
}) => {
  const handleSearch: React.ChangeEventHandler<HTMLInputElement> = (evt) => {
    setSearchTerm(evt.target.value);
  };

  return (
    <Stack
      direction="row"
      spacing={2}
      alignItems="center"
      sx={{
        overflow: 'hidden',
        padding: 2,
      }}
    >
      <Typography variant="h6" component="h2" flex={1}>
        Entity List
      </Typography>
      <Button startIcon={<FilterListIcon />} onClick={onToggleFiltersPanel}>
        Filters
      </Button>
      <TextField
        variant="outlined"
        label="Search"
        size="small"
        value={searchTerm}
        onChange={handleSearch}
      />
    </Stack>
  );
};



================================================
FILE: src/pages/explore-data/-components/FiltersPanel.tsx
================================================
import React from 'react';
import { FilterField } from '../../../components/FilterField';
import { Filters } from '../../../components/Filters';
import { FilterConfig } from '../../../types/filters.types';

interface FiltersPanelProps {
  filterConfigs: FilterConfig[];
  onClose: () => any;
}

/**
 * Main filters panel in the explore-data Task Flow.
 * Filters are generated based on the configurations in definitions.filters.main.
 * The input values will filter data in the main table.
 */
export const FiltersPanel: React.FC<FiltersPanelProps> = ({
  filterConfigs,
  onClose,
}) => {
  return (
    <Filters
      grouped={false}
      onClose={onClose}
      sx={{
        border: 'none',
      }}
    >
      {filterConfigs.map((f, i) => (
        <FilterField
          key={`${f.field}-${i}`}
          field={f.field}
          label={f.label}
          operator={'contains'}
          filterComponent={f.filterComponent}
          filterProps={f.filterProps}
        />
      ))}
    </Filters>
  );
};



================================================
FILE: src/pages/explore-data/-components/PreviewPanel.tsx
================================================
import React from 'react';
import {
  Box,
  Button,
  IconButton,
  Paper,
  Stack,
  Typography,
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import { LabelValueTable } from '../../../components/LabelValueTable';
import { DataGrid } from '@mui/x-data-grid';
import { AppLink } from '../../../components/AppLink';

/**
 * Placeholder columns for related data table
 */
const relatedColumns = [
  {
    field: 'id',
    headerName: 'ID',
    width: 50,
  },
  {
    field: 'attr1',
    headerName: 'Attribute 1',
    width: 100,
  },
  {
    field: 'attr2',
    headerName: 'Attribute 2',
    width: 100,
  },
  {
    field: 'attr3',
    headerName: 'Attribute 3',
    width: 100,
  },
];

/**
 * Placeholder rows for related data table
 */
const emptyRows = Array(25).fill(0);
const relatedRows = emptyRows.map((d, i) => {
  return { id: i, attr1: 'value', attr2: 'value', attr3: 'value' };
});

interface PreviewPanelProps {
  /**
   * Data for the selected row from the main table
   */
  previewItem: any;
  /**
   * Function to handle hiding
   */
  onClose: () => void;
}

/**
 * Panel to show extra information about a row in a separate panel
 * next to the `<DataTablePanel>`.
 */
export const PreviewPanel: React.FC<PreviewPanelProps> = ({
  previewItem,
  onClose,
}) => {
  return (
    <Paper
      elevation={0}
      sx={{
        height: '100%',
        padding: 2,
      }}
    >
      <Stack spacing={3}>
        <Stack spacing={1}>
          <Stack direction="row">
            <Typography variant="h6" component="h3" flex={1}>
              <AppLink to="/explore-data/$id" params={{ id: previewItem.Id }}>
                {previewItem['Planet Name']}
              </AppLink>
            </Typography>
            <IconButton size="small" onClick={onClose}>
              <CloseIcon />
            </IconButton>
          </Stack>
          <Typography variant="body2">
            Row description, subtitle, or helper text.
          </Typography>
        </Stack>
        <Box>
          <Typography fontWeight="medium" mb={1}>
            Property Group 1
          </Typography>
          <LabelValueTable
            rows={[
              { label: 'Property 1', value: 'value' },
              { label: 'Property 2', value: 'value' },
              { label: 'Property 3', value: 'value' },
            ]}
          />
        </Box>
        <Box>
          <Typography fontWeight="medium" mb={1}>
            Property Group 2
          </Typography>
          <LabelValueTable
            rows={[
              { label: 'Property 4', value: 'value' },
              { label: 'Property 5', value: 'value' },
            ]}
          />
        </Box>
        <Box>
          <Typography fontWeight="medium" mb={1}>
            Related Data
          </Typography>
          <DataGrid
            rows={relatedRows}
            columns={relatedColumns}
            disableRowSelectionOnClick
            initialState={{
              pagination: { paginationModel: { pageSize: 5 } },
            }}
          />
        </Box>
        <Stack direction="row">
          <AppLink to="/explore-data/$id" params={{ id: previewItem.Id }}>
            <Button variant="contained">View details</Button>
          </AppLink>
          <Button variant="outlined">Export data</Button>
        </Stack>
      </Stack>
    </Paper>
  );
};



================================================
FILE: src/pages/explore-data/-tests/explore-data.cy.ts
================================================
describe('The Explore Data Task Flow', () => {
  beforeEach(() => {
    cy.visit('/explore-data');
  });

  it('successfully loads', () => {
    cy.contains('Explore Data');
  });

  it('filters by checkbox', () => {
    cy.get('span').contains('Astrometry').click();
    cy.wait(3000);
    cy.contains('of 1');
  });

  it('opens the preview panel', () => {
    cy.wait(3000);
    cy.get('div[role="gridcell"]').first().click();
    cy.contains('Property Group 1');
  });
});



================================================
FILE: src/pages/monitor-activities/calendar.tsx
================================================
import { Container, Typography } from '@mui/material';
import { DateCalendar, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { AppLink } from '../../components/AppLink';
import { createFileRoute } from '@tanstack/react-router';

export const Route = createFileRoute('/monitor-activities/calendar')({
  component: ActivityCalendar,
});

/**
 * Work in Progress:
 *
 * Page to see all activities by day in a calendar view in the monitor-activities Task Flow.
 */
function ActivityCalendar() {
  return (
    <Container
      maxWidth="md"
      sx={{
        marginBottom: 3,
        marginTop: 3,
      }}
    >
      <Typography variant="h6" component="h1">
        2023 Experiments (Work in Progress)
      </Typography>
      {/* TODO: calendar visualization */}
      <LocalizationProvider dateAdapter={AdapterDayjs}>
        <DateCalendar readOnly />
      </LocalizationProvider>
      <AppLink to="..">List</AppLink>
    </Container>
  );
}



================================================
FILE: src/pages/monitor-activities/detail.tsx
================================================
import AddIcon from '@mui/icons-material/Add';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import {
  Box,
  Button,
  Container,
  Grid,
  IconButton,
  Paper,
  Stack,
  TextField,
  Typography,
} from '@mui/material';
import { DataGrid, GridColDef, GridComparatorFn } from '@mui/x-data-grid';
import dayjs from 'dayjs';
import Plot from 'react-plotly.js';
import { createFileRoute } from '@tanstack/react-router';
import { useDataFromSource } from '../../hooks/useDataFromSource';
import { AppLink } from '../../components/AppLink';
import { LabelValueTable } from '../../components/LabelValueTable';

export const Route = createFileRoute('/monitor-activities/detail')({
  component: ActivityDetail,
});

const dateComparator: GridComparatorFn<string> = (v1, v2) => {
  return dayjs(v1).isAfter(dayjs(v2)) ? 1 : 0;
};

// CUSTOMIZE: events table columns
const columns: GridColDef[] = [
  {
    field: 'event_type',
    headerName: 'Event Type',
    width: 200,
  },
  {
    field: 'event_time',
    headerName: 'Event Time',
    sortComparator: dateComparator,
    width: 200,
  },
  {
    field: 'confidence',
    headerName: 'Confidence',
    type: 'number',
    width: 200,
  },
];

/**
 * Detail view of the selected activity from `<ActivityList>` in monitor-activities Task Flow.
 * The two components are not currently hooked together.
 */
function ActivityDetail() {
  // CUSTOMIZE: detail data source
  const experiment = useDataFromSource('dummy-data/experiment_detail.json');

  const getNoteRows = (notes: any[]) => {
    return notes.map((note) => {
      note.label = note.created_time;
      note.value = note.content;
      return note;
    });
  };

  return (
    <Container
      maxWidth="xl"
      sx={{
        marginBottom: 3,
        marginTop: 3,
      }}
    >
      <Stack>
        <Stack direction="row" alignItems="center">
          <AppLink to="..">
            <IconButton data-testid="mna-back-button">
              <ArrowBackIcon />
            </IconButton>
          </AppLink>
          <Typography variant="h6" component="h1">
            {/* CUSTOMIZE: title field */}
            {experiment?.experiment_name}
          </Typography>
        </Stack>
        <Box>
          <Grid container spacing={2}>
            <Grid item md={6}>
              <Paper>
                {experiment && (
                  <DataGrid
                    rows={experiment.events}
                    // CUSTOMIZE: events data source unique ID field
                    getRowId={(row) => row.id}
                    columns={columns}
                    initialState={{
                      sorting: {
                        sortModel: [{ field: 'event_time', sort: 'desc' }],
                      },
                    }}
                    disableColumnSelector
                    disableRowSelectionOnClick
                  />
                )}
              </Paper>
            </Grid>
            <Grid item md={6}>
              <Stack>
                <Paper
                  sx={{
                    padding: 2,
                  }}
                >
                  <Stack>
                    <Typography variant="h6" component="h2">
                      Notes
                    </Typography>
                    {experiment && (
                      <LabelValueTable
                        rows={getNoteRows(experiment.notes)}
                        labelWidth={200}
                      />
                    )}
                    <Box
                      sx={{
                        position: 'relative',
                      }}
                    >
                      <TextField fullWidth multiline minRows={2} />
                      <Button
                        variant="contained"
                        endIcon={<AddIcon />}
                        sx={{
                          position: 'absolute',
                          bottom: '0.5rem',
                          right: '0.5rem',
                        }}
                      >
                        Add
                      </Button>
                    </Box>
                  </Stack>
                </Paper>
                <Paper
                  sx={{
                    padding: 2,
                  }}
                >
                  <Plot
                    // CUSTOMIZE: plot data
                    data={[
                      {
                        x: [1, 2, 3, 4],
                        y: [10, 15, 13, 17],
                        type: 'scatter',
                      },
                      {
                        x: [1, 2, 3, 4],
                        y: [16, 5, 11, 9],
                        type: 'scatter',
                      },
                    ]}
                    layout={{ height: 450 }}
                    useResizeHandler={true}
                    style={{ width: '100%' }}
                  />
                </Paper>
              </Stack>
            </Grid>
          </Grid>
        </Box>
      </Stack>
    </Container>
  );
}



================================================
FILE: src/pages/monitor-activities/index.tsx
================================================
import { Container, Paper, Stack, Typography } from '@mui/material';
import { DataGrid, GridColDef, GridComparatorFn } from '@mui/x-data-grid';
import dayjs from 'dayjs';
import { createFileRoute, useNavigate } from '@tanstack/react-router';
import { useDataFromSource } from '../../hooks/useDataFromSource';

export const Route = createFileRoute('/monitor-activities/')({
  component: ActivityList,
});

const dateComparator: GridComparatorFn<string> = (v1, v2) => {
  return dayjs(v1).isAfter(dayjs(v2)) ? 1 : 0;
};

// CUSTOMIZE: list view table columns
const columns: GridColDef[] = [
  {
    field: 'experiment_name',
    headerName: 'Experiment Name',
    width: 200,
  },
  {
    field: 'start_time',
    headerName: 'Start Time',
    sortComparator: dateComparator,
    width: 200,
  },
  {
    field: 'end_time',
    headerName: 'End Time',
    width: 200,
  },
  {
    field: 'status',
    headerName: 'Status',
    width: 200,
  },
];

/**
 * List view of all activities in the monitor-activites Task Flow.
 */
function ActivityList() {
  // CUSTOMIZE: list view data source
  const experiments = useDataFromSource('dummy-data/experiments.json');
  const navigate = useNavigate();

  return (
    <Container
      maxWidth="xl"
      sx={{
        marginBottom: 3,
        marginTop: 3,
      }}
    >
      <Stack>
        <Stack
          direction="row"
          justifyContent="space-between"
          alignItems="center"
        >
          <Typography variant="h6" component="h1">
            Experiments test
          </Typography>
        </Stack>
        <Paper>
          <DataGrid
            rows={experiments || []}
            // CUSTOMIZE: data source unique ID field
            getRowId={(row) => row.id}
            columns={columns}
            // CUSTOMIZE: initial sort field
            initialState={{
              sorting: {
                sortModel: [{ field: 'start_time', sort: 'desc' }],
              },
            }}
            onRowClick={() => navigate({ to: '/monitor-activities/detail' })}
            disableColumnSelector
            disableRowSelectionOnClick
          />
        </Paper>
      </Stack>
    </Container>
  );
}



================================================
FILE: src/pages/monitor-activities/-tests/monitor-activities.cy.ts
================================================
describe('The Monitor Activities Task Flow', () => {
  beforeEach(() => {
    cy.visit('/monitor-activities');
  });

  it('successfully loads', () => {
    cy.get('h1').contains('Experiments');
  });

  it('drills into a row and shows details', () => {
    cy.get('.MuiDataGrid-columnHeader').should('have.length', 4);
    cy.get('.MuiDataGrid-row').eq(1).click();
    cy.get('button[data-testid="mna-back-button"]');
    cy.get('.MuiDataGrid-columnHeader').should('have.length', 3);
    cy.get('h2').contains('Notes');
    cy.get('.js-plotly-plot');
  });

  it('drills into a row and goes back', () => {
    cy.get('.MuiDataGrid-row').eq(1).click();
    cy.get('button[data-testid="mna-back-button"]').click();
    cy.get('.MuiDataGrid-columnHeader').should('have.length', 4);
  });
});



================================================
FILE: src/pages/playground/index.tsx
================================================
import { Button, Container, Stack } from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { useState } from 'react';

export const Route = createFileRoute('/playground/')({
  component: Playground,
});

/**
 * A blank canvas to test out content and components
 */
function Playground() {
  const [count, setCount] = useState(0);

  const handleIncrement = () => {
    setCount(count + 1);
  };

  return (
    <Container
      maxWidth="xl"
      /**
       * Style STRUDEL and MUI components using the `sx` prop.
       */
      sx={{
        marginBottom: 3,
        marginTop: 3,
      }}
    >
      {/**
       * Add your own components here!
       * See MUI's component library: https://mui.com/material-ui/all-components/
       */}
      <h1>Playground</h1>
      <Stack
        direction="row"
        spacing={2}
        sx={{
          alignItems: 'center',
        }}
      >
        <Button variant="contained" onClick={handleIncrement}>
          Increment
        </Button>
        <p>{count}</p>
      </Stack>
    </Container>
  );
}



================================================
FILE: src/pages/run-computation/_layout.tsx
================================================
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import { Box } from '@mui/material';
import { GridActionsCellItem } from '@mui/x-data-grid';
import { useDataFromSource } from '../../hooks/useDataFromSource';
import { RunComputationProvider } from './-context/ContextProvider';
import { createFileRoute, Outlet } from '@tanstack/react-router';

export const Route = createFileRoute('/run-computation/_layout')({
  component: RunComputationLayout,
});

/**
 * Top-level wrapper for the run-computation Task Flow templates.
 * Inner pages are rendered inside the `<Outlet />` component
 */
function RunComputationLayout() {
  // CUSTOMIZE: index page data source
  const listItems = useDataFromSource('dummy-data/list.json');

  return (
    <Box>
      <Box>
        <RunComputationProvider
          list={{
            table: {
              data: listItems,
              // CUSTOMIZE: index page data source unique ID field
              dataIdField: 'id',
              // CUSTOMIZE: index page columns
              columns: [
                {
                  field: 'name',
                  headerName: 'Scenario Name',
                  width: 200,
                },
                {
                  field: 'analysisType',
                  headerName: 'Analysis Type',
                  width: 200,
                },
                {
                  field: 'createdDate',
                  headerName: 'Date Created',
                  width: 200,
                },
                {
                  field: 'status',
                  headerName: 'Status',
                  width: 200,
                },
                {
                  field: 'actions',
                  headerName: 'Actions',
                  type: 'actions',
                  getActions: () => [
                    <GridActionsCellItem
                      icon={<ContentCopyIcon />}
                      label="Duplicate"
                    />,
                    <GridActionsCellItem icon={<EditIcon />} label="Edit" />,
                    <GridActionsCellItem
                      icon={<DeleteIcon />}
                      label="Delete"
                    />,
                  ],
                  flex: 1,
                },
              ],
            },
          }}
          inputs={{
            table: {
              data: [],
              // CUSTOMIZE: inputs table unique ID field
              dataIdField: 'id',
              // CUSTOMIZE: inputs table columns
              columns: [
                {
                  field: 'name',
                  headerName: 'Unit Name',
                  width: 200,
                },
                {
                  field: 'unitType',
                  headerName: 'Unit Type',
                  width: 200,
                },
                {
                  field: 'constraints',
                  headerName: 'Constraints',
                  width: 200,
                },
                {
                  field: 'lowerBound',
                  headerName: 'Lower Bound',
                  width: 200,
                  type: 'number',
                },
                {
                  field: 'upperBound',
                  headerName: 'Upper Bound',
                  width: 200,
                  type: 'number',
                },
              ],
            },
          }}
          results={{
            table: {
              data: [],
              // CUSTOMIZE: results table unique ID field
              dataIdField: 'id',
              // CUSTOMIZE: results table columns
              columns: [
                {
                  field: 'name',
                  headerName: 'Unit Name',
                  width: 200,
                },
                {
                  field: 'unitType',
                  headerName: 'Unit Type',
                  width: 200,
                },
                {
                  field: 'constraints',
                  headerName: 'Constraints',
                  width: 200,
                },
                {
                  field: 'lowerBound',
                  headerName: 'Lower Bound',
                  width: 200,
                  type: 'number',
                },
                {
                  field: 'upperBound',
                  headerName: 'Upper Bound',
                  width: 200,
                  type: 'number',
                },
              ],
            },
          }}
        >
          <Outlet />
        </RunComputationProvider>
      </Box>
    </Box>
  );
}



================================================
FILE: src/pages/run-computation/-components/NewScenarioModal.tsx
================================================
import {
  Box,
  Button,
  FormControl,
  InputLabel,
  MenuItem,
  Modal,
  Select,
  Stack,
  TextField,
  Typography,
} from '@mui/material';
import React from 'react';
import { AppLink } from '../../../components/AppLink';

interface Props {
  modalOpen: boolean;
  setModalOpen: React.Dispatch<React.SetStateAction<boolean>>;
}

/**
 * Modal to display over the `<ComputationsList>` to fill out a form for creating
 * a new computation run.
 * Completing the form takes you to the `<DataInputs>` step.
 */
export const NewScenarioModal: React.FC<Props> = ({
  modalOpen,
  setModalOpen,
}) => {
  const handleClose = () => {
    setModalOpen(false);
  };

  /**
   * Content to render on the page for this component
   */
  return (
    <Modal
      open={modalOpen}
      onClose={handleClose}
      aria-labelledby="modal-modal-title"
      aria-describedby="modal-modal-description"
    >
      <Stack
        direction="column"
        sx={{
          position: 'absolute' as 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: 550,
          bgcolor: 'background.paper',
          border: '1px solid #ccc',
          boxShadow: 24,
          p: 4,
        }}
      >
        <Typography id="modal-modal-title" variant="h6" component="h2">
          {/* CUSTOMIZE: new item modal title */}
          New Analysis Scenario
        </Typography>
        {/* CUSTOMIZE: new item form components */}
        <FormControl fullWidth>
          <InputLabel id="analysis-type-select-label">Analysis Type</InputLabel>
          <Select
            labelId="analysis-type-select-label"
            id="analysis-type-select"
            label="Age"
          >
            <MenuItem value={10}>Analysis Type 1</MenuItem>
            <MenuItem value={20}>Analysis Type 2</MenuItem>
            <MenuItem value={30}>Analysis Type 3</MenuItem>
          </Select>
        </FormControl>
        <FormControl fullWidth>
          <InputLabel id="model-select-label">Model</InputLabel>
          <Select labelId="model-select-label" id="model-select" label="Model">
            <MenuItem value={10}>Model 1</MenuItem>
            <MenuItem value={20}>Model 2</MenuItem>
            <MenuItem value={30}>Model 3</MenuItem>
          </Select>
        </FormControl>
        <TextField id="name-field" label="Scenario Name" variant="outlined" />
        <TextField
          id="description-field"
          label="Description"
          multiline
          rows={4}
        />
        <Box textAlign="right">
          <AppLink to="/run-computation/$id/data-inputs" params={{ id: 'new' }}>
            <Button variant="contained" data-testid="rnc-create-button">
              Create
            </Button>
          </AppLink>
        </Box>
      </Stack>
    </Modal>
  );
};



================================================
FILE: src/pages/run-computation/-context/actions.ts
================================================
import { RunComputationState } from './ContextProvider';

export enum RunComputationActionType {
  SET_LIST_TABLE_DATA = 'SET_LIST_TABLE_DATA',
  SET_INPUTS_TABLE_DATA = 'SET_INPUTS_TABLE_DATA',
  SET_RESULTS_TABLE_DATA = 'SET_RESULTS_TABLE_DATA',
  SET_RESULTS_LINECHART_DATA = 'SET_RESULTS_LINECHART_DATA',
  SET_RESULTS_BARCHART_DATA = 'SET_RESULTS_BARCHART_DATA',
}

export interface RunComputationAction {
  type: RunComputationActionType;
  payload?: any;
}

export const setListTableData = (
  data: RunComputationState['list']['table']['data']
): RunComputationAction => ({
  type: RunComputationActionType.SET_LIST_TABLE_DATA,
  payload: data,
});

export const setInputsTableData = (
  data: RunComputationState['inputs']['table']['data']
): RunComputationAction => ({
  type: RunComputationActionType.SET_INPUTS_TABLE_DATA,
  payload: data,
});

export const setResultsTableData = (
  data: RunComputationState['results']['table']['data']
): RunComputationAction => ({
  type: RunComputationActionType.SET_RESULTS_TABLE_DATA,
  payload: data,
});

export const setResultsLineChartData = (
  data: RunComputationState['results']['lineChart']['data']
): RunComputationAction => ({
  type: RunComputationActionType.SET_RESULTS_LINECHART_DATA,
  payload: data,
});

export const setResultsBarChartData = (
  data: RunComputationState['results']['barChart']['data']
): RunComputationAction => ({
  type: RunComputationActionType.SET_RESULTS_BARCHART_DATA,
  payload: data,
});



================================================
FILE: src/pages/run-computation/-context/ContextProvider.tsx
================================================
import React, { useContext, useReducer } from 'react';
import { RunComputationAction, RunComputationActionType } from './actions';

export interface RunComputationState {
  list: {
    table: {
      columns: any[];
      data: any;
      dataIdField: string;
    };
  };
  inputs: {
    table: {
      columns: any[];
      data: any[];
      dataIdField: string;
    };
  };
  results: {
    table: {
      columns: any[];
      data: any[];
      dataIdField: string;
    };
    lineChart: {
      data: any[];
    };
    barChart: {
      data: any[];
    };
  };
  selectedItem?: any;
}

/**
 * RunComputationProvider props are the same as the State except
 * some of the required props in the State are optional props.
 * These props have default values set in the initialState object.
 */
interface RunComputationProviderProps {
  list: Partial<RunComputationState['list']>;
  inputs: Partial<RunComputationState['inputs']>;
  results: Partial<RunComputationState['results']>;
  children: React.ReactNode;
}

const RunComputationContext = React.createContext<
  | {
      state: RunComputationState;
      dispatch: React.Dispatch<RunComputationAction>;
    }
  | undefined
>(undefined);

const initialState: RunComputationState = {
  list: {
    table: {
      columns: [],
      data: [],
      dataIdField: 'id',
    },
  },
  inputs: {
    table: {
      columns: [],
      data: [],
      dataIdField: 'id',
    },
  },
  results: {
    table: {
      columns: [],
      data: [],
      dataIdField: 'id',
    },
    lineChart: {
      data: [],
    },
    barChart: {
      data: [],
    },
  },
};

const initState = (
  state: RunComputationState,
  props: RunComputationProviderProps
) => {
  const st = { ...state };
  if (props.list?.table?.columns)
    st.list.table.columns = props.list.table.columns;
  if (props.list?.table?.data) st.list.table.data = props.list.table.data;
  if (props.list?.table?.dataIdField)
    st.list.table.dataIdField = props.list.table.dataIdField;
  if (props.inputs?.table?.columns)
    st.inputs.table.columns = props.inputs.table.columns;
  if (props.inputs?.table?.data) st.inputs.table.data = props.inputs.table.data;
  if (props.inputs?.table?.dataIdField)
    st.inputs.table.dataIdField = props.inputs.table.dataIdField;
  if (props.results?.table?.columns)
    st.results.table.columns = props.results.table.columns;
  if (props.results?.table?.data)
    st.results.table.data = props.results.table.data;
  if (props.results?.table?.dataIdField)
    st.results.table.dataIdField = props.results.table.dataIdField;
  return st;
};

function runComputationReducer(
  state: RunComputationState,
  action: RunComputationAction
): RunComputationState {
  switch (action.type) {
    case RunComputationActionType.SET_LIST_TABLE_DATA: {
      return {
        ...state,
        list: {
          table: {
            ...state.list.table,
            data: action.payload,
          },
        },
      };
    }
    case RunComputationActionType.SET_INPUTS_TABLE_DATA: {
      return {
        ...state,
        inputs: {
          table: {
            ...state.inputs.table,
            data: action.payload,
          },
        },
      };
    }
    case RunComputationActionType.SET_RESULTS_TABLE_DATA: {
      return {
        ...state,
        results: {
          ...state.results,
          table: {
            ...state.results.table,
            data: action.payload,
          },
        },
      };
    }
    case RunComputationActionType.SET_RESULTS_LINECHART_DATA: {
      return {
        ...state,
        results: {
          ...state.results,
          lineChart: {
            ...state.results.lineChart,
            data: action.payload,
          },
        },
      };
    }
    case RunComputationActionType.SET_RESULTS_BARCHART_DATA: {
      return {
        ...state,
        results: {
          ...state.results,
          barChart: {
            ...state.results.barChart,
            data: action.payload,
          },
        },
      };
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`);
    }
  }
}

export const RunComputationProvider: React.FC<RunComputationProviderProps> = (
  props
) => {
  const [state, dispatch] = useReducer(
    runComputationReducer,
    initState(initialState, props)
  );
  const value = { state, dispatch };

  return (
    <RunComputationContext.Provider value={value}>
      {props.children}
    </RunComputationContext.Provider>
  );
};

export const useRunComputation = () => {
  const context = useContext(RunComputationContext);
  if (context === undefined) {
    throw new Error(
      'useRunComputation must be used within an RunComputationProvider'
    );
  }
  return context;
};



================================================
FILE: src/pages/run-computation/-tests/run-computation.cy.ts
================================================
describe('The Run Computation Task Flow', () => {
  beforeEach(() => {
    cy.visit('/run-computation');
  });

  it('successfully loads', () => {
    cy.get('h1').contains('Scenario List');
  });

  it('runs a new computation', () => {
    cy.get('button[data-testid="rnc-new-button"]').click();
    cy.get('button[data-testid="rnc-create-button"]').click();
    cy.get('.MuiStepLabel-label').first().should('have.class', 'Mui-active');
    cy.get('.MuiStepLabel-label').eq(1).should('have.class', 'Mui-disabled');
    cy.get('.MuiStepLabel-label').eq(2).should('have.class', 'Mui-disabled');
    cy.get('button[data-testid="rnc-settings-next-button"]').click();
    cy.get('button[data-testid="rnc-run-button"]').click();
    cy.get('h2').contains('Running');
    cy.get('.MuiStepLabel-label').first().should('have.class', 'Mui-completed');
    cy.get('.MuiStepLabel-label').eq(1).should('have.class', 'Mui-active');
    cy.get('.MuiStepLabel-label').eq(2).should('have.class', 'Mui-disabled');
    cy.wait(5000);
    cy.get('button[data-testid="rnc-results-button"]').click();
    cy.get('.MuiStepLabel-label').first().should('have.class', 'Mui-completed');
    cy.get('.MuiStepLabel-label').eq(1).should('have.class', 'Mui-completed');
    cy.get('.MuiStepLabel-label').eq(2).should('have.class', 'Mui-active');
    cy.get('.js-plotly-plot').should('have.length', 2);
  });

  it('goes back to the scenario list', () => {
    cy.get('button[data-testid="rnc-new-button"]').click();
    cy.get('button[data-testid="rnc-create-button"]').click();
    cy.get('.MuiStepLabel-label').first().should('have.class', 'Mui-active');
    cy.get('.MuiStepLabel-label').eq(1).should('have.class', 'Mui-disabled');
    cy.get('.MuiStepLabel-label').eq(2).should('have.class', 'Mui-disabled');
    cy.get('a[data-testid="rnc-list-link"]').click();
    cy.get('button[data-testid="rnc-new-button"]');
  });
});



================================================
FILE: src/pages/run-computation/_layout/index.tsx
================================================
import {
  Box,
  Button,
  Container,
  Paper,
  Stack,
  Typography,
} from '@mui/material';
import { useState } from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { NewScenarioModal } from '../-components/NewScenarioModal';
import { useRunComputation } from '../-context/ContextProvider';
import { createFileRoute } from '@tanstack/react-router';

export const Route = createFileRoute('/run-computation/_layout/')({
  component: ListPage,
});

/**
 * List page for all compuation runs in the run-computation Task Flow.
 * Can open the `<NewScenarioModal>` from here and then proceed to the
 * `<DataInputs>` component for the next step.
 */
function ListPage() {
  const { state } = useRunComputation();
  const [modalOpen, setModalOpen] = useState(false);

  const handleNewScenario = () => {
    setModalOpen(true);
  };

  /**
   * Content to render on the page for this component
   */
  return (
    <Box>
      <Container
        maxWidth="xl"
        sx={{
          mt: 4,
        }}
      >
        <Paper>
          <Stack
            direction="row"
            spacing={2}
            alignItems="center"
            sx={{
              padding: 2,
            }}
          >
            <Box flex={1}>
              <Typography variant="h6" component="h1">
                {/* CUSTOMIZE: page title */}
                Scenario List
              </Typography>
              <Typography variant="subtitle1" component="p">
                {/* CUSTOMIZE: page description */}
                Scenarios represent a set of analysis inputs / parameters /
                settings and the results of that analysis.
              </Typography>
            </Box>
            {/* CUSTOMIZE: new scenario button */}
            <Button
              variant="contained"
              onClick={handleNewScenario}
              data-testid="rnc-new-button"
            >
              New Scenario
            </Button>
            <NewScenarioModal
              modalOpen={modalOpen}
              setModalOpen={setModalOpen}
            />
          </Stack>
          <DataGrid
            rows={state.list.table.data}
            getRowId={(row) => row[state.list.table.dataIdField]}
            columns={state.list.table.columns}
            disableColumnSelector
            disableRowSelectionOnClick
          />
        </Paper>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/run-computation/_layout/$id/_layout.tsx
================================================
import ChevronRightIcon from '@mui/icons-material/ChevronRight';
import {
  AppBar,
  Box,
  Breadcrumbs,
  Stack,
  Toolbar,
  Typography,
} from '@mui/material';
import { createFileRoute, Outlet } from '@tanstack/react-router';
import { AppLink } from '../../../../components/AppLink';

export const Route = createFileRoute('/run-computation/_layout/$id/_layout')({
  component: ComputationLayout,
});

/**
 * Wrapper component for the steps involved in a computational run.
 * This goes from `<DataInputs>` to `<Settings>` to `<RunningComputation>` to `<Results>`.
 * These inner steps are rendered by the `<Outlet>` component.
 */
function ComputationLayout() {
  return (
    <Stack spacing={0} height="100vh">
      <Box>
        <AppBar
          color="default"
          position="static"
          sx={{
            backgroundColor: 'white',
            borderBottom: '1px solid',
            borderColor: 'neutral.main',
          }}
        >
          <Toolbar variant="dense">
            <Stack direction="row" alignItems="center" sx={{ flexGrow: 1 }}>
              <Breadcrumbs
                aria-label="breadcrumb"
                separator={<ChevronRightIcon fontSize="small" />}
              >
                <AppLink
                  underline="hover"
                  color="inherit"
                  to="/run-computation"
                  data-testid="rnc-list-link"
                >
                  {/* CUSTOMIZE: breadcrumb link */}
                  Scenario List
                </AppLink>
                <Typography color="text.primary">
                  {/* CUSTOMIZE: breadcrumb label */}
                  Optimization Scenario 1
                </Typography>
              </Breadcrumbs>
            </Stack>
          </Toolbar>
        </AppBar>
      </Box>
      <Outlet />
    </Stack>
  );
}

export default ComputationLayout;



================================================
FILE: src/pages/run-computation/_layout/$id/_layout/data-inputs.tsx
================================================
import {
  Box,
  Button,
  Container,
  Paper,
  Stack,
  Step,
  StepLabel,
  Stepper,
  Typography,
} from '@mui/material';
import { useEffect } from 'react';
import { DataGrid } from '@mui/x-data-grid';
import { useDataFromSource } from '../../../../../hooks/useDataFromSource';
import { useRunComputation } from '../../../-context/ContextProvider';
import { setInputsTableData } from '../../../-context/actions';
import { createFileRoute } from '@tanstack/react-router';
import { AppLink } from '../../../../../components/AppLink';

export const Route = createFileRoute(
  '/run-computation/_layout/$id/_layout/data-inputs'
)({
  component: DataInputsPage,
});

/**
 * Page to display input data after creating or selecting an item from
 * the `<ComputationsList>` page in the run-computation Task Flow.
 * Table columns are configured in `definitions.inputs.table.columns`
 */
function DataInputsPage() {
  const { state, dispatch } = useRunComputation();
  // CUSTOMIZE: inputs table data source
  const inputsData = useDataFromSource('dummy-data/inputs.json');

  /**
   * Set data for the inputs table when the data loads
   */
  useEffect(() => {
    if (!state.inputs.table.data || state.inputs.table.data.length === 0) {
      dispatch(setInputsTableData(inputsData));
    }
  }, [inputsData]);

  return (
    <Stack spacing={0} flex={1}>
      <Box
        sx={{
          backgroundColor: 'white',
          padding: 2,
          borderBottom: '1px solid',
          borderColor: 'neutral.main',
        }}
      >
        <Stepper activeStep={0} sx={{ maxWidth: 850 }}>
          <Step key="Data Inputs">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/data-inputs"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Data Inputs
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Optimization Settings">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/settings"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Optimization Settings
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Results">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/results"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Results
              </AppLink>
            </StepLabel>
          </Step>
        </Stepper>
      </Box>
      <Stack direction="row" spacing={0} flex={1}>
        <Stack
          component="ul"
          direction="column"
          spacing={0}
          sx={{
            backgroundColor: 'white',
            listStyle: 'none',
            margin: 0,
            padding: 4,
            width: 300,
          }}
        >
          <Typography
            component="li"
            fontWeight="bold"
            sx={{
              marginBottom: 2,
            }}
          >
            Categories
          </Typography>
          <Typography
            component="li"
            sx={{
              backgroundColor: '#D9EEFE',
              borderRight: '4px solid',
              borderColor: 'primary.main',
              padding: '1rem 2rem',
              marginLeft: '-2rem !important',
              marginRight: '-2rem !important',
            }}
          >
            Input Units
          </Typography>
          <Typography
            component="li"
            sx={{
              padding: '1rem 2rem',
              marginLeft: '-2rem !important',
              marginRight: '-2rem !important',
            }}
          >
            Input Streams
          </Typography>
          <Typography
            component="li"
            sx={{
              padding: '1rem 2rem',
              marginLeft: '-2rem !important',
              marginRight: '-2rem !important',
            }}
          >
            Unit Costing
          </Typography>
        </Stack>
        <Box flex={1} sx={{ overflow: 'hidden' }}>
          <Container
            maxWidth="xl"
            sx={{
              mt: 4,
            }}
          >
            <Paper>
              <DataGrid
                rows={state.inputs.table.data || []}
                getRowId={(row) => row[state.inputs.table.dataIdField]}
                columns={state.inputs.table.columns}
                disableColumnSelector
                disableRowSelectionOnClick
              />
            </Paper>
          </Container>
        </Box>
      </Stack>
      <Box
        sx={{
          backgroundColor: 'white',
          borderTop: '1px solid',
          borderColor: 'neutral.main',
          bottom: 0,
          padding: 2,
          position: 'fixed',
          textAlign: 'right',
          width: '100%',
        }}
      >
        <AppLink to="/run-computation/$id/settings" params={{ id: 'new' }}>
          <Button variant="contained" data-testid="rnc-settings-next-button">
            Continue to Optimization Settings
          </Button>
        </AppLink>
      </Box>
    </Stack>
  );
}



================================================
FILE: src/pages/run-computation/_layout/$id/_layout/results.tsx
================================================
import {
  Box,
  Button,
  Container,
  Grid,
  Paper,
  Stack,
  Step,
  StepLabel,
  Stepper,
  Typography,
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import { createFileRoute } from '@tanstack/react-router';
import { useEffect } from 'react';
import Plot from 'react-plotly.js';
import { AppLink } from '../../../../../components/AppLink';
import { useRunComputation } from '../../../-context/ContextProvider';
import {
  setResultsBarChartData,
  setResultsLineChartData,
  setResultsTableData,
} from '../../../-context/actions';
import { useDataFromSource } from '../../../../../hooks/useDataFromSource';

export const Route = createFileRoute(
  '/run-computation/_layout/$id/_layout/results'
)({
  component: ResultsPage,
});

/**
 * Results page to display after a computation completes in the run-computation Task Flow.
 * Displays a line chart, bar chart, and table of results from the computation.
 */
function ResultsPage() {
  const { state, dispatch } = useRunComputation();
  // CUSTOMIZE: results table data source
  const tableData = useDataFromSource('dummy-data/results_table.json');
  // CUSTOMIZE: results line chart data source
  const lineData = useDataFromSource('dummy-data/results_line_chart.json');
  // CUSTOMIZE: results bar chart data source
  const barData = useDataFromSource('dummy-data/results_bar_chart.json');

  /**
   * Set data for the results table when the data loads
   */
  useEffect(() => {
    if (!state.results.table.data || state.results.table.data.length === 0) {
      dispatch(setResultsTableData(tableData));
    }
  }, [tableData]);

  /**
   * Set data for the results line chart when the data loads
   */
  useEffect(() => {
    if (
      !state.results.lineChart.data ||
      state.results.lineChart.data.length === 0
    ) {
      dispatch(setResultsLineChartData(lineData));
    }
  }, [lineData]);

  /**
   * Set data for the results bar chart when the data loads
   */
  useEffect(() => {
    if (
      !state.results.barChart.data ||
      state.results.barChart.data.length === 0
    ) {
      dispatch(setResultsBarChartData(barData));
    }
  }, [barData]);

  return (
    <Stack spacing={0} flex={1}>
      <Box
        sx={{
          backgroundColor: 'white',
          padding: 2,
          borderBottom: '1px solid',
          borderColor: 'neutral.main',
        }}
      >
        <Stepper activeStep={2} sx={{ maxWidth: 850 }}>
          <Step key="Data Inputs">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/data-inputs"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Data Inputs
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Optimization Settings">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/settings"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Optimization Settings
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Results">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/results"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Results
              </AppLink>
            </StepLabel>
          </Step>
        </Stepper>
      </Box>
      <Stack direction="row" spacing={0} flex={1}>
        <Stack
          component="ul"
          direction="column"
          spacing={0}
          sx={{
            backgroundColor: 'white',
            listStyle: 'none',
            margin: 0,
            padding: 4,
            width: 300,
          }}
        >
          <Typography
            component="li"
            fontWeight="bold"
            sx={{
              marginBottom: 2,
            }}
          >
            Categories
          </Typography>
          <Typography
            component="li"
            sx={{
              backgroundColor: '#D9EEFE',
              borderRight: '4px solid',
              borderColor: 'primary.main',
              padding: '1rem 2rem',
              marginLeft: '-2rem !important',
              marginRight: '-2rem !important',
            }}
          >
            Summary
          </Typography>
          <Typography
            component="li"
            sx={{
              padding: '1rem 2rem',
              marginLeft: '-2rem !important',
              marginRight: '-2rem !important',
            }}
          >
            System Costing
          </Typography>
          <Typography
            component="li"
            sx={{
              padding: '1rem 2rem',
              marginLeft: '-2rem !important',
              marginRight: '-2rem !important',
            }}
          >
            System Metrics
          </Typography>
        </Stack>
        <Box flex={1}>
          <Container
            maxWidth="xl"
            sx={{
              mt: 4,
            }}
          >
            <Grid container spacing={4}>
              <Grid item sm={6}>
                <Paper>
                  <Plot data={state.results.lineChart.data} layout={{}} />
                </Paper>
              </Grid>
              <Grid item sm={6}>
                <Paper>
                  <Plot data={state.results.barChart.data} layout={{}} />
                </Paper>
              </Grid>
              <Grid item xs={12}>
                <Paper>
                  <DataGrid
                    rows={state.results.table.data || []}
                    getRowId={(row) => row[state.results.table.dataIdField]}
                    columns={state.results.table.columns}
                    disableColumnSelector
                    disableRowSelectionOnClick
                  />
                </Paper>
              </Grid>
            </Grid>
          </Container>
        </Box>
      </Stack>
      <Box
        sx={{
          backgroundColor: 'white',
          borderTop: '1px solid',
          borderColor: 'neutral.main',
          bottom: 0,
          padding: 2,
          position: 'fixed',
          width: '100%',
        }}
      >
        <AppLink to="/run-computation/$id/settings" params={{ id: 'new' }}>
          {/* CUSTOMIZE: back to settings button */}
          <Button variant="contained">Back to Optimization Settings</Button>
        </AppLink>
      </Box>
    </Stack>
  );
}



================================================
FILE: src/pages/run-computation/_layout/$id/_layout/running.tsx
================================================
import {
  Box,
  Button,
  Container,
  LinearProgress,
  Paper,
  Stack,
  Step,
  StepLabel,
  Stepper,
  Typography,
} from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { useEffect, useState } from 'react';
import { AppLink } from '../../../../../components/AppLink';

export const Route = createFileRoute(
  '/run-computation/_layout/$id/_layout/running'
)({
  component: RunningComputationPage,
});

/**
 * Page to show while a computation is running and after it completes.
 * Continuing after completion, this page takes users to the `<Results>` page.
 */
function RunningComputationPage() {
  const [running, setRunning] = useState(true);

  /**
   * Simulate the time it takes to run the optimization
   */
  useEffect(() => {
    setTimeout(() => {
      setRunning(false);
    }, 2000);
  });

  return (
    <Stack spacing={0} flex={1}>
      <Box
        sx={{
          backgroundColor: 'white',
          padding: 2,
          borderBottom: '1px solid',
          borderColor: 'neutral.main',
        }}
      >
        <Stepper activeStep={1} sx={{ maxWidth: 850 }}>
          <Step key="Data Inputs">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/data-inputs"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Data Inputs
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Optimization Settings">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/settings"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Optimization Settings
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Results">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/results"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Results
              </AppLink>
            </StepLabel>
          </Step>
        </Stepper>
      </Box>
      <Container
        maxWidth="md"
        sx={{
          mt: 4,
        }}
      >
        <Paper sx={{ padding: 6, textAlign: 'center' }}>
          {running && (
            <Stack spacing={6}>
              <Typography variant="h6" component="h2">
                {/* CUSTOMIZE: in progress title */}
                Running Optimization
              </Typography>
              <Box color="neutral.dark">
                {/* CUSTOMIZE: in progress description */}
                <Typography>This could take several minutes.</Typography>
                <Typography>
                  You may leave this page and return later. Your progress will
                  not be affected.
                </Typography>
              </Box>
              <LinearProgress variant="indeterminate" sx={{ height: 10 }} />
              <Typography color="neutral.dark">
                Started 05/24/2023 12:32:33
              </Typography>
            </Stack>
          )}
          {!running && (
            <Stack spacing={6}>
              <Typography variant="h6" component="h2">
                Complete
              </Typography>
              <Box color="neutral.dark">
                <Typography>Your results are ready to view.</Typography>
              </Box>
              <AppLink to="/run-computation/$id/results" params={{ id: 'new' }}>
                <Button
                  variant="contained"
                  size="large"
                  data-testid="rnc-results-button"
                >
                  Continue to Results
                </Button>
              </AppLink>
              <Typography color="neutral.dark">
                Started 05/24/2023 9:32:33 AM, Ended 05/24/2023 11:47:03 AM
              </Typography>
            </Stack>
          )}
        </Paper>
      </Container>
    </Stack>
  );
}

export default RunningComputationPage;



================================================
FILE: src/pages/run-computation/_layout/$id/_layout/settings.tsx
================================================
import {
  Box,
  Button,
  Container,
  FormControl,
  Grid,
  MenuItem,
  Paper,
  Select,
  Stack,
  Step,
  StepLabel,
  Stepper,
  TextField,
  Typography,
} from '@mui/material';
import { useState } from 'react';
import { AppLink } from '../../../../../components/AppLink';
import { createFileRoute } from '@tanstack/react-router';

export const Route = createFileRoute(
  '/run-computation/_layout/$id/_layout/settings'
)({
  component: SettingsPage,
});

/**
 * Page to configure settings for a computational run.
 * Completing and submitting the form takes users to the
 * `<RunningComputation>` component.
 */
function SettingsPage() {
  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleAdvancedToggle = () => {
    setShowAdvanced(!showAdvanced);
  };

  return (
    <Stack spacing={0} flex={1}>
      <Box
        sx={{
          backgroundColor: 'white',
          padding: 2,
          borderBottom: '1px solid',
          borderColor: 'neutral.main',
        }}
      >
        <Stepper activeStep={1} sx={{ maxWidth: 850 }}>
          <Step key="Data Inputs">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/data-inputs"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Data Inputs
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Optimization Settings">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/settings"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Optimization Settings
              </AppLink>
            </StepLabel>
          </Step>
          <Step key="Results">
            <StepLabel>
              <AppLink
                to="/run-computation/$id/results"
                params={{ id: 'new' }}
                sx={{ color: 'inherit', textDecoration: 'none' }}
              >
                Results
              </AppLink>
            </StepLabel>
          </Step>
        </Stepper>
      </Box>
      <Container
        maxWidth="md"
        sx={{
          mt: 4,
        }}
      >
        <Paper sx={{ padding: 3 }}>
          <Stack>
            <Typography variant="h6" component="h2">
              {/* CUSTOMIZE: settings page title */}
              Optimization Settings
            </Typography>
            <Grid container rowSpacing={2} alignItems="center">
              {/* CUSTOMIZE: settings form elements */}
              <Grid item md={3}>
                <Typography>Solver</Typography>
              </Grid>
              <Grid item md={9}>
                <FormControl fullWidth>
                  <Select id="solver-select">
                    <MenuItem value={10}>Solver 1</MenuItem>
                    <MenuItem value={20}>Solver 2</MenuItem>
                    <MenuItem value={30}>Solver 3</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item md={3}>
                <Typography>Objective</Typography>
              </Grid>
              <Grid item md={9}>
                <FormControl fullWidth>
                  <Select id="objective-select">
                    <MenuItem value={10}>Objective 1</MenuItem>
                    <MenuItem value={20}>Objective 2</MenuItem>
                    <MenuItem value={30}>Objective 3</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item md={3}>
                <Typography>Time Constraints</Typography>
              </Grid>
              <Grid item md={9}>
                <TextField
                  id="time-constraints-field"
                  variant="outlined"
                  fullWidth
                />
              </Grid>
            </Grid>
            <Box>
              <Button onClick={handleAdvancedToggle}>
                {showAdvanced ? 'Hide' : 'Show'} advanced settings
              </Button>
            </Box>
            {showAdvanced && (
              <Grid container rowSpacing={2} alignItems="center">
                <Grid item md={3}>
                  <Typography>Another Setting</Typography>
                </Grid>
                <Grid item md={9}>
                  <FormControl fullWidth>
                    <Select id="another-select">
                      <MenuItem value={10}>Another Setting 1</MenuItem>
                      <MenuItem value={20}>Another Setting 2</MenuItem>
                      <MenuItem value={30}>Another Setting 3</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item md={3}>
                  <Typography>Another Setting</Typography>
                </Grid>
                <Grid item md={9}>
                  <FormControl fullWidth>
                    <Select id="another-2-select">
                      <MenuItem value={10}>Another Setting 1</MenuItem>
                      <MenuItem value={20}>Another Setting 2</MenuItem>
                      <MenuItem value={30}>Another Setting 3</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            )}
            <Box textAlign="right">
              <AppLink to="/run-computation/$id/running" params={{ id: 'new' }}>
                {/* CUSTOMIZE: run button */}
                <Button
                  variant="contained"
                  data-testid="rnc-run-button"
                  sx={{ marginTop: 4 }}
                >
                  Run Scenario
                </Button>
              </AppLink>
            </Box>
          </Stack>
        </Paper>
      </Container>
    </Stack>
  );
}



================================================
FILE: src/pages/search-data-repositories/$id.tsx
================================================
import DownloadIcon from '@mui/icons-material/Download';
import VisibilityIcon from '@mui/icons-material/Visibility';
import { TabContext, TabList, TabPanel } from '@mui/lab';
import {
  Box,
  Button,
  Container,
  Grid,
  Link,
  Paper,
  Stack,
  Tab,
  Typography,
} from '@mui/material';
import { DataGrid, GridActionsCellItem, GridColDef } from '@mui/x-data-grid';
import React from 'react';
import { LabelValueTable } from '../../components/LabelValueTable';
import { PageHeader } from '../../components/PageHeader';
import { useDetailQuery } from '../../hooks/useDetailQuery';
import { createFileRoute } from '@tanstack/react-router';

export const Route = createFileRoute('/search-data-repositories/$id')({
  component: DatasetDetail,
});

/**
 * Attached files data configured in-file for prototyping
 */
const attachedFilesColumns: GridColDef[] = [
  {
    field: 'file_name',
    headerName: 'File Name',
    flex: 1,
  },
  {
    field: 'description',
    headerName: 'Description',
    flex: 1,
  },
  {
    field: 'file_size',
    headerName: 'Size',
    width: 150,
  },
  {
    field: 'actions',
    headerName: '',
    type: 'actions',
    getActions: () => [
      <GridActionsCellItem icon={<DownloadIcon />} label="Download" />,
      <GridActionsCellItem icon={<VisibilityIcon />} label="View" />,
    ],
    flex: 1,
  },
];

/**
 * Detail page for a particular dataset. This is accessed by clicking on a
 * card title or the link in the `<PreviewPanel>`.
 */
function DatasetDetail() {
  const { id } = Route.useParams();
  const { data } = useDetailQuery({
    // CUSTOMIZE: the detail page data source
    dataSource: 'dummy-data/datasets.json',
    // CUSTOMIZE: the unique ID field for the detail page data source
    dataIdField: 'id',
    paramId: id,
    // CUSTOMIZE: the query mode (client or server)
    queryMode: 'client',
    staticParams: null,
  });
  const datasetTitle = data ? data.title : 'Not Found';
  const [dataTabsValue, setDataTabsValue] = React.useState('1');

  const handleDataTabsChange = (
    event: React.SyntheticEvent,
    newValue: string
  ) => {
    setDataTabsValue(newValue);
  };

  return (
    <Box>
      <PageHeader
        pageTitle={datasetTitle}
        breadcrumbTitle="Dataset Detail"
        sx={{
          marginBottom: 1,
          padding: 2,
        }}
      />
      <Container maxWidth="xl">
        <Grid container spacing={1} sx={{ pt: 1, pr: 2, pb: 2, pl: 2 }}>
          {data && (
            <>
              <Grid item md={8} xs={12}>
                <Paper sx={{ mb: 1 }}>
                  <Stack p={2}>
                    <Stack direction="row">
                      <Box>
                        <Typography variant="h6" component="h2" mb={1}>
                          Dates
                        </Typography>
                        <LabelValueTable
                          rows={[
                            {
                              label: 'Publication',
                              value: data.publication_date,
                            },
                            { label: 'Start Date', value: data.start_date },
                            { label: 'End Date', value: data.end_date },
                          ]}
                        />
                      </Box>
                      <Box flex={1}>
                        <Typography variant="h6" component="h2" mb={1}>
                          Citation
                        </Typography>
                        <Typography>{data.citation}</Typography>
                      </Box>
                    </Stack>
                    <Box>
                      <Typography variant="h6" component="h2" mb={1}>
                        Summary
                      </Typography>
                      <Typography>{data.summary}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="h6" component="h2" mb={1}>
                        Purpose
                      </Typography>
                      <Typography>{data.purpose}</Typography>
                    </Box>
                  </Stack>
                </Paper>
                <Paper>
                  <TabContext value={dataTabsValue}>
                    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
                      <TabList
                        onChange={handleDataTabsChange}
                        aria-label="lab API tabs example"
                      >
                        <Tab label="Data Files" value="1" />
                        <Tab label="Data Types" value="2" />
                        <Tab label="Metadata" value="3" />
                      </TabList>
                    </Box>
                    <TabPanel value="1">
                      <Stack direction="row" justifyContent="flex-end">
                        <Button variant="contained">Download all files</Button>
                      </Stack>
                      <DataGrid
                        rows={data.attached_files}
                        getRowId={(row) => row.file_id}
                        columns={attachedFilesColumns}
                        disableColumnSelector
                        disableRowSelectionOnClick
                        sx={{
                          border: 'none',
                        }}
                      />
                    </TabPanel>
                    <TabPanel value="2">Tab Two Content</TabPanel>
                    <TabPanel value="3">Tab Three Content</TabPanel>
                  </TabContext>
                </Paper>
              </Grid>
              <Grid item md={4} xs={12}>
                <Paper>
                  <Stack p={2}>
                    <Box>
                      <Typography variant="h6" component="h2" mb={1}>
                        Map
                      </Typography>
                      <Box
                        sx={{
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          bgcolor: 'neutral.dark',
                          height: 300,
                        }}
                      >
                        <Typography>{'<Map>'}</Typography>
                      </Box>
                    </Box>
                    <Box>
                      <Typography variant="h6" component="h2" mb={1}>
                        Tags
                      </Typography>
                      {data.tags.map((tag: string, i: number) => {
                        if (i < data.tags.length - 1) {
                          return (
                            <Typography
                              key={tag}
                              component="span"
                              sx={{ fontSize: 'small', marginRight: 0.5 }}
                            >
                              {tag},
                            </Typography>
                          );
                        } else {
                          return (
                            <Typography
                              key={tag}
                              component="span"
                              sx={{ fontSize: 'small' }}
                            >
                              {tag}
                            </Typography>
                          );
                        }
                      })}
                    </Box>
                    <Box>
                      <Typography variant="h6" component="h2" mb={1}>
                        Communities
                      </Typography>
                      <ul>
                        {data.communities.map((community: any) => (
                          <li key={community.title}>
                            <Link href={community.url} target="_blank">
                              {community.title}
                            </Link>
                          </li>
                        ))}
                      </ul>
                    </Box>
                    <Box>
                      <Typography variant="h6" component="h2" mb={1}>
                        Associated Projects
                      </Typography>
                      <ul>
                        {data.associated_projects.map((project: any) => (
                          <li key={project.title}>
                            <Link href={project.url} target="_blank">
                              {project.title}
                            </Link>
                          </li>
                        ))}
                      </ul>
                    </Box>
                    <Box>
                      <Typography variant="h6" component="h2" mb={1}>
                        Contacts
                      </Typography>
                      <LabelValueTable
                        rows={[
                          {
                            label: 'Point of Contact',
                            value: data.point_of_contact,
                          },
                          { label: 'Originator', value: data.originator },
                          {
                            label: 'Metadata Contact',
                            value: data.metadata_contact,
                          },
                          { label: 'Publisher', value: data.publisher },
                          { label: 'Distributor', value: data.distributor },
                          {
                            label: 'USGS Mission Area',
                            value: data.usgs_mission_area,
                          },
                        ]}
                      />
                    </Box>
                  </Stack>
                </Paper>
              </Grid>
            </>
          )}
          {!data && <Typography>Could not find this dataset</Typography>}
        </Grid>
      </Container>
    </Box>
  );
}



================================================
FILE: src/pages/search-data-repositories/index.tsx
================================================
import { Box, Stack } from '@mui/material';
import { createFileRoute } from '@tanstack/react-router';
import { useState } from 'react';
import { FilterContext } from '../../components/FilterContext';
import { PageHeader } from '../../components/PageHeader';
import { FiltersPanel } from './-components/FiltersPanel';
import { DataListPanel } from './-components/DataListPanel';
import { PreviewPanel } from './-components/PreviewPanel';
import { FilterConfig } from '../../types/filters.types';

export const Route = createFileRoute('/search-data-repositories/')({
  component: DatasetExplorer,
});

// CUSTOMIZE: the filter definitions
const filterConfigs: FilterConfig[] = [
  {
    /**
     * Exact name of the property field in the data to filter on.
     */
    field: 'category',
    /**
     * Text to display in the label for the filter.
     */
    label: 'Category',
    operator: 'contains-one-of',
    /**
     * The kind of filter component and function to use. Must be "CheckboxList", "Slider", or "data range".
     */
    filterComponent: 'CheckboxList',
    /**
     * Extra options to pass to the filter based on the filter type.
     */
    filterProps: {
      options: [
        {
          label: 'Groundwater',
          value: 'Groundwater',
        },
        {
          label: 'Fires',
          value: 'Fires',
        },
        {
          label: 'Floods',
          value: 'Floods',
        },
        {
          label: 'Earthquakes',
          value: 'Earthquakes',
        },
      ],
    },
  },
  {
    field: 'tags',
    label: 'Tags',
    operator: 'contains-one-of',
    filterComponent: 'CheckboxList',
    filterProps: {
      options: [
        {
          label: 'Boreal forest',
          value: 'Boreal forest',
        },
        {
          label: 'Carbon and greenhouse gas emissions',
          value: 'Carbon and greenhouse gas emissions',
        },
        {
          label: 'Ecology',
          value: 'Ecology',
        },
      ],
    },
  },
  {
    field: 'publication_date',
    label: 'Publication Date',
    operator: 'between-dates-inclusive',
    filterComponent: 'DateRange',
  },
];

/**
 * The main explore page for the search-data-repositories Task Flow.
 * Displays a page header, `<FiltersPanel>`, `<DataListPanel>`, and `<PreviewPanel>`.
 */
function DatasetExplorer() {
  const [previewItem, setPreviewItem] = useState<any>();
  const [showFiltersPanel, setShowFiltersPanel] = useState(true);

  const handleCloseFilters = () => {
    setShowFiltersPanel(false);
  };

  const handleToggleFilters = () => {
    setShowFiltersPanel(!showFiltersPanel);
  };

  const handleClosePreview = () => {
    setPreviewItem(null);
  };

  return (
    <FilterContext>
      <Box>
        <PageHeader
          pageTitle="Search Data Repositories App"
          description="Description of this app section"
          sx={{
            marginBottom: 1,
            padding: 2,
          }}
        />
        <Box>
          <Stack direction="row">
            {showFiltersPanel && (
              <Box
                sx={{
                  width: '350px',
                }}
              >
                <FiltersPanel
                  filterConfigs={filterConfigs}
                  onClose={handleCloseFilters}
                />
              </Box>
            )}
            <Box
              sx={{
                border: 'none',
                flex: 1,
                minHeight: '600px',
                minWidth: 0,
              }}
            >
              <DataListPanel
                filterConfigs={filterConfigs}
                onToggleFiltersPanel={handleToggleFilters}
                previewItem={previewItem}
                setPreviewItem={setPreviewItem}
              />
            </Box>
            {previewItem && (
              <Box
                sx={{
                  maxWidth: '600px',
                  minWidth: '400px',
                }}
              >
                <PreviewPanel
                  previewItem={previewItem}
                  onClose={handleClosePreview}
                />
              </Box>
            )}
          </Stack>
        </Box>
      </Box>
    </FilterContext>
  );
}



================================================
FILE: src/pages/search-data-repositories/-components/DataListCard.tsx
================================================
import { Box, Stack, Typography } from '@mui/material';
import { blue } from '@mui/material/colors';
import React from 'react';
import { AppLink } from '../../../components/AppLink';

interface DataListCardProps {
  item: any;
  previewItem: any;
  setPreviewItem: React.Dispatch<React.SetStateAction<any>>;
}

/**
 * Card to show in the main list of the `<DatasetExplorer>`.
 * The fields that are displayed in the cards are originally
 * configured in `defintions.cards.main`.
 */
export const DataListCard: React.FC<DataListCardProps> = ({
  item,
  previewItem,
  setPreviewItem,
}) => {
  const handleItemClick = () => {
    setPreviewItem(item);
  };

  return (
    <Stack
      className={previewItem?.id === item.id ? 'selected' : ''}
      data-testid="sdr-data-list-card"
      direction="row"
      onClick={() => handleItemClick()}
      sx={{
        padding: 1,
        transition: '0.25s',
        '&:hover': {
          bgcolor: 'neutral.light',
        },
        '&.selected': {
          bgcolor: blue[50],
        },
      }}
    >
      <Box
        sx={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          bgcolor: 'neutral.dark',
          height: 70,
          width: 70,
        }}
      >
        <Typography fontSize="small">{'<Image>'}</Typography>
      </Box>
      <Box flex={1}>
        <Typography sx={{ color: 'primary.main', fontWeight: 'bold' }}>
          <AppLink
            to="/search-data-repositories/$id"
            params={{ id: item.id }}
            underline="hover"
          >
            {/* CUSTOMIZE: item title field */}
            {item.title}
          </AppLink>
        </Typography>
        {item.summary && (
          <Typography
            sx={{
              WebkitBoxOrient: 'vertical',
              WebkitLineClamp: '2',
              display: '-webkit-box',
              overflow: 'hidden',
            }}
          >
            {/* CUSTOMIZE: item summary field */}
            {item.summary}
          </Typography>
        )}
        {item.tags && (
          <Typography
            sx={{
              WebkitBoxOrient: 'vertical',
              WebkitLineClamp: '1',
              display: '-webkit-box',
              fontStyle: 'italic',
              overflow: 'hidden',
            }}
          >
            {/* CUSTOMIZE: item tags field */}
            {item.tags.map((tag: string, i: number) => {
              if (i < item.tags.length - 1) {
                return (
                  <Typography
                    key={`${tag}-${i}`}
                    component="span"
                    sx={{ fontSize: 'small', marginRight: 0.5 }}
                  >
                    {tag},
                  </Typography>
                );
              } else {
                return (
                  <Typography
                    key={`${tag}-${i}`}
                    component="span"
                    sx={{ fontSize: 'small' }}
                  >
                    {tag}
                  </Typography>
                );
              }
            })}
          </Typography>
        )}
      </Box>
    </Stack>
  );
};



================================================
FILE: src/pages/search-data-repositories/-components/DataListPanel.tsx
================================================
import FilterAltIcon from '@mui/icons-material/FilterAlt';
import SortIcon from '@mui/icons-material/Sort';
import {
  Alert,
  Box,
  Button,
  Pagination,
  Paper,
  Skeleton,
  Stack,
  TextField,
  Typography,
} from '@mui/material';
import React, { useEffect, useState } from 'react';
import { useFilters } from '../../../components/FilterContext';
import { FilterConfig } from '../../../types/filters.types';
import { filterData } from '../../../utils/filters.utils';
import { useListQuery } from '../../../hooks/useListQuery';
import { DataListCard } from './DataListCard';

interface DataListPanelProps {
  filterConfigs: FilterConfig[];
  onToggleFiltersPanel: () => any;
  previewItem: any;
  setPreviewItem: React.Dispatch<React.SetStateAction<any>>;
}

/**
 * Show a list of filterable `<DataListCard>` components based on the data source.
 * Cards are filterable by the inputs in `<FiltersPanel>` and clicking a card will
 * display the `<PreviewPanel>`.
 */
export const DataListPanel: React.FC<DataListPanelProps> = ({
  filterConfigs,
  onToggleFiltersPanel,
  previewItem,
  setPreviewItem,
}) => {
  const { activeFilters } = useFilters();
  const [searchTerm, setSearchTerm] = useState('');
  const [page, setPage] = useState(1);
  const pageSize = 10;
  const [offset, setOffest] = useState((page - 1) * pageSize);
  const [total, setTotal] = useState(1);
  const [paginatedCards, setPaginatedCards] = useState<any[]>([]);
  // CUSTOMIZE: the query mode
  const queryMode: 'client' | 'server' = 'client';
  const { isPending, isError, data, error } = useListQuery({
    activeFilters,
    // CUSTOMIZE: the main data source
    dataSource: 'dummy-data/datasets.json',
    filterConfigs,
    offset,
    page,
    pageSize,
    queryMode,
    staticParams: null,
  });
  const cards = filterData(data, activeFilters, filterConfigs, searchTerm);
  const emptyRows = new Array(pageSize).fill(null);
  const indexedRows = emptyRows.map((row, i) => i);

  const handleSearch: React.ChangeEventHandler<HTMLInputElement> = (evt) => {
    setSearchTerm(evt.target.value);
  };

  const handlePageChange = (
    event: React.ChangeEvent<unknown>,
    value: number
  ) => {
    setPage(value);
  };

  // Set total count after cards is populated from query
  useEffect(() => {
    if (cards) {
      setTotal(cards.length);
    }
  }, [cards]);

  // Modify the item offset when the page changes
  useEffect(() => {
    setOffest((page - 1) * pageSize);
  }, [page]);

  // Filter cards based on their index when the page and offset change
  // The paginatedCards list is only relevant/used for client mode apps
  useEffect(() => {
    if (cards) {
      setPaginatedCards(
        cards.filter((_card: any, i: number) => {
          return i >= offset && i < offset + pageSize;
        })
      );
    }
  }, [cards, offset]);

  return (
    <Paper elevation={0}>
      <Stack
        direction="row"
        spacing={2}
        alignItems="center"
        sx={{
          padding: 2,
        }}
      >
        <Button startIcon={<FilterAltIcon />} onClick={onToggleFiltersPanel}>
          Filters
        </Button>
        <Button startIcon={<SortIcon />}>Sort</Button>
        <Box flex={1}>
          <TextField
            variant="outlined"
            label="Search"
            size="small"
            value={searchTerm}
            fullWidth
            onChange={handleSearch}
          />
        </Box>
      </Stack>
      <Stack
        direction="row"
        sx={{
          padding: 2,
        }}
      >
        {isPending && (
          <Box
            flex={1}
            sx={{
              padding: 2,
            }}
          >
            {indexedRows.map((row) => (
              <Skeleton key={row} height={100} />
            ))}
          </Box>
        )}
        {isError && (
          <Stack flex={1}>
            <Alert severity="error">{error.message}</Alert>
          </Stack>
        )}
        {queryMode == 'client' && cards && cards.length > 0 && (
          <Stack flex={1}>
            {paginatedCards?.map((item: any) => (
              <DataListCard
                key={item.id}
                item={item}
                previewItem={previewItem}
                setPreviewItem={setPreviewItem}
              />
            ))}
          </Stack>
        )}
        {/* {queryMode == 'server' && cards && cards.length > 0 && (
          <Stack flex={1}>
            {cards?.map((item: any) => (
              <DataListCard
                key={item[taskflow.data.list.idField]}
                item={item}
                previewItem={previewItem}
                setPreviewItem={setPreviewItem}
              />
            ))}
          </Stack>
        )} */}
        {cards && cards.length === 0 && (
          <Stack flex={1}>
            <Typography>No data matches your search</Typography>
          </Stack>
        )}
        {!previewItem && (
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              bgcolor: 'neutral.dark',
              height: 700,
              width: 400,
            }}
          >
            <Typography>{'<Map>'}</Typography>
          </Box>
        )}
      </Stack>
      <Pagination
        count={Math.ceil(total / pageSize)}
        page={page}
        onChange={handlePageChange}
        sx={{
          padding: 2,
        }}
      />
    </Paper>
  );
};



================================================
FILE: src/pages/search-data-repositories/-components/FiltersPanel.tsx
================================================
import { FilterField } from '../../../components/FilterField';
import { Filters } from '../../../components/Filters';
import { FilterConfig } from '../../../types/filters.types';

interface FiltersPanelProps {
  filterConfigs: FilterConfig[];
  onClose: () => any;
}

/**
 * Main filters panel in the search-data-repositories Task Flow.
 * Filters are generated based on the configurations in `taskflow.pages.index.cardFilters`.
 * The input values will filter data in the `<DataListPanel>`.
 */
export const FiltersPanel: React.FC<FiltersPanelProps> = ({
  filterConfigs,
  onClose,
}) => {
  // Content to render on the page for this component
  return (
    <Filters grouped={false} onClose={onClose} sx={{ border: 'none' }}>
      {filterConfigs.map((f, i) => (
        <FilterField
          key={`${f.field}-${i}`}
          field={f.field}
          label={f.label}
          operator={'contains'}
          filterComponent={f.filterComponent}
          filterProps={f.filterProps}
        />
      ))}
    </Filters>
  );
};



================================================
FILE: src/pages/search-data-repositories/-components/PreviewPanel.tsx
================================================
import CloseIcon from '@mui/icons-material/Close';
import {
  Box,
  Button,
  IconButton,
  Paper,
  Stack,
  Typography,
} from '@mui/material';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import React from 'react';
import { AppLink } from '../../../components/AppLink';
import { LabelValueTable } from '../../../components/LabelValueTable';

/**
 * Placeholder columns for attached files table
 */
const attachedFilesColumns: GridColDef[] = [
  {
    field: 'file_name',
    headerName: 'File Name',
    flex: 1,
  },
  {
    field: 'file_size',
    headerName: 'Size',
    type: 'number',
    width: 150,
  },
];

/**
 * Placeholder rows for attached files table
 */
const attachedFiles = [
  {
    file_name: 'file1.csv',
    file_size: '15 MB',
  },
  {
    file_name: 'file2.json',
    file_size: '117 MB',
  },
  {
    file_name: 'file3.json',
    file_size: '4 MB',
  },
];

interface PreviewPanelProps {
  /**
   * Data for the selected card from the main list
   */
  previewItem: any;
  /**
   * Function to handle hiding
   */
  onClose: () => void;
}

/**
 * Panel to show extra information about a card in a separate panel
 * next to the `<DataListPanel>`.
 */
export const PreviewPanel: React.FC<PreviewPanelProps> = ({
  previewItem,
  onClose,
}) => {
  return (
    <Paper
      elevation={0}
      sx={{
        height: '100%',
        padding: 2,
      }}
    >
      <Stack spacing={3}>
        <Stack spacing={1}>
          <Stack direction="row">
            <Typography variant="h6" component="h3" flex={1}>
              <AppLink
                to="/search-data-repositories/$id"
                params={{ id: previewItem.id }}
                underline="hover"
              >
                {previewItem.title}
              </AppLink>
            </Typography>
            <IconButton size="small" onClick={onClose}>
              <CloseIcon />
            </IconButton>
          </Stack>
          <Typography variant="body2">
            (Optional) Entity description or helper text.
          </Typography>
        </Stack>
        <Box>
          <Typography fontWeight="medium" mb={1}>
            Dates
          </Typography>
          <LabelValueTable
            rows={[
              { label: 'Publication Date', value: '2019-01-01' },
              { label: 'Start Date', value: '2019-01-01' },
              { label: 'End Date', value: '2019-01-01' },
            ]}
          />
        </Box>
        <Box>
          <Typography fontWeight="medium" mb={1}>
            Citation
          </Typography>
          <Typography>
            Labore proident do aute et esse adipisicing veniam eiusmod culpa
            pariatur sunt officia.
          </Typography>
        </Box>
        {previewItem.summary && (
          <Box>
            <Typography fontWeight="medium" mb={1}>
              Summary
            </Typography>
            <Typography>{previewItem.summary}</Typography>
          </Box>
        )}
        {previewItem.tags && (
          <Box>
            <Typography fontWeight="medium" mb={1}>
              Tags
            </Typography>
            <Typography>
              {previewItem.tags.map((tag: string, i: number) => {
                if (previewItem.tags && i < previewItem.tags.length - 1) {
                  return <span key={`${tag}-${i}`}>{`${tag}, `}</span>;
                } else {
                  return <span key={`${tag}-${i}`}>{tag}</span>;
                }
              })}
            </Typography>
          </Box>
        )}
        <Box>
          <Typography fontWeight="medium" mb={1}>
            Attached Files
          </Typography>
          <DataGrid
            getRowId={(row) => row.file_name}
            rows={attachedFiles}
            columns={attachedFilesColumns}
            disableRowSelectionOnClick
            initialState={{
              pagination: { paginationModel: { pageSize: 5 } },
            }}
          />
        </Box>
        <Stack direction="row">
          <AppLink
            to="/search-data-repositories/$id"
            params={{ id: previewItem.id }}
          >
            <Button variant="contained">View datasets</Button>
          </AppLink>
          <Button variant="outlined">Download files</Button>
        </Stack>
      </Stack>
    </Paper>
  );
};



================================================
FILE: src/pages/search-data-repositories/-tests/search-data-repositories.cy.ts
================================================
describe('The Search Data Repositories Task Flow', () => {
  beforeEach(() => {
    cy.visit('/search-data-repositories');
  });

  it('successfully loads', () => {
    cy.contains('Search Data Repositories');
  });

  it('filters by checkbox', () => {
    cy.get('span').contains('Floods').click();
    cy.wait(3000);
    cy.get('div[data-testid="sdr-data-list-card"]').should('have.length', 3);
  });

  it('opens the preview panel', () => {
    cy.wait(3000);
    cy.get('div[data-testid="sdr-data-list-card"]').first().click();
    cy.contains('Data from Decadal Change');
  });
});



================================================
FILE: src/types/filters.types.tsx
================================================
export type ParamType = 'standard' | 'array-string' | 'repeated' | 'minmax';

export type FilterOperator =
  | 'contains'
  | 'contains-one-of'
  | 'equals'
  | 'equals-one-of'
  | 'between-inclusive'
  | 'between-dates-inclusive';

export type FilterComponent =
  | 'RangeSlider'
  | 'CheckboxList'
  | 'DateRange'
  | 'TextField';

/**
 * The type of the value should be dependent on the filterComponent
 */
export type FilterValue<T> = T extends 'RangeSlider'
  ? number[]
  : T extends 'CheckboxList'
    ? string[] | number[] | null
    : T extends 'DateRange'
      ? [Date | null, Date | null]
      : T extends 'TextField'
        ? string | null
        : never;

export interface DataFilter {
  field: string;
  value: string | number | string[] | number[] | null;
}

export interface FilterConfig {
  field: string;
  label: string;
  operator?: FilterOperator;
  paramType?: ParamType;
  paramTypeOptions?: any;
  filterComponent: FilterComponent;
  filterProps?: any;
}

export interface DataCard {
  title: string;
  content?: string;
  tags?: string;
}



================================================
FILE: src/utils/filters.utils.ts
================================================
import dayjs from 'dayjs';
import { DataFilter, FilterConfig } from '../types/filters.types';

export const filterBySearchText = (allData: any[], searchText?: string) => {
  let filteredData = allData;
  if (searchText) {
    filteredData = allData.filter((d) => {
      const rowString = JSON.stringify(d).toLowerCase();
      return rowString.indexOf(searchText.toLowerCase()) > -1;
    });
  }
  return filteredData;
};

export const filterByDataFilters = (
  allData: any[],
  filters: DataFilter[],
  filterConfigs: FilterConfig[]
) => {
  let filteredData = allData;
  if (allData && filters.length > 0) {
    // Pre build map of filter to operator for performance boost
    const filterOperatorMap: Record<string, string | undefined> = {};
    filters.forEach((f) => {
      if (filterConfigs) {
        const filterConfig = filterConfigs.find((c) => c.field === f.field);
        filterOperatorMap[f.field] = filterConfig?.operator;
      }
    });
    filteredData = allData.filter((d) => {
      let include = true;
      // All filters have to be matched for a row to be included in the filtered data
      filters.forEach((f) => {
        let match = false;
        if (include === true) {
          switch (filterOperatorMap[f.field]) {
            case 'contains': {
              if (d[f.field].indexOf(f.value) > -1) {
                match = true;
              }
              break;
            }
            case 'contains-one-of': {
              if (Array.isArray(f.value)) {
                f.value.forEach((v) => {
                  if (!match) {
                    if (Array.isArray(d[f.field])) {
                      if (d[f.field].indexOf(v) > -1) {
                        match = true;
                      }
                    } else {
                      if (d[f.field] === v) {
                        match = true;
                      }
                    }
                  }
                });
              }
              break;
            }
            case 'equals-one-of': {
              if (Array.isArray(f.value)) {
                f.value.forEach((v) => {
                  if (!match) {
                    if (d[f.field] === v) {
                      match = true;
                    }
                  }
                });
              }
              break;
            }
            case 'between-inclusive': {
              if (Array.isArray(f.value)) {
                const min = f.value[0];
                const max = f.value[1];
                if (d[f.field] >= min && d[f.field] <= max) {
                  match = true;
                }
              }
              break;
            }
            case 'between-dates-inclusive': {
              if (
                typeof d[f.field] === 'string' &&
                Array.isArray(f.value) &&
                f.value[0] &&
                f.value[1]
              ) {
                const dateValue = dayjs(d[f.field]);
                if (
                  dateValue.isAfter(f.value[0]) &&
                  dateValue.isBefore(f.value[1])
                ) {
                  match = true;
                }
              } else {
                match = true;
              }
              break;
            }
            default:
              break;
          }
        }
        if (!match) include = false;
      });
      return include;
    });
  }
  return filteredData;
};

export const filterData = (
  allData: any[],
  filters: DataFilter[],
  filterConfigs: FilterConfig[],
  searchText?: string
) => {
  const filteredByText = filterBySearchText(allData, searchText);
  const filteredByTextAndDataFilters = filterByDataFilters(
    filteredByText,
    filters,
    filterConfigs
  );
  return filteredByTextAndDataFilters;
};

export const initSliderTicks = (
  ticks: number | null,
  domain: number[],
  scale?: any
) => {
  if (ticks === 2) {
    return domain;
  } else if (ticks !== null) {
    return scale.ticks(ticks);
  } else {
    return;
  }
};



================================================
FILE: src/utils/queryParams.utils.ts
================================================
import { DataFilter, FilterConfig } from '../types/filters.types';
import * as d3 from 'd3-fetch';

/**
 * Convert an array of values to a URL param by
 * joining the values with a separator.
 */
const toParamArrayString = (
  field: string,
  value: DataFilter['value'],
  separator = ','
) => {
  if (Array.isArray(value)) {
    return `${field}=${value.join(separator)}`;
  } else {
    return '';
  }
};

/**
 * Convert an array of values to URL params by
 * repeating the param for each value in the array.
 */
const toParamRepeated = (field: string, value: DataFilter['value']) => {
  let paramsString = '';
  if (Array.isArray(value)) {
    const valuesLength = value?.length;
    value.forEach((optionValue, k) => {
      paramsString = paramsString.concat(`${field}=${optionValue}`);
      if (k < valuesLength - 1) {
        paramsString = paramsString.concat('&');
      }
    });
  }
  return paramsString;
};

/**
 * Convert an array [min, max] to two URL params,
 * one for the min value and one for the max value.
 */
const toParamMinMax = (
  field: string,
  value: DataFilter['value'],
  minParam?: string,
  maxParam?: string
) => {
  if (Array.isArray(value) && minParam && maxParam) {
    const minParamString = `${minParam}=${value[0]}`;
    const maxParamString = `${maxParam}=${value[1]}`;
    return `${minParamString}&${maxParamString}`;
  } else {
    return '';
  }
};

/**
 * Using an array of active filters and a corresponding array of filter
 * config objects, build a valid query params string for the URL.
 */
export const buildParamsString = (
  filters: DataFilter[],
  filterConfigs: FilterConfig[]
) => {
  let paramsString = '';
  filters.forEach((filter, i) => {
    const filterConfig = filterConfigs.find((c) => c.field === filter.field);
    switch (filterConfig?.paramType) {
      case 'array-string':
        paramsString = paramsString.concat(
          toParamArrayString(
            filter.field,
            filter.value,
            filterConfig.paramTypeOptions.separator
          )
        );
        break;
      case 'repeated':
        paramsString = paramsString.concat(
          toParamRepeated(filter.field, filter.value)
        );
        break;
      case 'minmax':
        paramsString = paramsString.concat(
          toParamMinMax(
            filter.field,
            filter.value,
            filterConfig.paramTypeOptions.minParam,
            filterConfig.paramTypeOptions.maxParam
          )
        );
        break;
      default:
        paramsString = paramsString.concat(`${filter.field}=${filter.value}`);
    }
    if (i < filters.length - 1) {
      paramsString = paramsString.concat('&');
    }
  });
  return paramsString;
};

export const createFilterParams = (
  filters: DataFilter[],
  filterConfigs: FilterConfig[]
) => {
  const params = new URLSearchParams();
  filters.forEach((filter) => {
    const filterConfig = filterConfigs.find((c) => c.field === filter.field);
    const options = filterConfig?.paramTypeOptions;
    switch (filterConfig?.paramType) {
      case 'array-string':
        if (Array.isArray(filter.value)) {
          const separator = options?.separator || ',';
          params.append(filter.field, filter.value.join(separator));
        }
        break;
      case 'minmax':
        if (
          Array.isArray(filter.value) &&
          options.minParam &&
          options.maxParam
        ) {
          params.append(options.minParam, filter.value[0].toString());
          params.append(options.maxParam, filter.value[1].toString());
        }
        break;
      case 'repeated':
        if (Array.isArray(filter.value)) {
          filter.value.forEach((value) => {
            params.append(filter.field, value.toString());
          });
        }
        break;
      default:
        if (filter.value) {
          params.append(filter.field, filter.value.toString());
        }
    }
  });
  return params;
};

export const cleanUrl = (url: string) => {
  return url.replace(/([^:]\/)\/+/g, '$1');
};

export const cleanPath = (url: string) => {
  return url.replace(/\/\//g, '/');
};

/**
 * Fetch data from a local CSV, TSV, or JSON, or an external API
 * that returns JSON.
 */
export const fetchData = async (dataSource: string) => {
  // Get the base portion of the URL. Will be blank when running locally.
  const base = document.querySelector('base')?.getAttribute('href') ?? '';
  // Use the VITE_BASE_URL env variable to specify a path prefix that
  // should be added to routes and local requests
  const basePath = import.meta.env.VITE_BASE_URL || '';
  const basename = base + basePath;
  const fileExtension = dataSource.split('.').pop();
  const isExternal = dataSource.startsWith('http');
  const dataSourcePath = isExternal
    ? cleanUrl(dataSource)
    : cleanUrl(`${basename}/${dataSource}`);
  let data: any = [];
  if (fileExtension === 'csv') {
    data = await d3.csv(dataSourcePath);
  } else if (fileExtension === 'tsv') {
    data = await d3.tsv(dataSourcePath);
  } else if (fileExtension === 'json' || isExternal) {
    const response = await fetch(dataSourcePath);
    data = await response.json();
  }
  return data;
};



================================================
FILE: src/utils/string.utils.ts
================================================
import { AnyRoute } from '@tanstack/react-router';

export const removeExtraSlashes = (str: string) => {
  return str.replace(/([^:]\/)\/+/g, '$1');
};

export const capitalize = (str: string) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

export const fromKebabCase = (str: string) => {
  const words = str.split('-').map((word) => capitalize(word));
  return words.join(' ');
};

export const getNameFromPath = (path: string) => {
  const pathParts = path.split('/').filter((d: string) => d);
  return fromKebabCase(pathParts[pathParts.length - 1]);
};

export const getSubRoutes = (flatRoutes: AnyRoute[], subRouteName: string) => {
  return flatRoutes.filter((route: AnyRoute) => {
    const pathParts = route.fullPath.split('/').filter((d: string) => d);
    const lastCharacter = route.fullPath[route.fullPath.length - 1];
    if (
      pathParts.length === 2 &&
      pathParts[0] === subRouteName &&
      lastCharacter === '/'
    ) {
      return route;
    }
  });
};

export const getTaskFlowRoutes = (flatRoutes: AnyRoute[]) => {
  return flatRoutes.filter((route: AnyRoute) => {
    const pathParts = route.fullPath.split('/').filter((d: string) => d);
    const lastCharacter = route.fullPath[route.fullPath.length - 1];
    if (
      pathParts.length === 1 &&
      pathParts[0] !== 'playground' &&
      pathParts[0] !== undefined &&
      lastCharacter === '/'
    ) {
      return route;
    }
  });
};

export const getTopLevelRoutes = (flatRoutes: AnyRoute[]) => {
  return flatRoutes.filter((route: AnyRoute) => {
    const pathParts = route.fullPath.split('/').filter((d: string) => d);
    const lastCharacter = route.fullPath[route.fullPath.length - 1];
    if (
      pathParts.length === 1 &&
      (pathParts[0] === 'playground' || pathParts[0] === undefined) &&
      lastCharacter === '/'
    ) {
      return route;
    }
  });
};



================================================
FILE: .github/dependabot.yml
================================================
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for more information:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates
# https://containers.dev/guide/dependabot

version: 2
updates:
 - package-ecosystem: "devcontainers"
   directory: "/"
   schedule:
     interval: weekly



================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.



================================================
FILE: .github/ISSUE_TEMPLATE/feature_request.md
================================================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.



================================================
FILE: .github/ISSUE_TEMPLATE/live_example.md
================================================
---
name: Live example
about: Example of web apps that implement Task Flows
title: ''
labels: ''
assignees: ''

---

**What Task Flows does your example show?**
List the [Task Flows](https://strudel.science/design-system/task-flows/overview/) you are demonstrating.

**Please share the link to the website you will share as an example.**
Share the link that will go in the .mdx file you edit.

**Do you or your organization own the website in this example?**

**Please share a sentence or two that describes your example.**
You might describe the purpose of the website or the audience it serves.

**Anything else?**



================================================
FILE: .github/workflows/deploy.yml
================================================
name: Deploy to GitHub Pages

on:
  # Runs on pushes to the main branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install docs dependencies
        run: |
          cd docs
          npm install
      - name: Install demo dependencies
        run: npm install
      - name: Build docs
        run: |
          cd docs
          npm run build
      - name: Build demo
        run: npm run build
        env:
          VITE_BASE_URL: /strudel-kit/demo/
      - name: Deploy docs
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          cd docs
          npx gh-pages -d build -e docs -u "github-actions-bot <support+actions@github.com>"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy demo
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          npx gh-pages -d dist -e demo -u "github-actions-bot <support+actions@github.com>"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



================================================
FILE: .github/workflows/main.yml
================================================
name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install taskflow dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint:fix
      - name: Run Prettier
        run: npm run prettier:fix
  cypress-tests:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Install npm dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          start: npm start



================================================
FILE: .husky/pre-commit
================================================
npx lint-staged

